// Generated from org\apache\shardingsphere\sql\parser\autogen\MySQLStatement.g4 by ANTLR 4.7.2
package org.apache.shardingsphere.sql.parser.autogen;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySQLStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		AND_=1, OR_=2, NOT_=3, TILDE_=4, VERTICAL_BAR_=5, AMPERSAND_=6, SIGNED_LEFT_SHIFT_=7, 
		SIGNED_RIGHT_SHIFT_=8, CARET_=9, MOD_=10, COLON_=11, PLUS_=12, MINUS_=13, 
		ASTERISK_=14, SLASH_=15, BACKSLASH_=16, DOT_=17, DOT_ASTERISK_=18, SAFE_EQ_=19, 
		DEQ_=20, EQ_=21, NEQ_=22, GT_=23, GTE_=24, LT_=25, LTE_=26, POUND_=27, 
		LP_=28, RP_=29, LBE_=30, RBE_=31, LBT_=32, RBT_=33, COMMA_=34, DQ_=35, 
		SQ_=36, BQ_=37, QUESTION_=38, AT_=39, SEMI_=40, BLOCK_COMMENT=41, INLINE_COMMENT=42, 
		WS=43, SELECT=44, INSERT=45, UPDATE=46, DELETE=47, CREATE=48, ALTER=49, 
		DROP=50, TRUNCATE=51, SCHEMA=52, GRANT=53, REVOKE=54, ADD=55, SET=56, 
		TABLE=57, COLUMN=58, INDEX=59, CONSTRAINT=60, PRIMARY=61, UNIQUE=62, FOREIGN=63, 
		KEY=64, POSITION=65, PRECISION=66, FUNCTION=67, TRIGGER=68, PROCEDURE=69, 
		VIEW=70, INTO=71, VALUES=72, WITH=73, UNION=74, DISTINCT=75, CASE=76, 
		WHEN=77, CAST=78, TRIM=79, SUBSTRING=80, FROM=81, NATURAL=82, JOIN=83, 
		FULL=84, INNER=85, OUTER=86, LEFT=87, RIGHT=88, CROSS=89, USING=90, WHERE=91, 
		AS=92, ON=93, IF=94, ELSE=95, THEN=96, FOR=97, TO=98, AND=99, OR=100, 
		IS=101, NOT=102, NULL=103, TRUE=104, FALSE=105, EXISTS=106, BETWEEN=107, 
		IN=108, ALL=109, ANY=110, LIKE=111, ORDER=112, GROUP=113, BY=114, ASC=115, 
		DESC=116, HAVING=117, LIMIT=118, OFFSET=119, BEGIN=120, COMMIT=121, ROLLBACK=122, 
		SAVEPOINT=123, BOOLEAN=124, DOUBLE=125, CHAR=126, CHARACTER=127, ARRAY=128, 
		INTERVAL=129, DATE=130, TIME=131, TIMESTAMP=132, LOCALTIME=133, LOCALTIMESTAMP=134, 
		YEAR=135, QUARTER=136, MONTH=137, WEEK=138, DAY=139, HOUR=140, MINUTE=141, 
		SECOND=142, MICROSECOND=143, MAX=144, MIN=145, SUM=146, COUNT=147, AVG=148, 
		DEFAULT=149, CURRENT=150, ENABLE=151, DISABLE=152, CALL=153, INSTANCE=154, 
		PRESERVE=155, DO=156, DEFINER=157, CURRENT_USER=158, SQL=159, CASCADED=160, 
		LOCAL=161, CLOSE=162, OPEN=163, NEXT=164, NAME=165, COLLATION=166, NAMES=167, 
		INTEGER=168, REAL=169, DECIMAL=170, TYPE=171, INT=172, SMALLINT=173, TINYINT=174, 
		MEDIUMINT=175, BIGINT=176, NUMERIC=177, FLOAT=178, DATETIME=179, FOR_GENERATOR=180, 
		USE=181, DESCRIBE=182, SHOW=183, DATABASES=184, DATABASE=185, SCHEMAS=186, 
		TABLES=187, TABLESPACE=188, COLUMNS=189, FIELDS=190, INDEXES=191, STATUS=192, 
		REPLACE=193, MODIFY=194, DISTINCTROW=195, VALUE=196, DUPLICATE=197, FIRST=198, 
		LAST=199, AFTER=200, OJ=201, WINDOW=202, MOD=203, DIV=204, XOR=205, REGEXP=206, 
		RLIKE=207, ACCOUNT=208, USER=209, ROLE=210, START=211, TRANSACTION=212, 
		ROW=213, ROWS=214, WITHOUT=215, BINARY=216, ESCAPE=217, GENERATED=218, 
		PARTITION=219, SUBPARTITION=220, STORAGE=221, STORED=222, SUPER=223, SUBSTR=224, 
		TEMPORARY=225, THAN=226, TRAILING=227, UNBOUNDED=228, UNLOCK=229, UNSIGNED=230, 
		SIGNED=231, UPGRADE=232, USAGE=233, VALIDATION=234, VIRTUAL=235, ROLLUP=236, 
		SOUNDS=237, UNKNOWN=238, OFF=239, ALWAYS=240, CASCADE=241, CHECK=242, 
		COMMITTED=243, LEVEL=244, NO=245, OPTION=246, PASSWORD=247, PRIVILEGES=248, 
		READ=249, WRITE=250, REFERENCES=251, ACTION=252, ALGORITHM=253, ANALYZE=254, 
		AUTOCOMMIT=255, MAXVALUE=256, BOTH=257, BTREE=258, CHAIN=259, CHANGE=260, 
		CHARSET=261, CHECKSUM=262, CIPHER=263, CLIENT=264, COALESCE=265, COLLATE=266, 
		COMMENT=267, COMPACT=268, COMPRESSED=269, COMPRESSION=270, CONNECTION=271, 
		CONSISTENT=272, CONVERT=273, COPY=274, DATA=275, DELAYED=276, DIRECTORY=277, 
		DISCARD=278, DISK=279, DYNAMIC=280, ENCRYPTION=281, END=282, ENGINE=283, 
		EVENT=284, EXCEPT=285, EXCHANGE=286, EXCLUSIVE=287, EXECUTE=288, EXTRACT=289, 
		FILE=290, FIXED=291, FOLLOWING=292, FORCE=293, FULLTEXT=294, GLOBAL=295, 
		HASH=296, IDENTIFIED=297, IGNORE=298, IMPORT_=299, INPLACE=300, KEYS=301, 
		LEADING=302, LESS=303, LINEAR=304, LOCK=305, MATCH=306, MEMORY=307, NONE=308, 
		NOW=309, OFFLINE=310, ONLINE=311, OPTIMIZE=312, OVER=313, PARSER=314, 
		PARTIAL=315, PARTITIONING=316, PERSIST=317, PRECEDING=318, PROCESS=319, 
		PROXY=320, QUICK=321, RANGE=322, REBUILD=323, RECURSIVE=324, REDUNDANT=325, 
		RELEASE=326, RELOAD=327, REMOVE=328, RENAME=329, REORGANIZE=330, REPAIR=331, 
		REPLICATION=332, REQUIRE=333, RESTRICT=334, REVERSE=335, ROUTINE=336, 
		SEPARATOR=337, SESSION=338, SHARED=339, SHUTDOWN=340, SIMPLE=341, SLAVE=342, 
		SPATIAL=343, ZEROFILL=344, VISIBLE=345, INVISIBLE=346, INSTANT=347, ENFORCED=348, 
		AGAINST=349, LANGUAGE=350, MODE=351, QUERY=352, EXTENDED=353, EXPANSION=354, 
		VARIANCE=355, MAX_ROWS=356, MIN_ROWS=357, HIGH_PRIORITY=358, LOW_PRIORITY=359, 
		SQL_BIG_RESULT=360, SQL_BUFFER_RESULT=361, SQL_CACHE=362, SQL_CALC_FOUND_ROWS=363, 
		SQL_NO_CACHE=364, SQL_SMALL_RESULT=365, STATS_AUTO_RECALC=366, STATS_PERSISTENT=367, 
		STATS_SAMPLE_PAGES=368, ROLE_ADMIN=369, ROW_FORMAT=370, SET_USER_ID=371, 
		REPLICATION_SLAVE_ADMIN=372, GROUP_REPLICATION_ADMIN=373, STRAIGHT_JOIN=374, 
		WEIGHT_STRING=375, COLUMN_FORMAT=376, CONNECTION_ADMIN=377, FIREWALL_ADMIN=378, 
		FIREWALL_USER=379, INSERT_METHOD=380, KEY_BLOCK_SIZE=381, PACK_KEYS=382, 
		PERSIST_ONLY=383, BIT_AND=384, BIT_OR=385, BIT_XOR=386, GROUP_CONCAT=387, 
		JSON_ARRAYAGG=388, JSON_OBJECTAGG=389, STD=390, STDDEV=391, STDDEV_POP=392, 
		STDDEV_SAMP=393, VAR_POP=394, VAR_SAMP=395, AUDIT_ADMIN=396, AUTO_INCREMENT=397, 
		AVG_ROW_LENGTH=398, BINLOG_ADMIN=399, DELAY_KEY_WRITE=400, ENCRYPTION_KEY_ADMIN=401, 
		SYSTEM_VARIABLES_ADMIN=402, VERSION_TOKEN_ADMIN=403, CURRENT_TIMESTAMP=404, 
		YEAR_MONTH=405, DAY_HOUR=406, DAY_MINUTE=407, DAY_SECOND=408, DAY_MICROSECOND=409, 
		HOUR_MINUTE=410, HOUR_SECOND=411, HOUR_MICROSECOND=412, MINUTE_SECOND=413, 
		MINUTE_MICROSECOND=414, SECOND_MICROSECOND=415, UL_BINARY=416, ROTATE=417, 
		MASTER=418, BINLOG=419, ERROR=420, SCHEDULE=421, COMPLETION=422, EVERY=423, 
		STARTS=424, ENDS=425, HOST=426, SOCKET=427, PORT=428, SERVER=429, WRAPPER=430, 
		OPTIONS=431, OWNER=432, DETERMINISTIC=433, RETURNS=434, CONTAINS=435, 
		READS=436, MODIFIES=437, SECURITY=438, INVOKER=439, OUT=440, INOUT=441, 
		TEMPTABLE=442, MERGE=443, UNDEFINED=444, DATAFILE=445, FILE_BLOCK_SIZE=446, 
		EXTENT_SIZE=447, INITIAL_SIZE=448, AUTOEXTEND_SIZE=449, MAX_SIZE=450, 
		NODEGROUP=451, WAIT=452, LOGFILE=453, UNDOFILE=454, UNDO_BUFFER_SIZE=455, 
		REDO_BUFFER_SIZE=456, HANDLER=457, PREV=458, ORGANIZATION=459, DEFINITION=460, 
		DESCRIPTION=461, REFERENCE=462, FOLLOWS=463, PRECEDES=464, IMPORT=465, 
		LOAD=466, CONCURRENT=467, INFILE=468, LINES=469, STARTING=470, TERMINATED=471, 
		OPTIONALLY=472, ENCLOSED=473, ESCAPED=474, XML=475, UNDO=476, DUMPFILE=477, 
		OUTFILE=478, SHARE=479, LOGS=480, EVENTS=481, BEFORE=482, EACH=483, MUTEX=484, 
		ENGINES=485, ERRORS=486, CODE=487, GRANTS=488, PLUGINS=489, PROCESSLIST=490, 
		BLOCK=491, IO=492, CONTEXT=493, SWITCHES=494, CPU=495, IPC=496, PAGE=497, 
		FAULTS=498, SOURCE=499, SWAPS=500, PROFILE=501, PROFILES=502, RELAYLOG=503, 
		CHANNEL=504, VARIABLES=505, WARNINGS=506, SSL=507, CLONE=508, AGGREGATE=509, 
		STRING=510, SONAME=511, INSTALL=512, COMPONENT=513, PLUGIN=514, UNINSTALL=515, 
		NO_WRITE_TO_BINLOG=516, HISTOGRAM=517, BUCKETS=518, FAST=519, MEDIUM=520, 
		USE_FRM=521, RESOURCE=522, VCPU=523, THREAD_PRIORITY=524, SYSTEM=525, 
		EXPIRE=526, NEVER=527, HISTORY=528, OPTIONAL=529, REUSE=530, MAX_QUERIES_PER_HOUR=531, 
		MAX_UPDATES_PER_HOUR=532, MAX_CONNECTIONS_PER_HOUR=533, MAX_USER_CONNECTIONS=534, 
		RETAIN=535, RANDOM=536, OLD=537, X509=538, ISSUER=539, SUBJECT=540, CACHE=541, 
		GENERAL=542, OPTIMIZER_COSTS=543, SLOW=544, USER_RESOURCES=545, EXPORT=546, 
		RELAY=547, HOSTS=548, KILL=549, FLUSH=550, RESET=551, RESTART=552, UNIX_TIMESTAMP=553, 
		LOWER=554, UPPER=555, ADDDATE=556, ADDTIME=557, DATE_ADD=558, DATE_SUB=559, 
		DATEDIFF=560, DATE_FORMAT=561, DAYNAME=562, DAYOFMONTH=563, DAYOFWEEK=564, 
		DAYOFYEAR=565, STR_TO_DATE=566, TIMEDIFF=567, TIMESTAMPADD=568, TIMESTAMPDIFF=569, 
		TIME_FORMAT=570, TIME_TO_SEC=571, AES_DECRYPT=572, AES_ENCRYPT=573, FROM_BASE64=574, 
		TO_BASE64=575, GEOMCOLLECTION=576, GEOMETRYCOLLECTION=577, LINESTRING=578, 
		MULTILINESTRING=579, MULTIPOINT=580, MULTIPOLYGON=581, POINT=582, POLYGON=583, 
		ST_AREA=584, ST_ASBINARY=585, ST_ASGEOJSON=586, ST_ASTEXT=587, ST_ASWKB=588, 
		ST_ASWKT=589, ST_BUFFER=590, ST_BUFFER_STRATEGY=591, ST_CENTROID=592, 
		ST_CONTAINS=593, ST_CONVEXHULL=594, ST_CROSSES=595, ST_DIFFERENCE=596, 
		ST_DIMENSION=597, ST_DISJOINT=598, ST_DISTANCE=599, ST_DISTANCE_SPHERE=600, 
		ST_ENDPOINT=601, ST_ENVELOPE=602, ST_EQUALS=603, ST_EXTERIORRING=604, 
		ST_GEOHASH=605, ST_GEOMCOLLFROMTEXT=606, ST_GEOMCOLLFROMTXT=607, ST_GEOMCOLLFROMWKB=608, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=609, ST_GEOMETRYCOLLECTIONFROMWKB=610, ST_GEOMETRYFROMTEXT=611, 
		ST_GEOMETRYFROMWKB=612, ST_GEOMETRYN=613, ST_GEOMETRYTYPE=614, ST_GEOMFROMGEOJSON=615, 
		ST_GEOMFROMTEXT=616, ST_GEOMFROMWKB=617, ST_INTERIORRINGN=618, ST_INTERSECTION=619, 
		ST_INTERSECTS=620, ST_ISCLOSED=621, ST_ISEMPTY=622, ST_ISSIMPLE=623, ST_ISVALID=624, 
		ST_LATFROMGEOHASH=625, ST_LATITUDE=626, ST_LENGTH=627, ST_LINEFROMTEXT=628, 
		ST_LINEFROMWKB=629, ST_LINESTRINGFROMTEXT=630, ST_LINESTRINGFROMWKB=631, 
		ST_LONGFROMGEOHASH=632, ST_LONGITUDE=633, ST_MAKEENVELOPE=634, ST_MLINEFROMTEXT=635, 
		ST_MLINEFROMWKB=636, ST_MULTILINESTRINGFROMTEXT=637, ST_MULTILINESTRINGFROMWKB=638, 
		ST_MPOINTFROMTEXT=639, ST_MPOINTFROMWKB=640, ST_MULTIPOINTFROMTEXT=641, 
		ST_MULTIPOINTFROMWKB=642, ST_MPOLYFROMTEXT=643, ST_MPOLYFROMWKB=644, ST_MULTIPOLYGONFROMTEXT=645, 
		ST_MULTIPOLYGONFROMWKB=646, ST_NUMGEOMETRIES=647, ST_NUMINTERIORRING=648, 
		ST_NUMINTERIORRINGS=649, ST_NUMPOINTS=650, ST_OVERLAPS=651, ST_POINTFROMGEOHASH=652, 
		ST_POINTFROMTEXT=653, ST_POINTFROMWKB=654, ST_POINTN=655, ST_POLYFROMTEXT=656, 
		ST_POLYFROMWKB=657, ST_POLYGONFROMTEXT=658, ST_POLYGONFROMWKB=659, ST_SIMPLIFY=660, 
		ST_SRID=661, ST_STARTPOINT=662, ST_SWAPXY=663, ST_SYMDIFFERENCE=664, ST_TOUCHES=665, 
		ST_TRANSFORM=666, ST_UNION=667, ST_VALIDATE=668, ST_WITHIN=669, ST_X=670, 
		ST_Y=671, BIT=672, BOOL=673, DEC=674, VARCHAR=675, VARBINARY=676, TINYBLOB=677, 
		TINYTEXT=678, BLOB=679, TEXT=680, MEDIUMBLOB=681, MEDIUMTEXT=682, LONGBLOB=683, 
		LONGTEXT=684, ENUM=685, GEOMETRY=686, JSON=687, IO_THREAD=688, SQL_THREAD=689, 
		SQL_BEFORE_GTIDS=690, SQL_AFTER_GTIDS=691, MASTER_LOG_FILE=692, MASTER_LOG_POS=693, 
		RELAY_LOG_FILE=694, RELAY_LOG_POS=695, SQL_AFTER_MTS_GAPS=696, UNTIL=697, 
		DEFAULT_AUTH=698, PLUGIN_DIR=699, STOP=700, IDENTIFIER_=701, STRING_=702, 
		NUMBER_=703, HEX_DIGIT_=704, BIT_NUM_=705, INNODB_=706, TLS_=707, Y_N_=708, 
		NOT_SUPPORT_=709, FILESIZE_LITERAL=710;
	public static final int
		RULE_execute = 0, RULE_insert = 1, RULE_insertSpecification_ = 2, RULE_insertValuesClause = 3, 
		RULE_insertSelectClause = 4, RULE_onDuplicateKeyClause = 5, RULE_replace = 6, 
		RULE_replaceSpecification_ = 7, RULE_update = 8, RULE_updateSpecification_ = 9, 
		RULE_assignment = 10, RULE_setAssignmentsClause = 11, RULE_assignmentValues = 12, 
		RULE_assignmentValue = 13, RULE_blobValue = 14, RULE_delete = 15, RULE_deleteSpecification_ = 16, 
		RULE_singleTableClause = 17, RULE_multipleTablesClause = 18, RULE_multipleTableNames = 19, 
		RULE_select = 20, RULE_call = 21, RULE_doStatement = 22, RULE_handlerStatement = 23, 
		RULE_handlerOpenStatement = 24, RULE_handlerReadIndexStatement = 25, RULE_handlerReadStatement = 26, 
		RULE_handlerCloseStatement = 27, RULE_importStatement = 28, RULE_loadDataStatement = 29, 
		RULE_loadXmlStatement = 30, RULE_withClause_ = 31, RULE_cteClause_ = 32, 
		RULE_unionClause = 33, RULE_selectClause = 34, RULE_selectSpecification = 35, 
		RULE_duplicateSpecification = 36, RULE_projections = 37, RULE_projection = 38, 
		RULE_alias = 39, RULE_unqualifiedShorthand = 40, RULE_qualifiedShorthand = 41, 
		RULE_fromClause = 42, RULE_tableReferences = 43, RULE_escapedTableReference = 44, 
		RULE_tableReference = 45, RULE_tableFactor = 46, RULE_partitionNames_ = 47, 
		RULE_indexHintList_ = 48, RULE_indexHint_ = 49, RULE_joinedTable = 50, 
		RULE_joinSpecification = 51, RULE_whereClause = 52, RULE_groupByClause = 53, 
		RULE_havingClause = 54, RULE_limitClause = 55, RULE_limitRowCount = 56, 
		RULE_limitOffset = 57, RULE_windowClause_ = 58, RULE_windowItem_ = 59, 
		RULE_subquery = 60, RULE_selectLinesInto_ = 61, RULE_selectFieldsInto_ = 62, 
		RULE_selectIntoExpression_ = 63, RULE_lockClause = 64, RULE_parameterMarker = 65, 
		RULE_literals = 66, RULE_stringLiterals = 67, RULE_numberLiterals = 68, 
		RULE_dateTimeLiterals = 69, RULE_hexadecimalLiterals = 70, RULE_bitValueLiterals = 71, 
		RULE_booleanLiterals = 72, RULE_nullValueLiterals = 73, RULE_characterSetName_ = 74, 
		RULE_collationName_ = 75, RULE_identifier = 76, RULE_unreservedWord = 77, 
		RULE_variable = 78, RULE_schemaName = 79, RULE_tableName = 80, RULE_columnName = 81, 
		RULE_indexName = 82, RULE_userName = 83, RULE_eventName = 84, RULE_serverName = 85, 
		RULE_wrapperName = 86, RULE_functionName = 87, RULE_viewName = 88, RULE_owner = 89, 
		RULE_name = 90, RULE_tableNames = 91, RULE_columnNames = 92, RULE_groupName = 93, 
		RULE_shardLibraryName = 94, RULE_componentName = 95, RULE_pluginName = 96, 
		RULE_hostName = 97, RULE_port = 98, RULE_cloneInstance = 99, RULE_cloneDir = 100, 
		RULE_channelName = 101, RULE_logName = 102, RULE_roleName = 103, RULE_engineName = 104, 
		RULE_triggerName = 105, RULE_triggerTime = 106, RULE_userOrRole = 107, 
		RULE_partitionName = 108, RULE_triggerEvent = 109, RULE_triggerOrder = 110, 
		RULE_expr = 111, RULE_logicalOperator = 112, RULE_notOperator_ = 113, 
		RULE_booleanPrimary = 114, RULE_comparisonOperator = 115, RULE_predicate = 116, 
		RULE_bitExpr = 117, RULE_simpleExpr = 118, RULE_functionCall = 119, RULE_aggregationFunction = 120, 
		RULE_aggregationFunctionName = 121, RULE_distinct = 122, RULE_overClause_ = 123, 
		RULE_windowSpecification_ = 124, RULE_partitionClause_ = 125, RULE_frameClause_ = 126, 
		RULE_frameStart_ = 127, RULE_frameEnd_ = 128, RULE_frameBetween_ = 129, 
		RULE_specialFunction = 130, RULE_groupConcatFunction = 131, RULE_windowFunction = 132, 
		RULE_castFunction = 133, RULE_convertFunction = 134, RULE_positionFunction = 135, 
		RULE_substringFunction = 136, RULE_extractFunction = 137, RULE_charFunction = 138, 
		RULE_trimFunction_ = 139, RULE_valuesFunction_ = 140, RULE_weightStringFunction = 141, 
		RULE_levelClause_ = 142, RULE_levelInWeightListElement_ = 143, RULE_regularFunction = 144, 
		RULE_regularFunctionName_ = 145, RULE_matchExpression_ = 146, RULE_matchSearchModifier_ = 147, 
		RULE_caseExpression = 148, RULE_caseWhen_ = 149, RULE_caseElse_ = 150, 
		RULE_intervalExpression = 151, RULE_intervalUnit_ = 152, RULE_orderByClause = 153, 
		RULE_orderByItem = 154, RULE_dataType = 155, RULE_dataTypeName = 156, 
		RULE_dataTypeLength = 157, RULE_collectionOptions = 158, RULE_characterSet_ = 159, 
		RULE_collateClause_ = 160, RULE_ignoredIdentifier_ = 161, RULE_ignoredIdentifiers_ = 162, 
		RULE_createTable = 163, RULE_alterTable = 164, RULE_dropTable = 165, RULE_dropIndex = 166, 
		RULE_truncateTable = 167, RULE_createIndex = 168, RULE_createDatabase = 169, 
		RULE_alterDatabase = 170, RULE_createDatabaseSpecification_ = 171, RULE_dropDatabase = 172, 
		RULE_alterInstance = 173, RULE_instanceAction = 174, RULE_createEvent = 175, 
		RULE_alterEvent = 176, RULE_dropEvent = 177, RULE_createFunction = 178, 
		RULE_alterFunction = 179, RULE_dropFunction = 180, RULE_createProcedure = 181, 
		RULE_alterProcedure = 182, RULE_dropProcedure = 183, RULE_createServer = 184, 
		RULE_alterServer = 185, RULE_dropServer = 186, RULE_createView = 187, 
		RULE_alterView = 188, RULE_dropView = 189, RULE_createTablespaceInnodb = 190, 
		RULE_createTablespaceNdb = 191, RULE_alterTablespace = 192, RULE_dropTablespace = 193, 
		RULE_createLogfileGroup = 194, RULE_alterLogfileGroup = 195, RULE_dropLogfileGroup = 196, 
		RULE_createTrigger = 197, RULE_createTableSpecification_ = 198, RULE_tableNotExistClause_ = 199, 
		RULE_createDefinitionClause = 200, RULE_createDefinition = 201, RULE_columnDefinition = 202, 
		RULE_storageOption = 203, RULE_generatedOption = 204, RULE_dataTypeGenericOption = 205, 
		RULE_checkConstraintDefinition = 206, RULE_referenceDefinition = 207, 
		RULE_referenceOption_ = 208, RULE_indexDefinition_ = 209, RULE_indexType_ = 210, 
		RULE_keyParts_ = 211, RULE_keyPart_ = 212, RULE_indexOption_ = 213, RULE_constraintDefinition = 214, 
		RULE_primaryKeyOption = 215, RULE_primaryKey = 216, RULE_uniqueOption_ = 217, 
		RULE_foreignKeyOption = 218, RULE_createLikeClause = 219, RULE_createIndexSpecification_ = 220, 
		RULE_alterDefinitionClause = 221, RULE_alterSpecification = 222, RULE_tableOptions_ = 223, 
		RULE_tableOption_ = 224, RULE_addColumnSpecification = 225, RULE_firstOrAfterColumn = 226, 
		RULE_addIndexSpecification = 227, RULE_addConstraintSpecification = 228, 
		RULE_changeColumnSpecification = 229, RULE_modifyColumnSpecification = 230, 
		RULE_dropColumnSpecification = 231, RULE_dropIndexSpecification = 232, 
		RULE_dropPrimaryKeySpecification = 233, RULE_renameColumnSpecification = 234, 
		RULE_renameIndexSpecification = 235, RULE_renameTableSpecification = 236, 
		RULE_partitionDefinitions_ = 237, RULE_partitionDefinition_ = 238, RULE_partitionLessThanValue_ = 239, 
		RULE_partitionValueList_ = 240, RULE_partitionDefinitionOption_ = 241, 
		RULE_subpartitionDefinition_ = 242, RULE_dropTableSpecification_ = 243, 
		RULE_tableExistClause_ = 244, RULE_dropIndexSpecification_ = 245, RULE_ownerStatement = 246, 
		RULE_scheduleExpression_ = 247, RULE_timestampValue = 248, RULE_routineBody = 249, 
		RULE_serverOption_ = 250, RULE_routineOption_ = 251, RULE_procedureParameter_ = 252, 
		RULE_fileSizeLiteral_ = 253, RULE_setTransaction = 254, RULE_setAutoCommit = 255, 
		RULE_scope_ = 256, RULE_autoCommitValue = 257, RULE_beginTransaction = 258, 
		RULE_commit = 259, RULE_rollback = 260, RULE_savepoint = 261, RULE_grant = 262, 
		RULE_revoke = 263, RULE_proxyClause_ = 264, RULE_privilegeClause = 265, 
		RULE_roleClause_ = 266, RULE_allClause_ = 267, RULE_privileges_ = 268, 
		RULE_privilegeType_ = 269, RULE_onObjectClause = 270, RULE_objectType_ = 271, 
		RULE_privilegeLevel = 272, RULE_createUser = 273, RULE_alterUser = 274, 
		RULE_dropUser = 275, RULE_createRole = 276, RULE_dropRole = 277, RULE_renameUser = 278, 
		RULE_setDefaultRole = 279, RULE_setRole = 280, RULE_setPassword = 281, 
		RULE_authOption_ = 282, RULE_withGrantOption_ = 283, RULE_userOrRoles_ = 284, 
		RULE_roles_ = 285, RULE_grantOption_ = 286, RULE_userAuthOption_ = 287, 
		RULE_identifiedBy_ = 288, RULE_identifiedWith_ = 289, RULE_lockOption_ = 290, 
		RULE_passwordOption_ = 291, RULE_resourceOption_ = 292, RULE_tlsOption_ = 293, 
		RULE_userFuncAuthOption_ = 294, RULE_use = 295, RULE_desc = 296, RULE_showDatabases = 297, 
		RULE_showTables = 298, RULE_showTableStatus = 299, RULE_showColumns = 300, 
		RULE_showIndex = 301, RULE_showCreateTable = 302, RULE_showOther = 303, 
		RULE_fromSchema = 304, RULE_fromTable = 305, RULE_showLike = 306, RULE_showColumnLike_ = 307, 
		RULE_showWhereClause_ = 308, RULE_showFilter = 309, RULE_showProfileType = 310, 
		RULE_setVariable = 311, RULE_showBinaryLogs = 312, RULE_showBinlogEvents = 313, 
		RULE_showCharacterSet = 314, RULE_showCollation = 315, RULE_showCreateDatabase = 316, 
		RULE_showCreateEvent = 317, RULE_showCreateFunction = 318, RULE_showCreateProcedure = 319, 
		RULE_showCreateTrigger = 320, RULE_showCreateUser = 321, RULE_showCreateView = 322, 
		RULE_showEngine = 323, RULE_showEngines = 324, RULE_showErrors = 325, 
		RULE_showEvents = 326, RULE_showFunctionCode = 327, RULE_showFunctionStatus = 328, 
		RULE_showGrant = 329, RULE_showMasterStatus = 330, RULE_showOpenTables = 331, 
		RULE_showPlugins = 332, RULE_showPrivileges = 333, RULE_showProcedureCode = 334, 
		RULE_showProcedureStatus = 335, RULE_showProcesslist = 336, RULE_showProfile = 337, 
		RULE_showProfiles = 338, RULE_showRelaylogEvent = 339, RULE_showSlavehost = 340, 
		RULE_showSlaveStatus = 341, RULE_showStatus = 342, RULE_showTrriggers = 343, 
		RULE_showVariables = 344, RULE_showWarnings = 345, RULE_setCharacter = 346, 
		RULE_setName = 347, RULE_clone = 348, RULE_cloneAction_ = 349, RULE_createUdf = 350, 
		RULE_installComponent = 351, RULE_installPlugin = 352, RULE_uninstallComponent = 353, 
		RULE_uninstallPlugin = 354, RULE_analyzeTable = 355, RULE_checkTable = 356, 
		RULE_checkTableOption_ = 357, RULE_checksumTable = 358, RULE_optimizeTable = 359, 
		RULE_repairTable = 360, RULE_alterResourceGroup = 361, RULE_vcpuSpec_ = 362, 
		RULE_createResourceGroup = 363, RULE_dropResourceGroup = 364, RULE_setResourceGroup = 365, 
		RULE_binlog = 366, RULE_cacheIndex = 367, RULE_tableIndexList = 368, RULE_partitionList = 369, 
		RULE_flush = 370, RULE_flushOption_ = 371, RULE_tablesOption_ = 372, RULE_kill = 373, 
		RULE_loadIndexInfo = 374, RULE_resetStatement = 375, RULE_resetOption_ = 376, 
		RULE_resetPersist = 377, RULE_restart = 378, RULE_shutdown = 379, RULE_changeMasterTo = 380, 
		RULE_startSlave = 381, RULE_stopSlave = 382, RULE_threadTypes_ = 383, 
		RULE_threadType_ = 384, RULE_utilOption_ = 385, RULE_connectionOptions_ = 386, 
		RULE_channelOption_ = 387;
	private static String[] makeRuleNames() {
		return new String[] {
			"execute", "insert", "insertSpecification_", "insertValuesClause", "insertSelectClause", 
			"onDuplicateKeyClause", "replace", "replaceSpecification_", "update", 
			"updateSpecification_", "assignment", "setAssignmentsClause", "assignmentValues", 
			"assignmentValue", "blobValue", "delete", "deleteSpecification_", "singleTableClause", 
			"multipleTablesClause", "multipleTableNames", "select", "call", "doStatement", 
			"handlerStatement", "handlerOpenStatement", "handlerReadIndexStatement", 
			"handlerReadStatement", "handlerCloseStatement", "importStatement", "loadDataStatement", 
			"loadXmlStatement", "withClause_", "cteClause_", "unionClause", "selectClause", 
			"selectSpecification", "duplicateSpecification", "projections", "projection", 
			"alias", "unqualifiedShorthand", "qualifiedShorthand", "fromClause", 
			"tableReferences", "escapedTableReference", "tableReference", "tableFactor", 
			"partitionNames_", "indexHintList_", "indexHint_", "joinedTable", "joinSpecification", 
			"whereClause", "groupByClause", "havingClause", "limitClause", "limitRowCount", 
			"limitOffset", "windowClause_", "windowItem_", "subquery", "selectLinesInto_", 
			"selectFieldsInto_", "selectIntoExpression_", "lockClause", "parameterMarker", 
			"literals", "stringLiterals", "numberLiterals", "dateTimeLiterals", "hexadecimalLiterals", 
			"bitValueLiterals", "booleanLiterals", "nullValueLiterals", "characterSetName_", 
			"collationName_", "identifier", "unreservedWord", "variable", "schemaName", 
			"tableName", "columnName", "indexName", "userName", "eventName", "serverName", 
			"wrapperName", "functionName", "viewName", "owner", "name", "tableNames", 
			"columnNames", "groupName", "shardLibraryName", "componentName", "pluginName", 
			"hostName", "port", "cloneInstance", "cloneDir", "channelName", "logName", 
			"roleName", "engineName", "triggerName", "triggerTime", "userOrRole", 
			"partitionName", "triggerEvent", "triggerOrder", "expr", "logicalOperator", 
			"notOperator_", "booleanPrimary", "comparisonOperator", "predicate", 
			"bitExpr", "simpleExpr", "functionCall", "aggregationFunction", "aggregationFunctionName", 
			"distinct", "overClause_", "windowSpecification_", "partitionClause_", 
			"frameClause_", "frameStart_", "frameEnd_", "frameBetween_", "specialFunction", 
			"groupConcatFunction", "windowFunction", "castFunction", "convertFunction", 
			"positionFunction", "substringFunction", "extractFunction", "charFunction", 
			"trimFunction_", "valuesFunction_", "weightStringFunction", "levelClause_", 
			"levelInWeightListElement_", "regularFunction", "regularFunctionName_", 
			"matchExpression_", "matchSearchModifier_", "caseExpression", "caseWhen_", 
			"caseElse_", "intervalExpression", "intervalUnit_", "orderByClause", 
			"orderByItem", "dataType", "dataTypeName", "dataTypeLength", "collectionOptions", 
			"characterSet_", "collateClause_", "ignoredIdentifier_", "ignoredIdentifiers_", 
			"createTable", "alterTable", "dropTable", "dropIndex", "truncateTable", 
			"createIndex", "createDatabase", "alterDatabase", "createDatabaseSpecification_", 
			"dropDatabase", "alterInstance", "instanceAction", "createEvent", "alterEvent", 
			"dropEvent", "createFunction", "alterFunction", "dropFunction", "createProcedure", 
			"alterProcedure", "dropProcedure", "createServer", "alterServer", "dropServer", 
			"createView", "alterView", "dropView", "createTablespaceInnodb", "createTablespaceNdb", 
			"alterTablespace", "dropTablespace", "createLogfileGroup", "alterLogfileGroup", 
			"dropLogfileGroup", "createTrigger", "createTableSpecification_", "tableNotExistClause_", 
			"createDefinitionClause", "createDefinition", "columnDefinition", "storageOption", 
			"generatedOption", "dataTypeGenericOption", "checkConstraintDefinition", 
			"referenceDefinition", "referenceOption_", "indexDefinition_", "indexType_", 
			"keyParts_", "keyPart_", "indexOption_", "constraintDefinition", "primaryKeyOption", 
			"primaryKey", "uniqueOption_", "foreignKeyOption", "createLikeClause", 
			"createIndexSpecification_", "alterDefinitionClause", "alterSpecification", 
			"tableOptions_", "tableOption_", "addColumnSpecification", "firstOrAfterColumn", 
			"addIndexSpecification", "addConstraintSpecification", "changeColumnSpecification", 
			"modifyColumnSpecification", "dropColumnSpecification", "dropIndexSpecification", 
			"dropPrimaryKeySpecification", "renameColumnSpecification", "renameIndexSpecification", 
			"renameTableSpecification", "partitionDefinitions_", "partitionDefinition_", 
			"partitionLessThanValue_", "partitionValueList_", "partitionDefinitionOption_", 
			"subpartitionDefinition_", "dropTableSpecification_", "tableExistClause_", 
			"dropIndexSpecification_", "ownerStatement", "scheduleExpression_", "timestampValue", 
			"routineBody", "serverOption_", "routineOption_", "procedureParameter_", 
			"fileSizeLiteral_", "setTransaction", "setAutoCommit", "scope_", "autoCommitValue", 
			"beginTransaction", "commit", "rollback", "savepoint", "grant", "revoke", 
			"proxyClause_", "privilegeClause", "roleClause_", "allClause_", "privileges_", 
			"privilegeType_", "onObjectClause", "objectType_", "privilegeLevel", 
			"createUser", "alterUser", "dropUser", "createRole", "dropRole", "renameUser", 
			"setDefaultRole", "setRole", "setPassword", "authOption_", "withGrantOption_", 
			"userOrRoles_", "roles_", "grantOption_", "userAuthOption_", "identifiedBy_", 
			"identifiedWith_", "lockOption_", "passwordOption_", "resourceOption_", 
			"tlsOption_", "userFuncAuthOption_", "use", "desc", "showDatabases", 
			"showTables", "showTableStatus", "showColumns", "showIndex", "showCreateTable", 
			"showOther", "fromSchema", "fromTable", "showLike", "showColumnLike_", 
			"showWhereClause_", "showFilter", "showProfileType", "setVariable", "showBinaryLogs", 
			"showBinlogEvents", "showCharacterSet", "showCollation", "showCreateDatabase", 
			"showCreateEvent", "showCreateFunction", "showCreateProcedure", "showCreateTrigger", 
			"showCreateUser", "showCreateView", "showEngine", "showEngines", "showErrors", 
			"showEvents", "showFunctionCode", "showFunctionStatus", "showGrant", 
			"showMasterStatus", "showOpenTables", "showPlugins", "showPrivileges", 
			"showProcedureCode", "showProcedureStatus", "showProcesslist", "showProfile", 
			"showProfiles", "showRelaylogEvent", "showSlavehost", "showSlaveStatus", 
			"showStatus", "showTrriggers", "showVariables", "showWarnings", "setCharacter", 
			"setName", "clone", "cloneAction_", "createUdf", "installComponent", 
			"installPlugin", "uninstallComponent", "uninstallPlugin", "analyzeTable", 
			"checkTable", "checkTableOption_", "checksumTable", "optimizeTable", 
			"repairTable", "alterResourceGroup", "vcpuSpec_", "createResourceGroup", 
			"dropResourceGroup", "setResourceGroup", "binlog", "cacheIndex", "tableIndexList", 
			"partitionList", "flush", "flushOption_", "tablesOption_", "kill", "loadIndexInfo", 
			"resetStatement", "resetOption_", "resetPersist", "restart", "shutdown", 
			"changeMasterTo", "startSlave", "stopSlave", "threadTypes_", "threadType_", 
			"utilOption_", "connectionOptions_", "channelOption_"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'&&'", "'||'", "'!'", "'~'", "'|'", "'&'", "'<<'", "'>>'", "'^'", 
			"'%'", "':'", "'+'", "'-'", "'*'", "'/'", "'\\'", "'.'", "'.*'", "'<=>'", 
			"'=='", "'='", null, "'>'", "'>='", "'<'", "'<='", "'#'", "'('", "')'", 
			"'{'", "'}'", "'['", "']'", "','", "'\"'", "'''", "'`'", "'?'", "'@'", 
			"';'", null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, "'DO NOT MATCH ANY THING, JUST FOR GENERATOR'", 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, "'INNODB'", "'TLS'", 
			null, "'not support'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "AND_", "OR_", "NOT_", "TILDE_", "VERTICAL_BAR_", "AMPERSAND_", 
			"SIGNED_LEFT_SHIFT_", "SIGNED_RIGHT_SHIFT_", "CARET_", "MOD_", "COLON_", 
			"PLUS_", "MINUS_", "ASTERISK_", "SLASH_", "BACKSLASH_", "DOT_", "DOT_ASTERISK_", 
			"SAFE_EQ_", "DEQ_", "EQ_", "NEQ_", "GT_", "GTE_", "LT_", "LTE_", "POUND_", 
			"LP_", "RP_", "LBE_", "RBE_", "LBT_", "RBT_", "COMMA_", "DQ_", "SQ_", 
			"BQ_", "QUESTION_", "AT_", "SEMI_", "BLOCK_COMMENT", "INLINE_COMMENT", 
			"WS", "SELECT", "INSERT", "UPDATE", "DELETE", "CREATE", "ALTER", "DROP", 
			"TRUNCATE", "SCHEMA", "GRANT", "REVOKE", "ADD", "SET", "TABLE", "COLUMN", 
			"INDEX", "CONSTRAINT", "PRIMARY", "UNIQUE", "FOREIGN", "KEY", "POSITION", 
			"PRECISION", "FUNCTION", "TRIGGER", "PROCEDURE", "VIEW", "INTO", "VALUES", 
			"WITH", "UNION", "DISTINCT", "CASE", "WHEN", "CAST", "TRIM", "SUBSTRING", 
			"FROM", "NATURAL", "JOIN", "FULL", "INNER", "OUTER", "LEFT", "RIGHT", 
			"CROSS", "USING", "WHERE", "AS", "ON", "IF", "ELSE", "THEN", "FOR", "TO", 
			"AND", "OR", "IS", "NOT", "NULL", "TRUE", "FALSE", "EXISTS", "BETWEEN", 
			"IN", "ALL", "ANY", "LIKE", "ORDER", "GROUP", "BY", "ASC", "DESC", "HAVING", 
			"LIMIT", "OFFSET", "BEGIN", "COMMIT", "ROLLBACK", "SAVEPOINT", "BOOLEAN", 
			"DOUBLE", "CHAR", "CHARACTER", "ARRAY", "INTERVAL", "DATE", "TIME", "TIMESTAMP", 
			"LOCALTIME", "LOCALTIMESTAMP", "YEAR", "QUARTER", "MONTH", "WEEK", "DAY", 
			"HOUR", "MINUTE", "SECOND", "MICROSECOND", "MAX", "MIN", "SUM", "COUNT", 
			"AVG", "DEFAULT", "CURRENT", "ENABLE", "DISABLE", "CALL", "INSTANCE", 
			"PRESERVE", "DO", "DEFINER", "CURRENT_USER", "SQL", "CASCADED", "LOCAL", 
			"CLOSE", "OPEN", "NEXT", "NAME", "COLLATION", "NAMES", "INTEGER", "REAL", 
			"DECIMAL", "TYPE", "INT", "SMALLINT", "TINYINT", "MEDIUMINT", "BIGINT", 
			"NUMERIC", "FLOAT", "DATETIME", "FOR_GENERATOR", "USE", "DESCRIBE", "SHOW", 
			"DATABASES", "DATABASE", "SCHEMAS", "TABLES", "TABLESPACE", "COLUMNS", 
			"FIELDS", "INDEXES", "STATUS", "REPLACE", "MODIFY", "DISTINCTROW", "VALUE", 
			"DUPLICATE", "FIRST", "LAST", "AFTER", "OJ", "WINDOW", "MOD", "DIV", 
			"XOR", "REGEXP", "RLIKE", "ACCOUNT", "USER", "ROLE", "START", "TRANSACTION", 
			"ROW", "ROWS", "WITHOUT", "BINARY", "ESCAPE", "GENERATED", "PARTITION", 
			"SUBPARTITION", "STORAGE", "STORED", "SUPER", "SUBSTR", "TEMPORARY", 
			"THAN", "TRAILING", "UNBOUNDED", "UNLOCK", "UNSIGNED", "SIGNED", "UPGRADE", 
			"USAGE", "VALIDATION", "VIRTUAL", "ROLLUP", "SOUNDS", "UNKNOWN", "OFF", 
			"ALWAYS", "CASCADE", "CHECK", "COMMITTED", "LEVEL", "NO", "OPTION", "PASSWORD", 
			"PRIVILEGES", "READ", "WRITE", "REFERENCES", "ACTION", "ALGORITHM", "ANALYZE", 
			"AUTOCOMMIT", "MAXVALUE", "BOTH", "BTREE", "CHAIN", "CHANGE", "CHARSET", 
			"CHECKSUM", "CIPHER", "CLIENT", "COALESCE", "COLLATE", "COMMENT", "COMPACT", 
			"COMPRESSED", "COMPRESSION", "CONNECTION", "CONSISTENT", "CONVERT", "COPY", 
			"DATA", "DELAYED", "DIRECTORY", "DISCARD", "DISK", "DYNAMIC", "ENCRYPTION", 
			"END", "ENGINE", "EVENT", "EXCEPT", "EXCHANGE", "EXCLUSIVE", "EXECUTE", 
			"EXTRACT", "FILE", "FIXED", "FOLLOWING", "FORCE", "FULLTEXT", "GLOBAL", 
			"HASH", "IDENTIFIED", "IGNORE", "IMPORT_", "INPLACE", "KEYS", "LEADING", 
			"LESS", "LINEAR", "LOCK", "MATCH", "MEMORY", "NONE", "NOW", "OFFLINE", 
			"ONLINE", "OPTIMIZE", "OVER", "PARSER", "PARTIAL", "PARTITIONING", "PERSIST", 
			"PRECEDING", "PROCESS", "PROXY", "QUICK", "RANGE", "REBUILD", "RECURSIVE", 
			"REDUNDANT", "RELEASE", "RELOAD", "REMOVE", "RENAME", "REORGANIZE", "REPAIR", 
			"REPLICATION", "REQUIRE", "RESTRICT", "REVERSE", "ROUTINE", "SEPARATOR", 
			"SESSION", "SHARED", "SHUTDOWN", "SIMPLE", "SLAVE", "SPATIAL", "ZEROFILL", 
			"VISIBLE", "INVISIBLE", "INSTANT", "ENFORCED", "AGAINST", "LANGUAGE", 
			"MODE", "QUERY", "EXTENDED", "EXPANSION", "VARIANCE", "MAX_ROWS", "MIN_ROWS", 
			"HIGH_PRIORITY", "LOW_PRIORITY", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", 
			"SQL_CACHE", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE", "SQL_SMALL_RESULT", 
			"STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "ROLE_ADMIN", 
			"ROW_FORMAT", "SET_USER_ID", "REPLICATION_SLAVE_ADMIN", "GROUP_REPLICATION_ADMIN", 
			"STRAIGHT_JOIN", "WEIGHT_STRING", "COLUMN_FORMAT", "CONNECTION_ADMIN", 
			"FIREWALL_ADMIN", "FIREWALL_USER", "INSERT_METHOD", "KEY_BLOCK_SIZE", 
			"PACK_KEYS", "PERSIST_ONLY", "BIT_AND", "BIT_OR", "BIT_XOR", "GROUP_CONCAT", 
			"JSON_ARRAYAGG", "JSON_OBJECTAGG", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
			"VAR_POP", "VAR_SAMP", "AUDIT_ADMIN", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
			"BINLOG_ADMIN", "DELAY_KEY_WRITE", "ENCRYPTION_KEY_ADMIN", "SYSTEM_VARIABLES_ADMIN", 
			"VERSION_TOKEN_ADMIN", "CURRENT_TIMESTAMP", "YEAR_MONTH", "DAY_HOUR", 
			"DAY_MINUTE", "DAY_SECOND", "DAY_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", 
			"HOUR_MICROSECOND", "MINUTE_SECOND", "MINUTE_MICROSECOND", "SECOND_MICROSECOND", 
			"UL_BINARY", "ROTATE", "MASTER", "BINLOG", "ERROR", "SCHEDULE", "COMPLETION", 
			"EVERY", "STARTS", "ENDS", "HOST", "SOCKET", "PORT", "SERVER", "WRAPPER", 
			"OPTIONS", "OWNER", "DETERMINISTIC", "RETURNS", "CONTAINS", "READS", 
			"MODIFIES", "SECURITY", "INVOKER", "OUT", "INOUT", "TEMPTABLE", "MERGE", 
			"UNDEFINED", "DATAFILE", "FILE_BLOCK_SIZE", "EXTENT_SIZE", "INITIAL_SIZE", 
			"AUTOEXTEND_SIZE", "MAX_SIZE", "NODEGROUP", "WAIT", "LOGFILE", "UNDOFILE", 
			"UNDO_BUFFER_SIZE", "REDO_BUFFER_SIZE", "HANDLER", "PREV", "ORGANIZATION", 
			"DEFINITION", "DESCRIPTION", "REFERENCE", "FOLLOWS", "PRECEDES", "IMPORT", 
			"LOAD", "CONCURRENT", "INFILE", "LINES", "STARTING", "TERMINATED", "OPTIONALLY", 
			"ENCLOSED", "ESCAPED", "XML", "UNDO", "DUMPFILE", "OUTFILE", "SHARE", 
			"LOGS", "EVENTS", "BEFORE", "EACH", "MUTEX", "ENGINES", "ERRORS", "CODE", 
			"GRANTS", "PLUGINS", "PROCESSLIST", "BLOCK", "IO", "CONTEXT", "SWITCHES", 
			"CPU", "IPC", "PAGE", "FAULTS", "SOURCE", "SWAPS", "PROFILE", "PROFILES", 
			"RELAYLOG", "CHANNEL", "VARIABLES", "WARNINGS", "SSL", "CLONE", "AGGREGATE", 
			"STRING", "SONAME", "INSTALL", "COMPONENT", "PLUGIN", "UNINSTALL", "NO_WRITE_TO_BINLOG", 
			"HISTOGRAM", "BUCKETS", "FAST", "MEDIUM", "USE_FRM", "RESOURCE", "VCPU", 
			"THREAD_PRIORITY", "SYSTEM", "EXPIRE", "NEVER", "HISTORY", "OPTIONAL", 
			"REUSE", "MAX_QUERIES_PER_HOUR", "MAX_UPDATES_PER_HOUR", "MAX_CONNECTIONS_PER_HOUR", 
			"MAX_USER_CONNECTIONS", "RETAIN", "RANDOM", "OLD", "X509", "ISSUER", 
			"SUBJECT", "CACHE", "GENERAL", "OPTIMIZER_COSTS", "SLOW", "USER_RESOURCES", 
			"EXPORT", "RELAY", "HOSTS", "KILL", "FLUSH", "RESET", "RESTART", "UNIX_TIMESTAMP", 
			"LOWER", "UPPER", "ADDDATE", "ADDTIME", "DATE_ADD", "DATE_SUB", "DATEDIFF", 
			"DATE_FORMAT", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "STR_TO_DATE", 
			"TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
			"AES_DECRYPT", "AES_ENCRYPT", "FROM_BASE64", "TO_BASE64", "GEOMCOLLECTION", 
			"GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ST_AREA", "ST_ASBINARY", "ST_ASGEOJSON", 
			"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_BUFFER_STRATEGY", 
			"ST_CENTROID", "ST_CONTAINS", "ST_CONVEXHULL", "ST_CROSSES", "ST_DIFFERENCE", 
			"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_DISTANCE_SPHERE", "ST_ENDPOINT", 
			"ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOHASH", "ST_GEOMCOLLFROMTEXT", 
			"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
			"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
			"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMGEOJSON", "ST_GEOMFROMTEXT", 
			"ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", 
			"ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_ISVALID", "ST_LATFROMGEOHASH", 
			"ST_LATITUDE", "ST_LENGTH", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
			"ST_LINESTRINGFROMWKB", "ST_LONGFROMGEOHASH", "ST_LONGITUDE", "ST_MAKEENVELOPE", 
			"ST_MLINEFROMTEXT", "ST_MLINEFROMWKB", "ST_MULTILINESTRINGFROMTEXT", 
			"ST_MULTILINESTRINGFROMWKB", "ST_MPOINTFROMTEXT", "ST_MPOINTFROMWKB", 
			"ST_MULTIPOINTFROMTEXT", "ST_MULTIPOINTFROMWKB", "ST_MPOLYFROMTEXT", 
			"ST_MPOLYFROMWKB", "ST_MULTIPOLYGONFROMTEXT", "ST_MULTIPOLYGONFROMWKB", 
			"ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", 
			"ST_OVERLAPS", "ST_POINTFROMGEOHASH", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
			"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
			"ST_POLYGONFROMWKB", "ST_SIMPLIFY", "ST_SRID", "ST_STARTPOINT", "ST_SWAPXY", 
			"ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_TRANSFORM", "ST_UNION", "ST_VALIDATE", 
			"ST_WITHIN", "ST_X", "ST_Y", "BIT", "BOOL", "DEC", "VARCHAR", "VARBINARY", 
			"TINYBLOB", "TINYTEXT", "BLOB", "TEXT", "MEDIUMBLOB", "MEDIUMTEXT", "LONGBLOB", 
			"LONGTEXT", "ENUM", "GEOMETRY", "JSON", "IO_THREAD", "SQL_THREAD", "SQL_BEFORE_GTIDS", 
			"SQL_AFTER_GTIDS", "MASTER_LOG_FILE", "MASTER_LOG_POS", "RELAY_LOG_FILE", 
			"RELAY_LOG_POS", "SQL_AFTER_MTS_GAPS", "UNTIL", "DEFAULT_AUTH", "PLUGIN_DIR", 
			"STOP", "IDENTIFIER_", "STRING_", "NUMBER_", "HEX_DIGIT_", "BIT_NUM_", 
			"INNODB_", "TLS_", "Y_N_", "NOT_SUPPORT_", "FILESIZE_LITERAL"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySQLStatement.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySQLStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class ExecuteContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public ReplaceContext replace() {
			return getRuleContext(ReplaceContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public RenameTableSpecificationContext renameTableSpecification() {
			return getRuleContext(RenameTableSpecificationContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public SetTransactionContext setTransaction() {
			return getRuleContext(SetTransactionContext.class,0);
		}
		public BeginTransactionContext beginTransaction() {
			return getRuleContext(BeginTransactionContext.class,0);
		}
		public SetAutoCommitContext setAutoCommit() {
			return getRuleContext(SetAutoCommitContext.class,0);
		}
		public CommitContext commit() {
			return getRuleContext(CommitContext.class,0);
		}
		public RollbackContext rollback() {
			return getRuleContext(RollbackContext.class,0);
		}
		public SavepointContext savepoint() {
			return getRuleContext(SavepointContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public RevokeContext revoke() {
			return getRuleContext(RevokeContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public SetDefaultRoleContext setDefaultRole() {
			return getRuleContext(SetDefaultRoleContext.class,0);
		}
		public SetRoleContext setRole() {
			return getRuleContext(SetRoleContext.class,0);
		}
		public SetPasswordContext setPassword() {
			return getRuleContext(SetPasswordContext.class,0);
		}
		public UseContext use() {
			return getRuleContext(UseContext.class,0);
		}
		public DescContext desc() {
			return getRuleContext(DescContext.class,0);
		}
		public ShowDatabasesContext showDatabases() {
			return getRuleContext(ShowDatabasesContext.class,0);
		}
		public ShowTablesContext showTables() {
			return getRuleContext(ShowTablesContext.class,0);
		}
		public ShowTableStatusContext showTableStatus() {
			return getRuleContext(ShowTableStatusContext.class,0);
		}
		public ShowColumnsContext showColumns() {
			return getRuleContext(ShowColumnsContext.class,0);
		}
		public ShowIndexContext showIndex() {
			return getRuleContext(ShowIndexContext.class,0);
		}
		public ShowCreateTableContext showCreateTable() {
			return getRuleContext(ShowCreateTableContext.class,0);
		}
		public ShowOtherContext showOther() {
			return getRuleContext(ShowOtherContext.class,0);
		}
		public SetVariableContext setVariable() {
			return getRuleContext(SetVariableContext.class,0);
		}
		public CallContext call() {
			return getRuleContext(CallContext.class,0);
		}
		public ChangeMasterToContext changeMasterTo() {
			return getRuleContext(ChangeMasterToContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public TerminalNode SEMI_() { return getToken(MySQLStatementParser.SEMI_, 0); }
		public ExecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitExecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteContext execute() throws RecognitionException {
		ExecuteContext _localctx = new ExecuteContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_execute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				setState(776);
				select();
				}
				break;
			case 2:
				{
				setState(777);
				insert();
				}
				break;
			case 3:
				{
				setState(778);
				update();
				}
				break;
			case 4:
				{
				setState(779);
				delete();
				}
				break;
			case 5:
				{
				setState(780);
				replace();
				}
				break;
			case 6:
				{
				setState(781);
				createTable();
				}
				break;
			case 7:
				{
				setState(782);
				alterTable();
				}
				break;
			case 8:
				{
				setState(783);
				repairTable();
				}
				break;
			case 9:
				{
				setState(784);
				renameTableSpecification();
				}
				break;
			case 10:
				{
				setState(785);
				dropTable();
				}
				break;
			case 11:
				{
				setState(786);
				dropDatabase();
				}
				break;
			case 12:
				{
				setState(787);
				truncateTable();
				}
				break;
			case 13:
				{
				setState(788);
				createIndex();
				}
				break;
			case 14:
				{
				setState(789);
				dropIndex();
				}
				break;
			case 15:
				{
				setState(790);
				setTransaction();
				}
				break;
			case 16:
				{
				setState(791);
				beginTransaction();
				}
				break;
			case 17:
				{
				setState(792);
				setAutoCommit();
				}
				break;
			case 18:
				{
				setState(793);
				commit();
				}
				break;
			case 19:
				{
				setState(794);
				rollback();
				}
				break;
			case 20:
				{
				setState(795);
				savepoint();
				}
				break;
			case 21:
				{
				setState(796);
				grant();
				}
				break;
			case 22:
				{
				setState(797);
				revoke();
				}
				break;
			case 23:
				{
				setState(798);
				createUser();
				}
				break;
			case 24:
				{
				setState(799);
				dropUser();
				}
				break;
			case 25:
				{
				setState(800);
				alterUser();
				}
				break;
			case 26:
				{
				setState(801);
				renameUser();
				}
				break;
			case 27:
				{
				setState(802);
				createRole();
				}
				break;
			case 28:
				{
				setState(803);
				dropRole();
				}
				break;
			case 29:
				{
				setState(804);
				setDefaultRole();
				}
				break;
			case 30:
				{
				setState(805);
				setRole();
				}
				break;
			case 31:
				{
				setState(806);
				setPassword();
				}
				break;
			case 32:
				{
				setState(807);
				use();
				}
				break;
			case 33:
				{
				setState(808);
				desc();
				}
				break;
			case 34:
				{
				setState(809);
				showDatabases();
				}
				break;
			case 35:
				{
				setState(810);
				showTables();
				}
				break;
			case 36:
				{
				setState(811);
				showTableStatus();
				}
				break;
			case 37:
				{
				setState(812);
				showColumns();
				}
				break;
			case 38:
				{
				setState(813);
				showIndex();
				}
				break;
			case 39:
				{
				setState(814);
				showCreateTable();
				}
				break;
			case 40:
				{
				setState(815);
				showOther();
				}
				break;
			case 41:
				{
				setState(816);
				setVariable();
				}
				break;
			case 42:
				{
				setState(817);
				call();
				}
				break;
			case 43:
				{
				setState(818);
				changeMasterTo();
				}
				break;
			case 44:
				{
				setState(819);
				startSlave();
				}
				break;
			case 45:
				{
				setState(820);
				stopSlave();
				}
				break;
			}
			setState(824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI_) {
				{
				setState(823);
				match(SEMI_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(MySQLStatementParser.INSERT, 0); }
		public InsertSpecification_Context insertSpecification_() {
			return getRuleContext(InsertSpecification_Context.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertValuesClauseContext insertValuesClause() {
			return getRuleContext(InsertValuesClauseContext.class,0);
		}
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public InsertSelectClauseContext insertSelectClause() {
			return getRuleContext(InsertSelectClauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySQLStatementParser.INTO, 0); }
		public PartitionNames_Context partitionNames_() {
			return getRuleContext(PartitionNames_Context.class,0);
		}
		public OnDuplicateKeyClauseContext onDuplicateKeyClause() {
			return getRuleContext(OnDuplicateKeyClauseContext.class,0);
		}
		public InsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertContext insert() throws RecognitionException {
		InsertContext _localctx = new InsertContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(826);
			match(INSERT);
			setState(827);
			insertSpecification_();
			setState(829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(828);
				match(INTO);
				}
			}

			setState(831);
			tableName();
			setState(833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(832);
				partitionNames_();
				}
			}

			setState(838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(835);
				insertValuesClause();
				}
				break;
			case 2:
				{
				setState(836);
				setAssignmentsClause();
				}
				break;
			case 3:
				{
				setState(837);
				insertSelectClause();
				}
				break;
			}
			setState(841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(840);
				onDuplicateKeyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertSpecification_Context extends ParserRuleContext {
		public TerminalNode IGNORE() { return getToken(MySQLStatementParser.IGNORE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySQLStatementParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySQLStatementParser.HIGH_PRIORITY, 0); }
		public InsertSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertSpecification_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitInsertSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertSpecification_Context insertSpecification_() throws RecognitionException {
		InsertSpecification_Context _localctx = new InsertSpecification_Context(_ctx, getState());
		enterRule(_localctx, 4, RULE_insertSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==HIGH_PRIORITY || _la==LOW_PRIORITY) {
				{
				setState(843);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==HIGH_PRIORITY || _la==LOW_PRIORITY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(847);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(846);
				match(IGNORE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertValuesClauseContext extends ParserRuleContext {
		public List<AssignmentValuesContext> assignmentValues() {
			return getRuleContexts(AssignmentValuesContext.class);
		}
		public AssignmentValuesContext assignmentValues(int i) {
			return getRuleContext(AssignmentValuesContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(MySQLStatementParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySQLStatementParser.VALUE, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public InsertValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValuesClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitInsertValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertValuesClauseContext insertValuesClause() throws RecognitionException {
		InsertValuesClauseContext _localctx = new InsertValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_insertValuesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(850);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				setState(849);
				columnNames();
				}
				break;
			}
			setState(852);
			_la = _input.LA(1);
			if ( !(_la==VALUES || _la==VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(853);
			assignmentValues();
			setState(858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(854);
				match(COMMA_);
				setState(855);
				assignmentValues();
				}
				}
				setState(860);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertSelectClauseContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public InsertSelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertSelectClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitInsertSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertSelectClauseContext insertSelectClause() throws RecognitionException {
		InsertSelectClauseContext _localctx = new InsertSelectClauseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_insertSelectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (LP_ - 28)) | (1L << (TRUNCATE - 28)) | (1L << (POSITION - 28)) | (1L << (VIEW - 28)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (ANY - 110)) | (1L << (OFFSET - 110)) | (1L << (BEGIN - 110)) | (1L << (COMMIT - 110)) | (1L << (ROLLBACK - 110)) | (1L << (SAVEPOINT - 110)) | (1L << (BOOLEAN - 110)) | (1L << (DATE - 110)) | (1L << (TIME - 110)) | (1L << (TIMESTAMP - 110)) | (1L << (YEAR - 110)) | (1L << (QUARTER - 110)) | (1L << (MONTH - 110)) | (1L << (WEEK - 110)) | (1L << (DAY - 110)) | (1L << (HOUR - 110)) | (1L << (MINUTE - 110)) | (1L << (SECOND - 110)) | (1L << (MICROSECOND - 110)) | (1L << (MAX - 110)) | (1L << (MIN - 110)) | (1L << (SUM - 110)) | (1L << (COUNT - 110)) | (1L << (AVG - 110)) | (1L << (CURRENT - 110)) | (1L << (ENABLE - 110)) | (1L << (DISABLE - 110)) | (1L << (INSTANCE - 110)) | (1L << (DO - 110)) | (1L << (DEFINER - 110)) | (1L << (CASCADED - 110)) | (1L << (LOCAL - 110)) | (1L << (CLOSE - 110)) | (1L << (OPEN - 110)) | (1L << (NEXT - 110)) | (1L << (NAME - 110)) | (1L << (TYPE - 110)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
				{
				setState(861);
				columnNames();
				}
			}

			setState(864);
			select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnDuplicateKeyClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySQLStatementParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySQLStatementParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySQLStatementParser.UPDATE, 0); }
		public List<AssignmentContext> assignment() {
			return getRuleContexts(AssignmentContext.class);
		}
		public AssignmentContext assignment(int i) {
			return getRuleContext(AssignmentContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public OnDuplicateKeyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onDuplicateKeyClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitOnDuplicateKeyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnDuplicateKeyClauseContext onDuplicateKeyClause() throws RecognitionException {
		OnDuplicateKeyClauseContext _localctx = new OnDuplicateKeyClauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_onDuplicateKeyClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(866);
			match(ON);
			setState(867);
			match(DUPLICATE);
			setState(868);
			match(KEY);
			setState(869);
			match(UPDATE);
			setState(870);
			assignment();
			setState(875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(871);
				match(COMMA_);
				setState(872);
				assignment();
				}
				}
				setState(877);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(MySQLStatementParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertValuesClauseContext insertValuesClause() {
			return getRuleContext(InsertValuesClauseContext.class,0);
		}
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public InsertSelectClauseContext insertSelectClause() {
			return getRuleContext(InsertSelectClauseContext.class,0);
		}
		public ReplaceSpecification_Context replaceSpecification_() {
			return getRuleContext(ReplaceSpecification_Context.class,0);
		}
		public TerminalNode INTO() { return getToken(MySQLStatementParser.INTO, 0); }
		public PartitionNames_Context partitionNames_() {
			return getRuleContext(PartitionNames_Context.class,0);
		}
		public ReplaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitReplace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceContext replace() throws RecognitionException {
		ReplaceContext _localctx = new ReplaceContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_replace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(878);
			match(REPLACE);
			setState(880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(879);
				replaceSpecification_();
				}
			}

			setState(883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(882);
				match(INTO);
				}
			}

			setState(885);
			tableName();
			setState(887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(886);
				partitionNames_();
				}
			}

			setState(892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				setState(889);
				insertValuesClause();
				}
				break;
			case 2:
				{
				setState(890);
				setAssignmentsClause();
				}
				break;
			case 3:
				{
				setState(891);
				insertSelectClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceSpecification_Context extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY() { return getToken(MySQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySQLStatementParser.DELAYED, 0); }
		public ReplaceSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceSpecification_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitReplaceSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceSpecification_Context replaceSpecification_() throws RecognitionException {
		ReplaceSpecification_Context _localctx = new ReplaceSpecification_Context(_ctx, getState());
		enterRule(_localctx, 14, RULE_replaceSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(894);
			_la = _input.LA(1);
			if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(MySQLStatementParser.UPDATE, 0); }
		public UpdateSpecification_Context updateSpecification_() {
			return getRuleContext(UpdateSpecification_Context.class,0);
		}
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateContext update() throws RecognitionException {
		UpdateContext _localctx = new UpdateContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_update);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(896);
			match(UPDATE);
			setState(897);
			updateSpecification_();
			setState(898);
			tableReferences();
			setState(899);
			setAssignmentsClause();
			setState(901);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(900);
				whereClause();
				}
			}

			setState(904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(903);
				orderByClause();
				}
			}

			setState(907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(906);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateSpecification_Context extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY() { return getToken(MySQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode IGNORE() { return getToken(MySQLStatementParser.IGNORE, 0); }
		public UpdateSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateSpecification_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUpdateSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateSpecification_Context updateSpecification_() throws RecognitionException {
		UpdateSpecification_Context _localctx = new UpdateSpecification_Context(_ctx, getState());
		enterRule(_localctx, 18, RULE_updateSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(909);
				match(LOW_PRIORITY);
				}
			}

			setState(913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(912);
				match(IGNORE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public AssignmentValueContext assignmentValue() {
			return getRuleContext(AssignmentValueContext.class,0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentContext assignment() throws RecognitionException {
		AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(915);
			columnName();
			setState(916);
			match(EQ_);
			setState(917);
			assignmentValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAssignmentsClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public List<AssignmentContext> assignment() {
			return getRuleContexts(AssignmentContext.class);
		}
		public AssignmentContext assignment(int i) {
			return getRuleContext(AssignmentContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public SetAssignmentsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAssignmentsClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSetAssignmentsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAssignmentsClauseContext setAssignmentsClause() throws RecognitionException {
		SetAssignmentsClauseContext _localctx = new SetAssignmentsClauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_setAssignmentsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(919);
			match(SET);
			setState(920);
			assignment();
			setState(925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(921);
				match(COMMA_);
				setState(922);
				assignment();
				}
				}
				setState(927);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentValuesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<AssignmentValueContext> assignmentValue() {
			return getRuleContexts(AssignmentValueContext.class);
		}
		public AssignmentValueContext assignmentValue(int i) {
			return getRuleContext(AssignmentValueContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public AssignmentValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentValues; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAssignmentValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentValuesContext assignmentValues() throws RecognitionException {
		AssignmentValuesContext _localctx = new AssignmentValuesContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_assignmentValues);
		int _la;
		try {
			setState(941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(928);
				match(LP_);
				setState(929);
				assignmentValue();
				setState(934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(930);
					match(COMMA_);
					setState(931);
					assignmentValue();
					}
					}
					setState(936);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(937);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(939);
				match(LP_);
				setState(940);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentValueContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public BlobValueContext blobValue() {
			return getRuleContext(BlobValueContext.class,0);
		}
		public AssignmentValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAssignmentValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentValueContext assignmentValue() throws RecognitionException {
		AssignmentValueContext _localctx = new AssignmentValueContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_assignmentValue);
		try {
			setState(946);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case VALUES:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case LEFT:
			case RIGHT:
			case IF:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case CHAR:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case DATABASE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case REPLACE:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case MOD:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case ROW:
			case WITHOUT:
			case BINARY:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case SUBSTR:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case CONVERT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case EXTRACT:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MATCH:
			case MEMORY:
			case NONE:
			case NOW:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case CURRENT_TIMESTAMP:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case UNIX_TIMESTAMP:
			case LOWER:
			case UPPER:
			case ADDDATE:
			case ADDTIME:
			case DATE_ADD:
			case DATE_SUB:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case STR_TO_DATE:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case FROM_BASE64:
			case TO_BASE64:
			case GEOMCOLLECTION:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASGEOJSON:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_BUFFER_STRATEGY:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CONVEXHULL:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_DISTANCE_SPHERE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOHASH:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMGEOJSON:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_ISVALID:
			case ST_LATFROMGEOHASH:
			case ST_LATITUDE:
			case ST_LENGTH:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_LONGFROMGEOHASH:
			case ST_LONGITUDE:
			case ST_MAKEENVELOPE:
			case ST_MLINEFROMTEXT:
			case ST_MLINEFROMWKB:
			case ST_MULTILINESTRINGFROMTEXT:
			case ST_MULTILINESTRINGFROMWKB:
			case ST_MPOINTFROMTEXT:
			case ST_MPOINTFROMWKB:
			case ST_MULTIPOINTFROMTEXT:
			case ST_MULTIPOINTFROMWKB:
			case ST_MPOLYFROMTEXT:
			case ST_MPOLYFROMWKB:
			case ST_MULTIPOLYGONFROMTEXT:
			case ST_MULTIPOLYGONFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMGEOHASH:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SIMPLIFY:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SWAPXY:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_TRANSFORM:
			case ST_UNION:
			case ST_VALIDATE:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				enterOuterAlt(_localctx, 1);
				{
				setState(943);
				expr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(944);
				match(DEFAULT);
				}
				break;
			case UL_BINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(945);
				blobValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlobValueContext extends ParserRuleContext {
		public TerminalNode UL_BINARY() { return getToken(MySQLStatementParser.UL_BINARY, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public BlobValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blobValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitBlobValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlobValueContext blobValue() throws RecognitionException {
		BlobValueContext _localctx = new BlobValueContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_blobValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(948);
			match(UL_BINARY);
			setState(949);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(MySQLStatementParser.DELETE, 0); }
		public DeleteSpecification_Context deleteSpecification_() {
			return getRuleContext(DeleteSpecification_Context.class,0);
		}
		public SingleTableClauseContext singleTableClause() {
			return getRuleContext(SingleTableClauseContext.class,0);
		}
		public MultipleTablesClauseContext multipleTablesClause() {
			return getRuleContext(MultipleTablesClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteContext delete() throws RecognitionException {
		DeleteContext _localctx = new DeleteContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_delete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(951);
			match(DELETE);
			setState(952);
			deleteSpecification_();
			setState(955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(953);
				singleTableClause();
				}
				break;
			case 2:
				{
				setState(954);
				multipleTablesClause();
				}
				break;
			}
			setState(958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(957);
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteSpecification_Context extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY() { return getToken(MySQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode QUICK() { return getToken(MySQLStatementParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySQLStatementParser.IGNORE, 0); }
		public DeleteSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteSpecification_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDeleteSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteSpecification_Context deleteSpecification_() throws RecognitionException {
		DeleteSpecification_Context _localctx = new DeleteSpecification_Context(_ctx, getState());
		enterRule(_localctx, 32, RULE_deleteSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(960);
				match(LOW_PRIORITY);
				}
			}

			setState(964);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(963);
				match(QUICK);
				}
				break;
			}
			setState(967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(966);
				match(IGNORE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public PartitionNames_Context partitionNames_() {
			return getRuleContext(PartitionNames_Context.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public SingleTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSingleTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableClauseContext singleTableClause() throws RecognitionException {
		SingleTableClauseContext _localctx = new SingleTableClauseContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_singleTableClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(969);
			match(FROM);
			setState(970);
			tableName();
			setState(975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (AS - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)) | (1L << (STRING_ - 688)))) != 0)) {
				{
				setState(972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(971);
					match(AS);
					}
				}

				setState(974);
				alias();
				}
			}

			setState(978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(977);
				partitionNames_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleTablesClauseContext extends ParserRuleContext {
		public MultipleTableNamesContext multipleTableNames() {
			return getRuleContext(MultipleTableNamesContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySQLStatementParser.USING, 0); }
		public MultipleTablesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleTablesClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitMultipleTablesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleTablesClauseContext multipleTablesClause() throws RecognitionException {
		MultipleTablesClauseContext _localctx = new MultipleTablesClauseContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_multipleTablesClause);
		try {
			setState(989);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case WITHOUT:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MEMORY:
			case NONE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(980);
				multipleTableNames();
				setState(981);
				match(FROM);
				setState(982);
				tableReferences();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(984);
				match(FROM);
				setState(985);
				multipleTableNames();
				setState(986);
				match(USING);
				setState(987);
				tableReferences();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleTableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> DOT_ASTERISK_() { return getTokens(MySQLStatementParser.DOT_ASTERISK_); }
		public TerminalNode DOT_ASTERISK_(int i) {
			return getToken(MySQLStatementParser.DOT_ASTERISK_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public MultipleTableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleTableNames; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitMultipleTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleTableNamesContext multipleTableNames() throws RecognitionException {
		MultipleTableNamesContext _localctx = new MultipleTableNamesContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_multipleTableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(991);
			tableName();
			setState(993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_ASTERISK_) {
				{
				setState(992);
				match(DOT_ASTERISK_);
				}
			}

			setState(1002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(995);
				match(COMMA_);
				setState(996);
				tableName();
				setState(998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_ASTERISK_) {
					{
					setState(997);
					match(DOT_ASTERISK_);
					}
				}

				}
				}
				setState(1004);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectContext extends ParserRuleContext {
		public UnionClauseContext unionClause() {
			return getRuleContext(UnionClauseContext.class,0);
		}
		public WithClause_Context withClause_() {
			return getRuleContext(WithClause_Context.class,0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1005);
				withClause_();
				}
			}

			setState(1008);
			unionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(MySQLStatementParser.CALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public CallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallContext call() throws RecognitionException {
		CallContext _localctx = new CallContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1010);
			match(CALL);
			setState(1011);
			identifier();
			setState(1023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1012);
				match(LP_);
				setState(1013);
				expr(0);
				setState(1018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1014);
					match(COMMA_);
					setState(1015);
					expr(0);
					}
					}
					setState(1020);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1021);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(MySQLStatementParser.DO, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_doStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1025);
			match(DO);
			setState(1026);
			expr(0);
			setState(1029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(1027);
				match(COMMA_);
				setState(1028);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_handlerStatement);
		try {
			setState(1035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1031);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1032);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1033);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1034);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySQLStatementParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(MySQLStatementParser.OPEN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1037);
			match(HANDLER);
			setState(1038);
			tableName();
			setState(1039);
			match(OPEN);
			setState(1044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (AS - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
				{
				setState(1041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1040);
					match(AS);
					}
				}

				setState(1043);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySQLStatementParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySQLStatementParser.READ, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode FIRST() { return getToken(MySQLStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySQLStatementParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(MySQLStatementParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(MySQLStatementParser.LAST, 0); }
		public TerminalNode WHERE() { return getToken(MySQLStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySQLStatementParser.LIMIT, 0); }
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1046);
			match(HANDLER);
			setState(1047);
			tableName();
			setState(1048);
			match(READ);
			setState(1049);
			identifier();
			setState(1056);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
				{
				setState(1050);
				comparisonOperator();
				setState(1051);
				match(LP_);
				setState(1052);
				identifier();
				setState(1053);
				match(RP_);
				}
				break;
			case NEXT:
			case FIRST:
			case LAST:
			case PREV:
				{
				setState(1055);
				_la = _input.LA(1);
				if ( !(((((_la - 164)) & ~0x3f) == 0 && ((1L << (_la - 164)) & ((1L << (NEXT - 164)) | (1L << (FIRST - 164)) | (1L << (LAST - 164)))) != 0) || _la==PREV) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1058);
				match(WHERE);
				setState(1059);
				expr(0);
				}
			}

			setState(1064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(1062);
				match(LIMIT);
				setState(1063);
				numberLiterals();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySQLStatementParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySQLStatementParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(MySQLStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySQLStatementParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(MySQLStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySQLStatementParser.LIMIT, 0); }
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1066);
			match(HANDLER);
			setState(1067);
			tableName();
			setState(1068);
			match(READ);
			setState(1069);
			_la = _input.LA(1);
			if ( !(_la==NEXT || _la==FIRST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1070);
				match(WHERE);
				setState(1071);
				expr(0);
				}
			}

			setState(1076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(1074);
				match(LIMIT);
				setState(1075);
				numberLiterals();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySQLStatementParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySQLStatementParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1078);
			match(HANDLER);
			setState(1079);
			tableName();
			setState(1080);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportStatementContext extends ParserRuleContext {
		public TerminalNode IMPORT() { return getToken(MySQLStatementParser.IMPORT, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitImportStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportStatementContext importStatement() throws RecognitionException {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_importStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1082);
			match(IMPORT);
			setState(1083);
			match(TABLE);
			setState(1084);
			match(FROM);
			setState(1085);
			match(STRING_);
			setState(1088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(1086);
				match(COMMA_);
				setState(1087);
				match(STRING_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(MySQLStatementParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(MySQLStatementParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(MySQLStatementParser.INFILE, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode INTO() { return getToken(MySQLStatementParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(MySQLStatementParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLStatementParser.PARTITION, 0); }
		public List<TerminalNode> LP_() { return getTokens(MySQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(MySQLStatementParser.LP_, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(MySQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(MySQLStatementParser.RP_, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public List<TerminalNode> LINES() { return getTokens(MySQLStatementParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(MySQLStatementParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySQLStatementParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySQLStatementParser.IGNORE, i);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySQLStatementParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySQLStatementParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(MySQLStatementParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySQLStatementParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(MySQLStatementParser.ROWS, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public List<SelectFieldsInto_Context> selectFieldsInto_() {
			return getRuleContexts(SelectFieldsInto_Context.class);
		}
		public SelectFieldsInto_Context selectFieldsInto_(int i) {
			return getRuleContext(SelectFieldsInto_Context.class,i);
		}
		public List<SelectLinesInto_Context> selectLinesInto_() {
			return getRuleContexts(SelectLinesInto_Context.class);
		}
		public SelectLinesInto_Context selectLinesInto_(int i) {
			return getRuleContext(SelectLinesInto_Context.class,i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1090);
			match(LOAD);
			setState(1091);
			match(DATA);
			setState(1093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(1092);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(1095);
				match(LOCAL);
				}
			}

			setState(1098);
			match(INFILE);
			setState(1099);
			match(STRING_);
			setState(1101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPLACE || _la==IGNORE) {
				{
				setState(1100);
				_la = _input.LA(1);
				if ( !(_la==REPLACE || _la==IGNORE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1103);
			match(INTO);
			setState(1104);
			match(TABLE);
			setState(1105);
			tableName();
			setState(1118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1106);
				match(PARTITION);
				setState(1107);
				match(LP_);
				setState(1108);
				identifier();
				setState(1113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1109);
					match(COMMA_);
					setState(1110);
					identifier();
					}
					}
					setState(1115);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1116);
				match(RP_);
				}
			}

			setState(1123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(1120);
				match(CHARACTER);
				setState(1121);
				match(SET);
				setState(1122);
				identifier();
				}
			}

			setState(1131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(1125);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1127); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1126);
					selectFieldsInto_();
					}
					}
					setState(1129); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (TERMINATED - 471)) | (1L << (OPTIONALLY - 471)) | (1L << (ENCLOSED - 471)) | (1L << (ESCAPED - 471)))) != 0) );
				}
			}

			setState(1139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(1133);
				match(LINES);
				setState(1135); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1134);
					selectLinesInto_();
					}
					}
					setState(1137); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(1145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1141);
				match(IGNORE);
				setState(1142);
				numberLiterals();
				setState(1143);
				_la = _input.LA(1);
				if ( !(_la==ROWS || _la==LINES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1147);
				match(LP_);
				setState(1148);
				identifier();
				setState(1153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1149);
					match(COMMA_);
					setState(1150);
					identifier();
					}
					}
					setState(1155);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1156);
				match(RP_);
				}
			}

			setState(1161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(1160);
				setAssignmentsClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(MySQLStatementParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(MySQLStatementParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(MySQLStatementParser.INFILE, 0); }
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public TerminalNode INTO() { return getToken(MySQLStatementParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(MySQLStatementParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> ROWS() { return getTokens(MySQLStatementParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MySQLStatementParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public TerminalNode LT_() { return getToken(MySQLStatementParser.LT_, 0); }
		public TerminalNode GT_() { return getToken(MySQLStatementParser.GT_, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(MySQLStatementParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySQLStatementParser.IGNORE, i);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySQLStatementParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySQLStatementParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(MySQLStatementParser.LINES, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1163);
			match(LOAD);
			setState(1164);
			match(XML);
			setState(1166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(1165);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(1168);
				match(LOCAL);
				}
			}

			setState(1171);
			match(INFILE);
			setState(1172);
			match(STRING_);
			setState(1174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPLACE || _la==IGNORE) {
				{
				setState(1173);
				_la = _input.LA(1);
				if ( !(_la==REPLACE || _la==IGNORE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1176);
			match(INTO);
			setState(1177);
			match(TABLE);
			setState(1178);
			tableName();
			setState(1182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(1179);
				match(CHARACTER);
				setState(1180);
				match(SET);
				setState(1181);
				identifier();
				}
			}

			setState(1190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(1184);
				match(ROWS);
				setState(1185);
				match(IDENTIFIED);
				setState(1186);
				match(BY);
				setState(1187);
				match(LT_);
				setState(1188);
				match(STRING_);
				setState(1189);
				match(GT_);
				}
			}

			setState(1196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1192);
				match(IGNORE);
				setState(1193);
				numberLiterals();
				setState(1194);
				_la = _input.LA(1);
				if ( !(_la==ROWS || _la==LINES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1198);
				match(LP_);
				setState(1199);
				identifier();
				setState(1204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1200);
					match(COMMA_);
					setState(1201);
					identifier();
					}
					}
					setState(1206);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1207);
				match(RP_);
				}
			}

			setState(1212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(1211);
				setAssignmentsClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClause_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public List<CteClause_Context> cteClause_() {
			return getRuleContexts(CteClause_Context.class);
		}
		public CteClause_Context cteClause_(int i) {
			return getRuleContext(CteClause_Context.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(MySQLStatementParser.RECURSIVE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public WithClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitWithClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClause_Context withClause_() throws RecognitionException {
		WithClause_Context _localctx = new WithClause_Context(_ctx, getState());
		enterRule(_localctx, 62, RULE_withClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1214);
			match(WITH);
			setState(1216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(1215);
				match(RECURSIVE);
				}
			}

			setState(1218);
			cteClause_();
			setState(1223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1219);
				match(COMMA_);
				setState(1220);
				cteClause_();
				}
				}
				setState(1225);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteClause_Context extends ParserRuleContext {
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public CteClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCteClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteClause_Context cteClause_() throws RecognitionException {
		CteClause_Context _localctx = new CteClause_Context(_ctx, getState());
		enterRule(_localctx, 64, RULE_cteClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1226);
			ignoredIdentifier_();
			setState(1228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (LP_ - 28)) | (1L << (TRUNCATE - 28)) | (1L << (POSITION - 28)) | (1L << (VIEW - 28)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (ANY - 110)) | (1L << (OFFSET - 110)) | (1L << (BEGIN - 110)) | (1L << (COMMIT - 110)) | (1L << (ROLLBACK - 110)) | (1L << (SAVEPOINT - 110)) | (1L << (BOOLEAN - 110)) | (1L << (DATE - 110)) | (1L << (TIME - 110)) | (1L << (TIMESTAMP - 110)) | (1L << (YEAR - 110)) | (1L << (QUARTER - 110)) | (1L << (MONTH - 110)) | (1L << (WEEK - 110)) | (1L << (DAY - 110)) | (1L << (HOUR - 110)) | (1L << (MINUTE - 110)) | (1L << (SECOND - 110)) | (1L << (MICROSECOND - 110)) | (1L << (MAX - 110)) | (1L << (MIN - 110)) | (1L << (SUM - 110)) | (1L << (COUNT - 110)) | (1L << (AVG - 110)) | (1L << (CURRENT - 110)) | (1L << (ENABLE - 110)) | (1L << (DISABLE - 110)) | (1L << (INSTANCE - 110)) | (1L << (DO - 110)) | (1L << (DEFINER - 110)) | (1L << (CASCADED - 110)) | (1L << (LOCAL - 110)) | (1L << (CLOSE - 110)) | (1L << (OPEN - 110)) | (1L << (NEXT - 110)) | (1L << (NAME - 110)) | (1L << (TYPE - 110)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
				{
				setState(1227);
				columnNames();
				}
			}

			setState(1230);
			match(AS);
			setState(1231);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionClauseContext extends ParserRuleContext {
		public List<SelectClauseContext> selectClause() {
			return getRuleContexts(SelectClauseContext.class);
		}
		public SelectClauseContext selectClause(int i) {
			return getRuleContext(SelectClauseContext.class,i);
		}
		public List<TerminalNode> UNION() { return getTokens(MySQLStatementParser.UNION); }
		public TerminalNode UNION(int i) {
			return getToken(MySQLStatementParser.UNION, i);
		}
		public List<TerminalNode> ALL() { return getTokens(MySQLStatementParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(MySQLStatementParser.ALL, i);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(MySQLStatementParser.DISTINCT); }
		public TerminalNode DISTINCT(int i) {
			return getToken(MySQLStatementParser.DISTINCT, i);
		}
		public UnionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUnionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionClauseContext unionClause() throws RecognitionException {
		UnionClauseContext _localctx = new UnionClauseContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_unionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1233);
			selectClause();
			setState(1241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==UNION) {
				{
				{
				setState(1234);
				match(UNION);
				setState(1236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT || _la==ALL) {
					{
					setState(1235);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==ALL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1238);
				selectClause();
				}
				}
				setState(1243);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySQLStatementParser.SELECT, 0); }
		public ProjectionsContext projections() {
			return getRuleContext(ProjectionsContext.class,0);
		}
		public List<SelectSpecificationContext> selectSpecification() {
			return getRuleContexts(SelectSpecificationContext.class);
		}
		public SelectSpecificationContext selectSpecification(int i) {
			return getRuleContext(SelectSpecificationContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClause_Context windowClause_() {
			return getRuleContext(WindowClause_Context.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public SelectIntoExpression_Context selectIntoExpression_() {
			return getRuleContext(SelectIntoExpression_Context.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_selectClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1244);
			match(SELECT);
			setState(1248);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,78,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1245);
					selectSpecification();
					}
					} 
				}
				setState(1250);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,78,_ctx);
			}
			setState(1251);
			projections();
			setState(1253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1252);
				fromClause();
				}
			}

			setState(1256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1255);
				whereClause();
				}
			}

			setState(1259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(1258);
				groupByClause();
				}
			}

			setState(1262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(1261);
				havingClause();
				}
			}

			setState(1265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(1264);
				windowClause_();
				}
			}

			setState(1268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1267);
				orderByClause();
				}
			}

			setState(1271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(1270);
				limitClause();
				}
			}

			setState(1274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1273);
				selectIntoExpression_();
				}
			}

			setState(1277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR || _la==LOCK) {
				{
				setState(1276);
				lockClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecificationContext extends ParserRuleContext {
		public DuplicateSpecificationContext duplicateSpecification() {
			return getRuleContext(DuplicateSpecificationContext.class,0);
		}
		public TerminalNode HIGH_PRIORITY() { return getToken(MySQLStatementParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySQLStatementParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySQLStatementParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySQLStatementParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySQLStatementParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySQLStatementParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySQLStatementParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySQLStatementParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSelectSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecificationContext selectSpecification() throws RecognitionException {
		SelectSpecificationContext _localctx = new SelectSpecificationContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_selectSpecification);
		int _la;
		try {
			setState(1287);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISTINCT:
			case ALL:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(1279);
				duplicateSpecification();
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1280);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(1281);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1282);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1283);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1284);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1285);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(1286);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DuplicateSpecificationContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySQLStatementParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySQLStatementParser.DISTINCTROW, 0); }
		public DuplicateSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_duplicateSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDuplicateSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DuplicateSpecificationContext duplicateSpecification() throws RecognitionException {
		DuplicateSpecificationContext _localctx = new DuplicateSpecificationContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_duplicateSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1289);
			_la = _input.LA(1);
			if ( !(_la==DISTINCT || _la==ALL || _la==DISTINCTROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionsContext extends ParserRuleContext {
		public UnqualifiedShorthandContext unqualifiedShorthand() {
			return getRuleContext(UnqualifiedShorthandContext.class,0);
		}
		public List<ProjectionContext> projection() {
			return getRuleContexts(ProjectionContext.class);
		}
		public ProjectionContext projection(int i) {
			return getRuleContext(ProjectionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public ProjectionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projections; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitProjections(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionsContext projections() throws RecognitionException {
		ProjectionsContext _localctx = new ProjectionsContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_projections);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK_:
				{
				setState(1291);
				unqualifiedShorthand();
				}
				break;
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case VALUES:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case LEFT:
			case RIGHT:
			case IF:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case CHAR:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case DATABASE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case REPLACE:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case MOD:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case ROW:
			case WITHOUT:
			case BINARY:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case SUBSTR:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case CONVERT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case EXTRACT:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MATCH:
			case MEMORY:
			case NONE:
			case NOW:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case CURRENT_TIMESTAMP:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case UNIX_TIMESTAMP:
			case LOWER:
			case UPPER:
			case ADDDATE:
			case ADDTIME:
			case DATE_ADD:
			case DATE_SUB:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case STR_TO_DATE:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case FROM_BASE64:
			case TO_BASE64:
			case GEOMCOLLECTION:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASGEOJSON:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_BUFFER_STRATEGY:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CONVEXHULL:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_DISTANCE_SPHERE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOHASH:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMGEOJSON:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_ISVALID:
			case ST_LATFROMGEOHASH:
			case ST_LATITUDE:
			case ST_LENGTH:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_LONGFROMGEOHASH:
			case ST_LONGITUDE:
			case ST_MAKEENVELOPE:
			case ST_MLINEFROMTEXT:
			case ST_MLINEFROMWKB:
			case ST_MULTILINESTRINGFROMTEXT:
			case ST_MULTILINESTRINGFROMWKB:
			case ST_MPOINTFROMTEXT:
			case ST_MPOINTFROMWKB:
			case ST_MULTIPOINTFROMTEXT:
			case ST_MULTIPOINTFROMWKB:
			case ST_MPOLYFROMTEXT:
			case ST_MPOLYFROMWKB:
			case ST_MULTIPOLYGONFROMTEXT:
			case ST_MULTIPOLYGONFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMGEOHASH:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SIMPLIFY:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SWAPXY:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_TRANSFORM:
			case ST_UNION:
			case ST_VALIDATE:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				{
				setState(1292);
				projection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1295);
				match(COMMA_);
				setState(1296);
				projection();
				}
				}
				setState(1301);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public QualifiedShorthandContext qualifiedShorthand() {
			return getRuleContext(QualifiedShorthandContext.class,0);
		}
		public ProjectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projection; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitProjection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionContext projection() throws RecognitionException {
		ProjectionContext _localctx = new ProjectionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_projection);
		int _la;
		try {
			setState(1313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1304);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
				case 1:
					{
					setState(1302);
					columnName();
					}
					break;
				case 2:
					{
					setState(1303);
					expr(0);
					}
					break;
				}
				setState(1310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (AS - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)) | (1L << (STRING_ - 688)))) != 0)) {
					{
					setState(1307);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1306);
						match(AS);
						}
					}

					setState(1309);
					alias();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1312);
				qualifiedShorthand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alias);
		try {
			setState(1317);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case WITHOUT:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MEMORY:
			case NONE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1315);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1316);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnqualifiedShorthandContext extends ParserRuleContext {
		public TerminalNode ASTERISK_() { return getToken(MySQLStatementParser.ASTERISK_, 0); }
		public UnqualifiedShorthandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unqualifiedShorthand; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUnqualifiedShorthand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnqualifiedShorthandContext unqualifiedShorthand() throws RecognitionException {
		UnqualifiedShorthandContext _localctx = new UnqualifiedShorthandContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_unqualifiedShorthand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1319);
			match(ASTERISK_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedShorthandContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT_ASTERISK_() { return getToken(MySQLStatementParser.DOT_ASTERISK_, 0); }
		public QualifiedShorthandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedShorthand; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitQualifiedShorthand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedShorthandContext qualifiedShorthand() throws RecognitionException {
		QualifiedShorthandContext _localctx = new QualifiedShorthandContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_qualifiedShorthand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1321);
			identifier();
			setState(1322);
			match(DOT_ASTERISK_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1324);
			match(FROM);
			setState(1325);
			tableReferences();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferencesContext extends ParserRuleContext {
		public List<EscapedTableReferenceContext> escapedTableReference() {
			return getRuleContexts(EscapedTableReferenceContext.class);
		}
		public EscapedTableReferenceContext escapedTableReference(int i) {
			return getRuleContext(EscapedTableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TableReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferences; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTableReferences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferencesContext tableReferences() throws RecognitionException {
		TableReferencesContext _localctx = new TableReferencesContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_tableReferences);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1327);
			escapedTableReference();
			setState(1332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1328);
				match(COMMA_);
				setState(1329);
				escapedTableReference();
				}
				}
				setState(1334);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EscapedTableReferenceContext extends ParserRuleContext {
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode LBE_() { return getToken(MySQLStatementParser.LBE_, 0); }
		public TerminalNode OJ() { return getToken(MySQLStatementParser.OJ, 0); }
		public TerminalNode RBE_() { return getToken(MySQLStatementParser.RBE_, 0); }
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escapedTableReference; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitEscapedTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EscapedTableReferenceContext escapedTableReference() throws RecognitionException {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_escapedTableReference);
		try {
			setState(1341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case WITHOUT:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MEMORY:
			case NONE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1335);
				tableReference();
				}
				break;
			case LBE_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1336);
				match(LBE_);
				setState(1337);
				match(OJ);
				setState(1338);
				tableReference();
				setState(1339);
				match(RBE_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_tableReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1343);
			tableFactor();
			setState(1347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (NATURAL - 82)) | (1L << (JOIN - 82)) | (1L << (INNER - 82)) | (1L << (LEFT - 82)) | (1L << (RIGHT - 82)) | (1L << (CROSS - 82)))) != 0) || _la==STRAIGHT_JOIN) {
				{
				{
				setState(1344);
				joinedTable();
				}
				}
				setState(1349);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFactorContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionNames_Context partitionNames_() {
			return getRuleContext(PartitionNames_Context.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public IndexHintList_Context indexHintList_() {
			return getRuleContext(IndexHintList_Context.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TableFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFactor; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTableFactor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFactorContext tableFactor() throws RecognitionException {
		TableFactorContext _localctx = new TableFactorContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_tableFactor);
		int _la;
		try {
			setState(1375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1350);
				tableName();
				setState(1352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1351);
					partitionNames_();
					}
				}

				setState(1358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (AS - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)) | (1L << (STRING_ - 688)))) != 0)) {
					{
					setState(1355);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1354);
						match(AS);
						}
					}

					setState(1357);
					alias();
					}
				}

				setState(1361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USE || _la==FORCE || _la==IGNORE) {
					{
					setState(1360);
					indexHintList_();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1363);
				subquery();
				setState(1365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1364);
					match(AS);
					}
				}

				setState(1367);
				alias();
				setState(1369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (LP_ - 28)) | (1L << (TRUNCATE - 28)) | (1L << (POSITION - 28)) | (1L << (VIEW - 28)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (ANY - 110)) | (1L << (OFFSET - 110)) | (1L << (BEGIN - 110)) | (1L << (COMMIT - 110)) | (1L << (ROLLBACK - 110)) | (1L << (SAVEPOINT - 110)) | (1L << (BOOLEAN - 110)) | (1L << (DATE - 110)) | (1L << (TIME - 110)) | (1L << (TIMESTAMP - 110)) | (1L << (YEAR - 110)) | (1L << (QUARTER - 110)) | (1L << (MONTH - 110)) | (1L << (WEEK - 110)) | (1L << (DAY - 110)) | (1L << (HOUR - 110)) | (1L << (MINUTE - 110)) | (1L << (SECOND - 110)) | (1L << (MICROSECOND - 110)) | (1L << (MAX - 110)) | (1L << (MIN - 110)) | (1L << (SUM - 110)) | (1L << (COUNT - 110)) | (1L << (AVG - 110)) | (1L << (CURRENT - 110)) | (1L << (ENABLE - 110)) | (1L << (DISABLE - 110)) | (1L << (INSTANCE - 110)) | (1L << (DO - 110)) | (1L << (DEFINER - 110)) | (1L << (CASCADED - 110)) | (1L << (LOCAL - 110)) | (1L << (CLOSE - 110)) | (1L << (OPEN - 110)) | (1L << (NEXT - 110)) | (1L << (NAME - 110)) | (1L << (TYPE - 110)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
					{
					setState(1368);
					columnNames();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1371);
				match(LP_);
				setState(1372);
				tableReferences();
				setState(1373);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionNames_Context extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySQLStatementParser.PARTITION, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public PartitionNames_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionNames_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPartitionNames_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionNames_Context partitionNames_() throws RecognitionException {
		PartitionNames_Context _localctx = new PartitionNames_Context(_ctx, getState());
		enterRule(_localctx, 94, RULE_partitionNames_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1377);
			match(PARTITION);
			setState(1378);
			match(LP_);
			setState(1379);
			identifier();
			setState(1384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1380);
				match(COMMA_);
				setState(1381);
				identifier();
				}
				}
				setState(1386);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1387);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintList_Context extends ParserRuleContext {
		public List<IndexHint_Context> indexHint_() {
			return getRuleContexts(IndexHint_Context.class);
		}
		public IndexHint_Context indexHint_(int i) {
			return getRuleContext(IndexHint_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public IndexHintList_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintList_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIndexHintList_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintList_Context indexHintList_() throws RecognitionException {
		IndexHintList_Context _localctx = new IndexHintList_Context(_ctx, getState());
		enterRule(_localctx, 96, RULE_indexHintList_);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1389);
			indexHint_();
			setState(1394);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1390);
					match(COMMA_);
					setState(1391);
					indexHint_();
					}
					} 
				}
				setState(1396);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHint_Context extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode USE() { return getToken(MySQLStatementParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(MySQLStatementParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(MySQLStatementParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode JOIN() { return getToken(MySQLStatementParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySQLStatementParser.GROUP, 0); }
		public IndexHint_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIndexHint_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHint_Context indexHint_() throws RecognitionException {
		IndexHint_Context _localctx = new IndexHint_Context(_ctx, getState());
		enterRule(_localctx, 98, RULE_indexHint_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1397);
			_la = _input.LA(1);
			if ( !(_la==USE || _la==FORCE || _la==IGNORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1398);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1399);
				match(FOR);
				setState(1405);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case JOIN:
					{
					setState(1400);
					match(JOIN);
					}
					break;
				case ORDER:
					{
					setState(1401);
					match(ORDER);
					setState(1402);
					match(BY);
					}
					break;
				case GROUP:
					{
					setState(1403);
					match(GROUP);
					setState(1404);
					match(BY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1409);
			match(LP_);
			setState(1410);
			indexName();
			setState(1415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1411);
				match(COMMA_);
				setState(1412);
				indexName();
				}
				}
				setState(1417);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1418);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public TerminalNode JOIN() { return getToken(MySQLStatementParser.JOIN, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySQLStatementParser.STRAIGHT_JOIN, 0); }
		public JoinSpecificationContext joinSpecification() {
			return getRuleContext(JoinSpecificationContext.class,0);
		}
		public TerminalNode INNER() { return getToken(MySQLStatementParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySQLStatementParser.CROSS, 0); }
		public TerminalNode LEFT() { return getToken(MySQLStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySQLStatementParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySQLStatementParser.OUTER, 0); }
		public TerminalNode NATURAL() { return getToken(MySQLStatementParser.NATURAL, 0); }
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_joinedTable);
		int _la;
		try {
			setState(1447);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
			case INNER:
			case CROSS:
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1425);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case JOIN:
				case INNER:
				case CROSS:
					{
					setState(1421);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INNER || _la==CROSS) {
						{
						setState(1420);
						_la = _input.LA(1);
						if ( !(_la==INNER || _la==CROSS) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1423);
					match(JOIN);
					}
					break;
				case STRAIGHT_JOIN:
					{
					setState(1424);
					match(STRAIGHT_JOIN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1427);
				tableFactor();
				setState(1429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(1428);
					joinSpecification();
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1431);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(1432);
					match(OUTER);
					}
				}

				setState(1435);
				match(JOIN);
				setState(1436);
				tableFactor();
				setState(1437);
				joinSpecification();
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1439);
				match(NATURAL);
				setState(1443);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
					{
					setState(1440);
					match(INNER);
					}
					break;
				case LEFT:
				case RIGHT:
					{
					setState(1441);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					{
					setState(1442);
					match(OUTER);
					}
					}
					break;
				case JOIN:
					break;
				default:
					break;
				}
				setState(1445);
				match(JOIN);
				setState(1446);
				tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinSpecificationContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySQLStatementParser.ON, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySQLStatementParser.USING, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public JoinSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitJoinSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinSpecificationContext joinSpecification() throws RecognitionException {
		JoinSpecificationContext _localctx = new JoinSpecificationContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_joinSpecification);
		try {
			setState(1453);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(1449);
				match(ON);
				setState(1450);
				expr(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1451);
				match(USING);
				setState(1452);
				columnNames();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(MySQLStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1455);
			match(WHERE);
			setState(1456);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(MySQLStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public List<OrderByItemContext> orderByItem() {
			return getRuleContexts(OrderByItemContext.class);
		}
		public OrderByItemContext orderByItem(int i) {
			return getRuleContext(OrderByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySQLStatementParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1458);
			match(GROUP);
			setState(1459);
			match(BY);
			setState(1460);
			orderByItem();
			setState(1465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1461);
				match(COMMA_);
				setState(1462);
				orderByItem();
				}
				}
				setState(1467);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				setState(1468);
				match(WITH);
				setState(1469);
				match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(MySQLStatementParser.HAVING, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1472);
			match(HAVING);
			setState(1473);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(MySQLStatementParser.LIMIT, 0); }
		public LimitRowCountContext limitRowCount() {
			return getRuleContext(LimitRowCountContext.class,0);
		}
		public TerminalNode OFFSET() { return getToken(MySQLStatementParser.OFFSET, 0); }
		public LimitOffsetContext limitOffset() {
			return getRuleContext(LimitOffsetContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1475);
			match(LIMIT);
			setState(1486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(1479);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					setState(1476);
					limitOffset();
					setState(1477);
					match(COMMA_);
					}
					break;
				}
				setState(1481);
				limitRowCount();
				}
				break;
			case 2:
				{
				setState(1482);
				limitRowCount();
				setState(1483);
				match(OFFSET);
				setState(1484);
				limitOffset();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitRowCountContext extends ParserRuleContext {
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public LimitRowCountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitRowCount; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLimitRowCount(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitRowCountContext limitRowCount() throws RecognitionException {
		LimitRowCountContext _localctx = new LimitRowCountContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_limitRowCount);
		try {
			setState(1490);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1488);
				numberLiterals();
				}
				break;
			case QUESTION_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1489);
				parameterMarker();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOffsetContext extends ParserRuleContext {
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public LimitOffsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOffset; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLimitOffset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitOffsetContext limitOffset() throws RecognitionException {
		LimitOffsetContext _localctx = new LimitOffsetContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_limitOffset);
		try {
			setState(1494);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1492);
				numberLiterals();
				}
				break;
			case QUESTION_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1493);
				parameterMarker();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClause_Context extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(MySQLStatementParser.WINDOW, 0); }
		public List<WindowItem_Context> windowItem_() {
			return getRuleContexts(WindowItem_Context.class);
		}
		public WindowItem_Context windowItem_(int i) {
			return getRuleContext(WindowItem_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public WindowClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitWindowClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClause_Context windowClause_() throws RecognitionException {
		WindowClause_Context _localctx = new WindowClause_Context(_ctx, getState());
		enterRule(_localctx, 116, RULE_windowClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1496);
			match(WINDOW);
			setState(1497);
			windowItem_();
			setState(1502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1498);
				match(COMMA_);
				setState(1499);
				windowItem_();
				}
				}
				setState(1504);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowItem_Context extends ParserRuleContext {
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public WindowSpecification_Context windowSpecification_() {
			return getRuleContext(WindowSpecification_Context.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public WindowItem_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowItem_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitWindowItem_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowItem_Context windowItem_() throws RecognitionException {
		WindowItem_Context _localctx = new WindowItem_Context(_ctx, getState());
		enterRule(_localctx, 118, RULE_windowItem_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1505);
			ignoredIdentifier_();
			setState(1506);
			match(AS);
			setState(1507);
			match(LP_);
			setState(1508);
			windowSpecification_();
			setState(1509);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public UnionClauseContext unionClause() {
			return getRuleContext(UnionClauseContext.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1511);
			match(LP_);
			setState(1512);
			unionClause();
			setState(1513);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesInto_Context extends ParserRuleContext {
		public TerminalNode STARTING() { return getToken(MySQLStatementParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode TERMINATED() { return getToken(MySQLStatementParser.TERMINATED, 0); }
		public SelectLinesInto_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSelectLinesInto_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesInto_Context selectLinesInto_() throws RecognitionException {
		SelectLinesInto_Context _localctx = new SelectLinesInto_Context(_ctx, getState());
		enterRule(_localctx, 122, RULE_selectLinesInto_);
		try {
			setState(1521);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1515);
				match(STARTING);
				setState(1516);
				match(BY);
				setState(1517);
				match(STRING_);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1518);
				match(TERMINATED);
				setState(1519);
				match(BY);
				setState(1520);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsInto_Context extends ParserRuleContext {
		public TerminalNode TERMINATED() { return getToken(MySQLStatementParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode ENCLOSED() { return getToken(MySQLStatementParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySQLStatementParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySQLStatementParser.ESCAPED, 0); }
		public SelectFieldsInto_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSelectFieldsInto_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsInto_Context selectFieldsInto_() throws RecognitionException {
		SelectFieldsInto_Context _localctx = new SelectFieldsInto_Context(_ctx, getState());
		enterRule(_localctx, 124, RULE_selectFieldsInto_);
		int _la;
		try {
			setState(1535);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(1523);
				match(TERMINATED);
				setState(1524);
				match(BY);
				setState(1525);
				match(STRING_);
				}
				break;
			case OPTIONALLY:
			case ENCLOSED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(1526);
					match(OPTIONALLY);
					}
				}

				setState(1529);
				match(ENCLOSED);
				setState(1530);
				match(BY);
				setState(1531);
				match(STRING_);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(1532);
				match(ESCAPED);
				setState(1533);
				match(BY);
				setState(1534);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpression_Context extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(MySQLStatementParser.INTO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode DUMPFILE() { return getToken(MySQLStatementParser.DUMPFILE, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode OUTFILE() { return getToken(MySQLStatementParser.OUTFILE, 0); }
		public TerminalNode CHARACTER() { return getToken(MySQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public TerminalNode LINES() { return getToken(MySQLStatementParser.LINES, 0); }
		public TerminalNode FIELDS() { return getToken(MySQLStatementParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySQLStatementParser.COLUMNS, 0); }
		public List<SelectFieldsInto_Context> selectFieldsInto_() {
			return getRuleContexts(SelectFieldsInto_Context.class);
		}
		public SelectFieldsInto_Context selectFieldsInto_(int i) {
			return getRuleContext(SelectFieldsInto_Context.class,i);
		}
		public List<SelectLinesInto_Context> selectLinesInto_() {
			return getRuleContexts(SelectLinesInto_Context.class);
		}
		public SelectLinesInto_Context selectLinesInto_(int i) {
			return getRuleContext(SelectLinesInto_Context.class,i);
		}
		public SelectIntoExpression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSelectIntoExpression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpression_Context selectIntoExpression_() throws RecognitionException {
		SelectIntoExpression_Context _localctx = new SelectIntoExpression_Context(_ctx, getState());
		enterRule(_localctx, 126, RULE_selectIntoExpression_);
		int _la;
		try {
			setState(1573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1537);
				match(INTO);
				setState(1538);
				identifier();
				setState(1543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1539);
					match(COMMA_);
					setState(1540);
					identifier();
					}
					}
					setState(1545);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1546);
				match(INTO);
				setState(1547);
				match(DUMPFILE);
				setState(1548);
				match(STRING_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1549);
				match(INTO);
				setState(1550);
				match(OUTFILE);
				setState(1551);
				match(STRING_);
				setState(1555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(1552);
					match(CHARACTER);
					setState(1553);
					match(SET);
					setState(1554);
					match(IDENTIFIER_);
					}
				}

				setState(1563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS || _la==FIELDS) {
					{
					setState(1557);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1559); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1558);
						selectFieldsInto_();
						}
						}
						setState(1561); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (TERMINATED - 471)) | (1L << (OPTIONALLY - 471)) | (1L << (ENCLOSED - 471)) | (1L << (ESCAPED - 471)))) != 0) );
					}
				}

				setState(1571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(1565);
					match(LINES);
					setState(1567); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1566);
						selectLinesInto_();
						}
						}
						setState(1569); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySQLStatementParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySQLStatementParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySQLStatementParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySQLStatementParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_lockClause);
		try {
			setState(1581);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(1575);
				match(FOR);
				setState(1576);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(1577);
				match(LOCK);
				setState(1578);
				match(IN);
				setState(1579);
				match(SHARE);
				setState(1580);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTION_() { return getToken(MySQLStatementParser.QUESTION_, 0); }
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1583);
			match(QUESTION_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralsContext extends ParserRuleContext {
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public DateTimeLiteralsContext dateTimeLiterals() {
			return getRuleContext(DateTimeLiteralsContext.class,0);
		}
		public HexadecimalLiteralsContext hexadecimalLiterals() {
			return getRuleContext(HexadecimalLiteralsContext.class,0);
		}
		public BitValueLiteralsContext bitValueLiterals() {
			return getRuleContext(BitValueLiteralsContext.class,0);
		}
		public BooleanLiteralsContext booleanLiterals() {
			return getRuleContext(BooleanLiteralsContext.class,0);
		}
		public NullValueLiteralsContext nullValueLiterals() {
			return getRuleContext(NullValueLiteralsContext.class,0);
		}
		public LiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literals; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralsContext literals() throws RecognitionException {
		LiteralsContext _localctx = new LiteralsContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_literals);
		try {
			setState(1592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1585);
				stringLiterals();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1586);
				numberLiterals();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1587);
				dateTimeLiterals();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1588);
				hexadecimalLiterals();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1589);
				bitValueLiterals();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1590);
				booleanLiterals();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1591);
				nullValueLiterals();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralsContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public StringLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiterals; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitStringLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralsContext stringLiterals() throws RecognitionException {
		StringLiteralsContext _localctx = new StringLiteralsContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_stringLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1595);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIER_) {
				{
				setState(1594);
				characterSetName_();
				}
			}

			setState(1597);
			match(STRING_);
			setState(1599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				setState(1598);
				collateClause_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberLiteralsContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(MySQLStatementParser.MINUS_, 0); }
		public NumberLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberLiterals; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitNumberLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberLiteralsContext numberLiterals() throws RecognitionException {
		NumberLiteralsContext _localctx = new NumberLiteralsContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_numberLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_) {
				{
				setState(1601);
				match(MINUS_);
				}
			}

			setState(1604);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateTimeLiteralsContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode DATE() { return getToken(MySQLStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySQLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode LBE_() { return getToken(MySQLStatementParser.LBE_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RBE_() { return getToken(MySQLStatementParser.RBE_, 0); }
		public DateTimeLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTimeLiterals; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDateTimeLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateTimeLiteralsContext dateTimeLiterals() throws RecognitionException {
		DateTimeLiteralsContext _localctx = new DateTimeLiteralsContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_dateTimeLiterals);
		int _la;
		try {
			setState(1613);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(1606);
				_la = _input.LA(1);
				if ( !(((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DATE - 130)) | (1L << (TIME - 130)) | (1L << (TIMESTAMP - 130)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1607);
				match(STRING_);
				}
				break;
			case LBE_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1608);
				match(LBE_);
				setState(1609);
				identifier();
				setState(1610);
				match(STRING_);
				setState(1611);
				match(RBE_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralsContext extends ParserRuleContext {
		public TerminalNode HEX_DIGIT_() { return getToken(MySQLStatementParser.HEX_DIGIT_, 0); }
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public HexadecimalLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiterals; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitHexadecimalLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralsContext hexadecimalLiterals() throws RecognitionException {
		HexadecimalLiteralsContext _localctx = new HexadecimalLiteralsContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_hexadecimalLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIER_) {
				{
				setState(1615);
				characterSetName_();
				}
			}

			setState(1618);
			match(HEX_DIGIT_);
			setState(1620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				setState(1619);
				collateClause_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitValueLiteralsContext extends ParserRuleContext {
		public TerminalNode BIT_NUM_() { return getToken(MySQLStatementParser.BIT_NUM_, 0); }
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public BitValueLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitValueLiterals; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitBitValueLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitValueLiteralsContext bitValueLiterals() throws RecognitionException {
		BitValueLiteralsContext _localctx = new BitValueLiteralsContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_bitValueLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIER_) {
				{
				setState(1622);
				characterSetName_();
				}
			}

			setState(1625);
			match(BIT_NUM_);
			setState(1627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				setState(1626);
				collateClause_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralsContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySQLStatementParser.FALSE, 0); }
		public BooleanLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiterals; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitBooleanLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralsContext booleanLiterals() throws RecognitionException {
		BooleanLiteralsContext _localctx = new BooleanLiteralsContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_booleanLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1629);
			_la = _input.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullValueLiteralsContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(MySQLStatementParser.NULL, 0); }
		public NullValueLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullValueLiterals; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitNullValueLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullValueLiteralsContext nullValueLiterals() throws RecognitionException {
		NullValueLiteralsContext _localctx = new NullValueLiteralsContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_nullValueLiterals);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1631);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterSetName_Context extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public CharacterSetName_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSetName_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCharacterSetName_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSetName_Context characterSetName_() throws RecognitionException {
		CharacterSetName_Context _localctx = new CharacterSetName_Context(_ctx, getState());
		enterRule(_localctx, 148, RULE_characterSetName_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1633);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationName_Context extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public CollationName_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCollationName_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationName_Context collationName_() throws RecognitionException {
		CollationName_Context _localctx = new CollationName_Context(_ctx, getState());
		enterRule(_localctx, 150, RULE_collationName_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1635);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_identifier);
		try {
			setState(1639);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1637);
				match(IDENTIFIER_);
				}
				break;
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case WITHOUT:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MEMORY:
			case NONE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
				enterOuterAlt(_localctx, 2);
				{
				setState(1638);
				unreservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnreservedWordContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySQLStatementParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySQLStatementParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(MySQLStatementParser.AFTER, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySQLStatementParser.ALGORITHM, 0); }
		public TerminalNode ALWAYS() { return getToken(MySQLStatementParser.ALWAYS, 0); }
		public TerminalNode ANY() { return getToken(MySQLStatementParser.ANY, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySQLStatementParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySQLStatementParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BEGIN() { return getToken(MySQLStatementParser.BEGIN, 0); }
		public TerminalNode BTREE() { return getToken(MySQLStatementParser.BTREE, 0); }
		public TerminalNode CHAIN() { return getToken(MySQLStatementParser.CHAIN, 0); }
		public TerminalNode CHARSET() { return getToken(MySQLStatementParser.CHARSET, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySQLStatementParser.CHECKSUM, 0); }
		public TerminalNode CIPHER() { return getToken(MySQLStatementParser.CIPHER, 0); }
		public TerminalNode CLIENT() { return getToken(MySQLStatementParser.CLIENT, 0); }
		public TerminalNode COALESCE() { return getToken(MySQLStatementParser.COALESCE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySQLStatementParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySQLStatementParser.COLUMN_FORMAT, 0); }
		public TerminalNode COMMENT() { return getToken(MySQLStatementParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySQLStatementParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(MySQLStatementParser.COMMITTED, 0); }
		public TerminalNode COMPACT() { return getToken(MySQLStatementParser.COMPACT, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySQLStatementParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySQLStatementParser.COMPRESSION, 0); }
		public TerminalNode CONNECTION() { return getToken(MySQLStatementParser.CONNECTION, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySQLStatementParser.CONSISTENT, 0); }
		public TerminalNode CURRENT() { return getToken(MySQLStatementParser.CURRENT, 0); }
		public TerminalNode DATA() { return getToken(MySQLStatementParser.DATA, 0); }
		public TerminalNode DATE() { return getToken(MySQLStatementParser.DATE, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySQLStatementParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DISABLE() { return getToken(MySQLStatementParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySQLStatementParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySQLStatementParser.DISK, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySQLStatementParser.DUPLICATE, 0); }
		public TerminalNode ENABLE() { return getToken(MySQLStatementParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySQLStatementParser.ENCRYPTION, 0); }
		public TerminalNode ENFORCED() { return getToken(MySQLStatementParser.ENFORCED, 0); }
		public TerminalNode END() { return getToken(MySQLStatementParser.END, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public TerminalNode ESCAPE() { return getToken(MySQLStatementParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(MySQLStatementParser.EVENT, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySQLStatementParser.EXCHANGE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySQLStatementParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySQLStatementParser.FILE, 0); }
		public TerminalNode FIRST() { return getToken(MySQLStatementParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySQLStatementParser.FIXED, 0); }
		public TerminalNode FOLLOWING() { return getToken(MySQLStatementParser.FOLLOWING, 0); }
		public TerminalNode GLOBAL() { return getToken(MySQLStatementParser.GLOBAL, 0); }
		public TerminalNode HASH() { return getToken(MySQLStatementParser.HASH, 0); }
		public TerminalNode IMPORT_() { return getToken(MySQLStatementParser.IMPORT_, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySQLStatementParser.INSERT_METHOD, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySQLStatementParser.INVISIBLE, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySQLStatementParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LAST() { return getToken(MySQLStatementParser.LAST, 0); }
		public TerminalNode LESS() { return getToken(MySQLStatementParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySQLStatementParser.LEVEL, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySQLStatementParser.MAX_ROWS, 0); }
		public TerminalNode MEMORY() { return getToken(MySQLStatementParser.MEMORY, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySQLStatementParser.MIN_ROWS, 0); }
		public TerminalNode MODIFY() { return getToken(MySQLStatementParser.MODIFY, 0); }
		public TerminalNode NO() { return getToken(MySQLStatementParser.NO, 0); }
		public TerminalNode NONE() { return getToken(MySQLStatementParser.NONE, 0); }
		public TerminalNode OFFSET() { return getToken(MySQLStatementParser.OFFSET, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySQLStatementParser.PACK_KEYS, 0); }
		public TerminalNode PARSER() { return getToken(MySQLStatementParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySQLStatementParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySQLStatementParser.PARTITIONING, 0); }
		public TerminalNode PASSWORD() { return getToken(MySQLStatementParser.PASSWORD, 0); }
		public TerminalNode PERSIST() { return getToken(MySQLStatementParser.PERSIST, 0); }
		public TerminalNode PERSIST_ONLY() { return getToken(MySQLStatementParser.PERSIST_ONLY, 0); }
		public TerminalNode PRECEDING() { return getToken(MySQLStatementParser.PRECEDING, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode PROCESS() { return getToken(MySQLStatementParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(MySQLStatementParser.PROXY, 0); }
		public TerminalNode QUICK() { return getToken(MySQLStatementParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySQLStatementParser.REBUILD, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySQLStatementParser.REDUNDANT, 0); }
		public TerminalNode RELOAD() { return getToken(MySQLStatementParser.RELOAD, 0); }
		public TerminalNode REMOVE() { return getToken(MySQLStatementParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySQLStatementParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySQLStatementParser.REPAIR, 0); }
		public TerminalNode REVERSE() { return getToken(MySQLStatementParser.REVERSE, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySQLStatementParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySQLStatementParser.ROLLUP, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySQLStatementParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySQLStatementParser.SAVEPOINT, 0); }
		public TerminalNode SESSION() { return getToken(MySQLStatementParser.SESSION, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySQLStatementParser.SHUTDOWN, 0); }
		public TerminalNode SIMPLE() { return getToken(MySQLStatementParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLStatementParser.SLAVE, 0); }
		public TerminalNode SOUNDS() { return getToken(MySQLStatementParser.SOUNDS, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySQLStatementParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySQLStatementParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySQLStatementParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySQLStatementParser.SQL_NO_CACHE, 0); }
		public TerminalNode START() { return getToken(MySQLStatementParser.START, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySQLStatementParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySQLStatementParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySQLStatementParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STORAGE() { return getToken(MySQLStatementParser.STORAGE, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySQLStatementParser.SUBPARTITION, 0); }
		public TerminalNode SUPER() { return getToken(MySQLStatementParser.SUPER, 0); }
		public TerminalNode TABLES() { return getToken(MySQLStatementParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySQLStatementParser.TEMPORARY, 0); }
		public TerminalNode THAN() { return getToken(MySQLStatementParser.THAN, 0); }
		public TerminalNode TIME() { return getToken(MySQLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySQLStatementParser.TRANSACTION, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySQLStatementParser.TRUNCATE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySQLStatementParser.UNBOUNDED, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySQLStatementParser.UNKNOWN, 0); }
		public TerminalNode UPGRADE() { return getToken(MySQLStatementParser.UPGRADE, 0); }
		public TerminalNode VALIDATION() { return getToken(MySQLStatementParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySQLStatementParser.VALUE, 0); }
		public TerminalNode VIEW() { return getToken(MySQLStatementParser.VIEW, 0); }
		public TerminalNode VISIBLE() { return getToken(MySQLStatementParser.VISIBLE, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySQLStatementParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHOUT() { return getToken(MySQLStatementParser.WITHOUT, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySQLStatementParser.MICROSECOND, 0); }
		public TerminalNode SECOND() { return getToken(MySQLStatementParser.SECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySQLStatementParser.MINUTE, 0); }
		public TerminalNode HOUR() { return getToken(MySQLStatementParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(MySQLStatementParser.DAY, 0); }
		public TerminalNode WEEK() { return getToken(MySQLStatementParser.WEEK, 0); }
		public TerminalNode MONTH() { return getToken(MySQLStatementParser.MONTH, 0); }
		public TerminalNode QUARTER() { return getToken(MySQLStatementParser.QUARTER, 0); }
		public TerminalNode YEAR() { return getToken(MySQLStatementParser.YEAR, 0); }
		public TerminalNode AGAINST() { return getToken(MySQLStatementParser.AGAINST, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySQLStatementParser.LANGUAGE, 0); }
		public TerminalNode MODE() { return getToken(MySQLStatementParser.MODE, 0); }
		public TerminalNode QUERY() { return getToken(MySQLStatementParser.QUERY, 0); }
		public TerminalNode EXPANSION() { return getToken(MySQLStatementParser.EXPANSION, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySQLStatementParser.BOOLEAN, 0); }
		public TerminalNode MAX() { return getToken(MySQLStatementParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySQLStatementParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySQLStatementParser.SUM, 0); }
		public TerminalNode COUNT() { return getToken(MySQLStatementParser.COUNT, 0); }
		public TerminalNode AVG() { return getToken(MySQLStatementParser.AVG, 0); }
		public TerminalNode BIT_AND() { return getToken(MySQLStatementParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySQLStatementParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySQLStatementParser.BIT_XOR, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySQLStatementParser.GROUP_CONCAT, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(MySQLStatementParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(MySQLStatementParser.JSON_OBJECTAGG, 0); }
		public TerminalNode STD() { return getToken(MySQLStatementParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySQLStatementParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySQLStatementParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySQLStatementParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySQLStatementParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySQLStatementParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySQLStatementParser.VARIANCE, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLStatementParser.EXTENDED, 0); }
		public TerminalNode STATUS() { return getToken(MySQLStatementParser.STATUS, 0); }
		public TerminalNode FIELDS() { return getToken(MySQLStatementParser.FIELDS, 0); }
		public TerminalNode INDEXES() { return getToken(MySQLStatementParser.INDEXES, 0); }
		public TerminalNode USER() { return getToken(MySQLStatementParser.USER, 0); }
		public TerminalNode ROLE() { return getToken(MySQLStatementParser.ROLE, 0); }
		public TerminalNode OJ() { return getToken(MySQLStatementParser.OJ, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySQLStatementParser.AUTOCOMMIT, 0); }
		public TerminalNode OFF() { return getToken(MySQLStatementParser.OFF, 0); }
		public TerminalNode ROTATE() { return getToken(MySQLStatementParser.ROTATE, 0); }
		public TerminalNode INSTANCE() { return getToken(MySQLStatementParser.INSTANCE, 0); }
		public TerminalNode MASTER() { return getToken(MySQLStatementParser.MASTER, 0); }
		public TerminalNode BINLOG() { return getToken(MySQLStatementParser.BINLOG, 0); }
		public TerminalNode ERROR() { return getToken(MySQLStatementParser.ERROR, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySQLStatementParser.SCHEDULE, 0); }
		public TerminalNode COMPLETION() { return getToken(MySQLStatementParser.COMPLETION, 0); }
		public TerminalNode DO() { return getToken(MySQLStatementParser.DO, 0); }
		public TerminalNode DEFINER() { return getToken(MySQLStatementParser.DEFINER, 0); }
		public TerminalNode EVERY() { return getToken(MySQLStatementParser.EVERY, 0); }
		public TerminalNode HOST() { return getToken(MySQLStatementParser.HOST, 0); }
		public TerminalNode SOCKET() { return getToken(MySQLStatementParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(MySQLStatementParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(MySQLStatementParser.PORT, 0); }
		public TerminalNode RETURNS() { return getToken(MySQLStatementParser.RETURNS, 0); }
		public TerminalNode CONTAINS() { return getToken(MySQLStatementParser.CONTAINS, 0); }
		public TerminalNode SECURITY() { return getToken(MySQLStatementParser.SECURITY, 0); }
		public TerminalNode INVOKER() { return getToken(MySQLStatementParser.INVOKER, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySQLStatementParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySQLStatementParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySQLStatementParser.TEMPTABLE, 0); }
		public TerminalNode CASCADED() { return getToken(MySQLStatementParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLStatementParser.LOCAL, 0); }
		public TerminalNode SERVER() { return getToken(MySQLStatementParser.SERVER, 0); }
		public TerminalNode WRAPPER() { return getToken(MySQLStatementParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(MySQLStatementParser.OPTIONS, 0); }
		public TerminalNode DATAFILE() { return getToken(MySQLStatementParser.DATAFILE, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySQLStatementParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySQLStatementParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySQLStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySQLStatementParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySQLStatementParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySQLStatementParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySQLStatementParser.WAIT, 0); }
		public TerminalNode LOGFILE() { return getToken(MySQLStatementParser.LOGFILE, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySQLStatementParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySQLStatementParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySQLStatementParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode DEFINITION() { return getToken(MySQLStatementParser.DEFINITION, 0); }
		public TerminalNode ORGANIZATION() { return getToken(MySQLStatementParser.ORGANIZATION, 0); }
		public TerminalNode DESCRIPTION() { return getToken(MySQLStatementParser.DESCRIPTION, 0); }
		public TerminalNode REFERENCE() { return getToken(MySQLStatementParser.REFERENCE, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySQLStatementParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(MySQLStatementParser.PRECEDES, 0); }
		public TerminalNode NAME() { return getToken(MySQLStatementParser.NAME, 0); }
		public TerminalNode CLOSE() { return getToken(MySQLStatementParser.CLOSE, 0); }
		public TerminalNode OPEN() { return getToken(MySQLStatementParser.OPEN, 0); }
		public TerminalNode NEXT() { return getToken(MySQLStatementParser.NEXT, 0); }
		public TerminalNode HANDLER() { return getToken(MySQLStatementParser.HANDLER, 0); }
		public TerminalNode PREV() { return getToken(MySQLStatementParser.PREV, 0); }
		public TerminalNode IMPORT() { return getToken(MySQLStatementParser.IMPORT, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySQLStatementParser.CONCURRENT, 0); }
		public TerminalNode XML() { return getToken(MySQLStatementParser.XML, 0); }
		public TerminalNode POSITION() { return getToken(MySQLStatementParser.POSITION, 0); }
		public TerminalNode SHARE() { return getToken(MySQLStatementParser.SHARE, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySQLStatementParser.DUMPFILE, 0); }
		public TerminalNode CLONE() { return getToken(MySQLStatementParser.CLONE, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySQLStatementParser.AGGREGATE, 0); }
		public TerminalNode INSTALL() { return getToken(MySQLStatementParser.INSTALL, 0); }
		public TerminalNode UNINSTALL() { return getToken(MySQLStatementParser.UNINSTALL, 0); }
		public TerminalNode COMPONENT() { return getToken(MySQLStatementParser.COMPONENT, 0); }
		public TerminalNode RESOURCE() { return getToken(MySQLStatementParser.RESOURCE, 0); }
		public TerminalNode FLUSH() { return getToken(MySQLStatementParser.FLUSH, 0); }
		public TerminalNode RESET() { return getToken(MySQLStatementParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(MySQLStatementParser.RESTART, 0); }
		public TerminalNode HOSTS() { return getToken(MySQLStatementParser.HOSTS, 0); }
		public TerminalNode RELAY() { return getToken(MySQLStatementParser.RELAY, 0); }
		public TerminalNode EXPORT() { return getToken(MySQLStatementParser.EXPORT, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySQLStatementParser.USER_RESOURCES, 0); }
		public TerminalNode SLOW() { return getToken(MySQLStatementParser.SLOW, 0); }
		public TerminalNode GENERAL() { return getToken(MySQLStatementParser.GENERAL, 0); }
		public TerminalNode CACHE() { return getToken(MySQLStatementParser.CACHE, 0); }
		public TerminalNode SUBJECT() { return getToken(MySQLStatementParser.SUBJECT, 0); }
		public TerminalNode ISSUER() { return getToken(MySQLStatementParser.ISSUER, 0); }
		public TerminalNode OLD() { return getToken(MySQLStatementParser.OLD, 0); }
		public TerminalNode RANDOM() { return getToken(MySQLStatementParser.RANDOM, 0); }
		public TerminalNode RETAIN() { return getToken(MySQLStatementParser.RETAIN, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySQLStatementParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySQLStatementParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySQLStatementParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySQLStatementParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode REUSE() { return getToken(MySQLStatementParser.REUSE, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySQLStatementParser.OPTIONAL, 0); }
		public TerminalNode HISTORY() { return getToken(MySQLStatementParser.HISTORY, 0); }
		public TerminalNode NEVER() { return getToken(MySQLStatementParser.NEVER, 0); }
		public TerminalNode EXPIRE() { return getToken(MySQLStatementParser.EXPIRE, 0); }
		public TerminalNode TYPE() { return getToken(MySQLStatementParser.TYPE, 0); }
		public TerminalNode CONTEXT() { return getToken(MySQLStatementParser.CONTEXT, 0); }
		public TerminalNode CODE() { return getToken(MySQLStatementParser.CODE, 0); }
		public TerminalNode CHANNEL() { return getToken(MySQLStatementParser.CHANNEL, 0); }
		public TerminalNode SOURCE() { return getToken(MySQLStatementParser.SOURCE, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySQLStatementParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySQLStatementParser.SQL_THREAD, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySQLStatementParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySQLStatementParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySQLStatementParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySQLStatementParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySQLStatementParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySQLStatementParser.RELAY_LOG_POS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySQLStatementParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode UNTIL() { return getToken(MySQLStatementParser.UNTIL, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySQLStatementParser.DEFAULT_AUTH, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySQLStatementParser.PLUGIN_DIR, 0); }
		public TerminalNode STOP() { return getToken(MySQLStatementParser.STOP, 0); }
		public TerminalNode SIGNED() { return getToken(MySQLStatementParser.SIGNED, 0); }
		public UnreservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreservedWord; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUnreservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnreservedWordContext unreservedWord() throws RecognitionException {
		UnreservedWordContext _localctx = new UnreservedWordContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_unreservedWord);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1641);
			_la = _input.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> AT_() { return getTokens(MySQLStatementParser.AT_); }
		public TerminalNode AT_(int i) {
			return getToken(MySQLStatementParser.AT_, i);
		}
		public TerminalNode DOT_() { return getToken(MySQLStatementParser.DOT_, 0); }
		public TerminalNode GLOBAL() { return getToken(MySQLStatementParser.GLOBAL, 0); }
		public TerminalNode PERSIST() { return getToken(MySQLStatementParser.PERSIST, 0); }
		public TerminalNode PERSIST_ONLY() { return getToken(MySQLStatementParser.PERSIST_ONLY, 0); }
		public TerminalNode SESSION() { return getToken(MySQLStatementParser.SESSION, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_) {
				{
				setState(1644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(1643);
					match(AT_);
					}
					break;
				}
				setState(1646);
				match(AT_);
				}
			}

			setState(1650);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(1649);
				_la = _input.LA(1);
				if ( !(((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (GLOBAL - 295)) | (1L << (PERSIST - 295)) | (1L << (SESSION - 295)))) != 0) || _la==PERSIST_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_) {
				{
				setState(1652);
				match(DOT_);
				}
			}

			setState(1655);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1657);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(MySQLStatementParser.DOT_, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				setState(1659);
				owner();
				setState(1660);
				match(DOT_);
				}
				break;
			}
			setState(1664);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(MySQLStatementParser.DOT_, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(1666);
				owner();
				setState(1667);
				match(DOT_);
				}
				break;
			}
			setState(1671);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1673);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public TerminalNode AT_() { return getToken(MySQLStatementParser.AT_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_userName);
		try {
			setState(1680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1675);
				match(STRING_);
				setState(1676);
				match(AT_);
				setState(1677);
				match(STRING_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1678);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1679);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventNameContext extends ParserRuleContext {
		public TerminalNode AT_() { return getToken(MySQLStatementParser.AT_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public List<TerminalNode> IDENTIFIER_() { return getTokens(MySQLStatementParser.IDENTIFIER_); }
		public TerminalNode IDENTIFIER_(int i) {
			return getToken(MySQLStatementParser.IDENTIFIER_, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitEventName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventNameContext eventName() throws RecognitionException {
		EventNameContext _localctx = new EventNameContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_eventName);
		int _la;
		try {
			setState(1688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1682);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER_ || _la==STRING_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1683);
				match(AT_);
				{
				setState(1684);
				match(STRING_);
				setState(1685);
				match(IDENTIFIER_);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1686);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1687);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public ServerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitServerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerNameContext serverName() throws RecognitionException {
		ServerNameContext _localctx = new ServerNameContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_serverName);
		try {
			setState(1692);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case WITHOUT:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MEMORY:
			case NONE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1690);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1691);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WrapperNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public WrapperNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wrapperName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitWrapperName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WrapperNameContext wrapperName() throws RecognitionException {
		WrapperNameContext _localctx = new WrapperNameContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_wrapperName);
		try {
			setState(1696);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case WITHOUT:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MEMORY:
			case NONE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1694);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1695);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(MySQLStatementParser.DOT_, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_functionName);
		try {
			setState(1705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1698);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1702);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(1699);
					owner();
					setState(1700);
					match(DOT_);
					}
					break;
				}
				setState(1704);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(MySQLStatementParser.DOT_, 0); }
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitViewName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_viewName);
		try {
			setState(1714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1707);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1711);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(1708);
					owner();
					setState(1709);
					match(DOT_);
					}
					break;
				}
				setState(1713);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1718);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNames; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesContext tableNames() throws RecognitionException {
		TableNamesContext _localctx = new TableNamesContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_tableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1720);
				match(LP_);
				}
			}

			setState(1723);
			tableName();
			setState(1728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1724);
				match(COMMA_);
				setState(1725);
				tableName();
				}
				}
				setState(1730);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(1731);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNamesContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public ColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNames; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNamesContext columnNames() throws RecognitionException {
		ColumnNamesContext _localctx = new ColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_columnNames);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1734);
				match(LP_);
				}
			}

			setState(1737);
			columnName();
			setState(1742);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1738);
					match(COMMA_);
					setState(1739);
					columnName();
					}
					} 
				}
				setState(1744);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
			}
			setState(1746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(1745);
				match(RP_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public GroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitGroupName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupNameContext groupName() throws RecognitionException {
		GroupNameContext _localctx = new GroupNameContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_groupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1748);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShardLibraryNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public ShardLibraryNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shardLibraryName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShardLibraryName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShardLibraryNameContext shardLibraryName() throws RecognitionException {
		ShardLibraryNameContext _localctx = new ShardLibraryNameContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_shardLibraryName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1750);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComponentNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public ComponentNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_componentName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitComponentName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComponentNameContext componentName() throws RecognitionException {
		ComponentNameContext _localctx = new ComponentNameContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_componentName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1752);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PluginNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public PluginNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pluginName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPluginName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PluginNameContext pluginName() throws RecognitionException {
		PluginNameContext _localctx = new PluginNameContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_pluginName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1754);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public HostNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitHostName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostNameContext hostName() throws RecognitionException {
		HostNameContext _localctx = new HostNameContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_hostName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1756);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PortContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public PortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PortContext port() throws RecognitionException {
		PortContext _localctx = new PortContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_port);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1758);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneInstanceContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode AT_() { return getToken(MySQLStatementParser.AT_, 0); }
		public HostNameContext hostName() {
			return getRuleContext(HostNameContext.class,0);
		}
		public TerminalNode COLON_() { return getToken(MySQLStatementParser.COLON_, 0); }
		public PortContext port() {
			return getRuleContext(PortContext.class,0);
		}
		public CloneInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneInstance; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCloneInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneInstanceContext cloneInstance() throws RecognitionException {
		CloneInstanceContext _localctx = new CloneInstanceContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_cloneInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1760);
			userName();
			setState(1761);
			match(AT_);
			setState(1762);
			hostName();
			setState(1763);
			match(COLON_);
			setState(1764);
			port();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneDirContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public CloneDirContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneDir; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCloneDir(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneDirContext cloneDir() throws RecognitionException {
		CloneDirContext _localctx = new CloneDirContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_cloneDir);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1766);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public ChannelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitChannelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelNameContext channelName() throws RecognitionException {
		ChannelNameContext _localctx = new ChannelNameContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_channelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1768);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLogName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogNameContext logName() throws RecognitionException {
		LogNameContext _localctx = new LogNameContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_logName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1770);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameContext extends ParserRuleContext {
		public TerminalNode AT_() { return getToken(MySQLStatementParser.AT_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public List<TerminalNode> IDENTIFIER_() { return getTokens(MySQLStatementParser.IDENTIFIER_); }
		public TerminalNode IDENTIFIER_(int i) {
			return getToken(MySQLStatementParser.IDENTIFIER_, i);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRoleName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_roleName);
		int _la;
		try {
			setState(1777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1772);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER_ || _la==STRING_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1773);
				match(AT_);
				{
				setState(1774);
				match(STRING_);
				setState(1775);
				match(IDENTIFIER_);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1776);
				match(IDENTIFIER_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_engineName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1779);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTriggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1781);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerTimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(MySQLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(MySQLStatementParser.AFTER, 0); }
		public TriggerTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTime; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTriggerTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTimeContext triggerTime() throws RecognitionException {
		TriggerTimeContext _localctx = new TriggerTimeContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_triggerTime);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1783);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserOrRoleContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public UserOrRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOrRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUserOrRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserOrRoleContext userOrRole() throws RecognitionException {
		UserOrRoleContext _localctx = new UserOrRoleContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_userOrRole);
		try {
			setState(1787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1785);
				userName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1786);
				roleName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public PartitionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPartitionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionNameContext partitionName() throws RecognitionException {
		PartitionNameContext _localctx = new PartitionNameContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_partitionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1789);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerEventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(MySQLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(MySQLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(MySQLStatementParser.DELETE, 0); }
		public TriggerEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTriggerEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventContext triggerEvent() throws RecognitionException {
		TriggerEventContext _localctx = new TriggerEventContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_triggerEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1791);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INSERT) | (1L << UPDATE) | (1L << DELETE))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerOrderContext extends ParserRuleContext {
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(MySQLStatementParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(MySQLStatementParser.PRECEDES, 0); }
		public TriggerOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOrder; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTriggerOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOrderContext triggerOrder() throws RecognitionException {
		TriggerOrderContext _localctx = new TriggerOrderContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_triggerOrder);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1793);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1794);
			triggerName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public NotOperator_Context notOperator_() {
			return getRuleContext(NotOperator_Context.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public BooleanPrimaryContext booleanPrimary() {
			return getRuleContext(BooleanPrimaryContext.class,0);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public TerminalNode XOR() { return getToken(MySQLStatementParser.XOR, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 222;
		enterRecursionRule(_localctx, 222, RULE_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(1797);
				notOperator_();
				setState(1798);
				expr(3);
				}
				break;
			case 2:
				{
				setState(1800);
				match(LP_);
				setState(1801);
				expr(0);
				setState(1802);
				match(RP_);
				}
				break;
			case 3:
				{
				setState(1804);
				booleanPrimary(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1816);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1814);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(1807);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1808);
						logicalOperator();
						setState(1809);
						expr(6);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(1811);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1812);
						match(XOR);
						setState(1813);
						expr(5);
						}
						break;
					}
					} 
				}
				setState(1818);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(MySQLStatementParser.OR, 0); }
		public TerminalNode OR_() { return getToken(MySQLStatementParser.OR_, 0); }
		public TerminalNode AND() { return getToken(MySQLStatementParser.AND, 0); }
		public TerminalNode AND_() { return getToken(MySQLStatementParser.AND_, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_logicalOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1819);
			_la = _input.LA(1);
			if ( !(_la==AND_ || _la==OR_ || _la==AND || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotOperator_Context extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public TerminalNode NOT_() { return getToken(MySQLStatementParser.NOT_, 0); }
		public NotOperator_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notOperator_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitNotOperator_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotOperator_Context notOperator_() throws RecognitionException {
		NotOperator_Context _localctx = new NotOperator_Context(_ctx, getState());
		enterRule(_localctx, 226, RULE_notOperator_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1821);
			_la = _input.LA(1);
			if ( !(_la==NOT_ || _la==NOT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanPrimaryContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public BooleanPrimaryContext booleanPrimary() {
			return getRuleContext(BooleanPrimaryContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySQLStatementParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySQLStatementParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySQLStatementParser.UNKNOWN, 0); }
		public TerminalNode NULL() { return getToken(MySQLStatementParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public TerminalNode SAFE_EQ_() { return getToken(MySQLStatementParser.SAFE_EQ_, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySQLStatementParser.ANY, 0); }
		public BooleanPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanPrimary; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitBooleanPrimary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanPrimaryContext booleanPrimary() throws RecognitionException {
		return booleanPrimary(0);
	}

	private BooleanPrimaryContext booleanPrimary(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BooleanPrimaryContext _localctx = new BooleanPrimaryContext(_ctx, _parentState);
		BooleanPrimaryContext _prevctx = _localctx;
		int _startState = 228;
		enterRecursionRule(_localctx, 228, RULE_booleanPrimary, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1824);
			predicate();
			}
			_ctx.stop = _input.LT(-1);
			setState(1846);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,173,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1844);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
					case 1:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1826);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1827);
						match(IS);
						setState(1829);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(1828);
							match(NOT);
							}
						}

						setState(1831);
						_la = _input.LA(1);
						if ( !(((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NULL - 103)) | (1L << (TRUE - 103)) | (1L << (FALSE - 103)))) != 0) || _la==UNKNOWN) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1832);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1833);
						match(SAFE_EQ_);
						setState(1834);
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1835);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1836);
						comparisonOperator();
						setState(1837);
						predicate();
						}
						break;
					case 4:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1839);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1840);
						comparisonOperator();
						setState(1841);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1842);
						subquery();
						}
						break;
					}
					} 
				}
				setState(1848);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,173,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public TerminalNode GTE_() { return getToken(MySQLStatementParser.GTE_, 0); }
		public TerminalNode GT_() { return getToken(MySQLStatementParser.GT_, 0); }
		public TerminalNode LTE_() { return getToken(MySQLStatementParser.LTE_, 0); }
		public TerminalNode LT_() { return getToken(MySQLStatementParser.LT_, 0); }
		public TerminalNode NEQ_() { return getToken(MySQLStatementParser.NEQ_, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1849);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode BETWEEN() { return getToken(MySQLStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySQLStatementParser.AND, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode SOUNDS() { return getToken(MySQLStatementParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySQLStatementParser.LIKE, 0); }
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode ESCAPE() { return getToken(MySQLStatementParser.ESCAPE, 0); }
		public TerminalNode REGEXP() { return getToken(MySQLStatementParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(MySQLStatementParser.RLIKE, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_predicate);
		int _la;
		try {
			setState(1906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1851);
				bitExpr(0);
				setState(1853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1852);
					match(NOT);
					}
				}

				setState(1855);
				match(IN);
				setState(1856);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1858);
				bitExpr(0);
				setState(1860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1859);
					match(NOT);
					}
				}

				setState(1862);
				match(IN);
				setState(1863);
				match(LP_);
				setState(1864);
				expr(0);
				setState(1869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1865);
					match(COMMA_);
					setState(1866);
					expr(0);
					}
					}
					setState(1871);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1872);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1874);
				bitExpr(0);
				setState(1876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1875);
					match(NOT);
					}
				}

				setState(1878);
				match(BETWEEN);
				setState(1879);
				bitExpr(0);
				setState(1880);
				match(AND);
				setState(1881);
				predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1883);
				bitExpr(0);
				setState(1884);
				match(SOUNDS);
				setState(1885);
				match(LIKE);
				setState(1886);
				bitExpr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1888);
				bitExpr(0);
				setState(1890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1889);
					match(NOT);
					}
				}

				setState(1892);
				match(LIKE);
				setState(1893);
				simpleExpr(0);
				setState(1896);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
				case 1:
					{
					setState(1894);
					match(ESCAPE);
					setState(1895);
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1898);
				bitExpr(0);
				setState(1900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1899);
					match(NOT);
					}
				}

				setState(1902);
				_la = _input.LA(1);
				if ( !(_la==REGEXP || _la==RLIKE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1903);
				bitExpr(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1905);
				bitExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitExprContext extends ParserRuleContext {
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode VERTICAL_BAR_() { return getToken(MySQLStatementParser.VERTICAL_BAR_, 0); }
		public TerminalNode AMPERSAND_() { return getToken(MySQLStatementParser.AMPERSAND_, 0); }
		public TerminalNode SIGNED_LEFT_SHIFT_() { return getToken(MySQLStatementParser.SIGNED_LEFT_SHIFT_, 0); }
		public TerminalNode SIGNED_RIGHT_SHIFT_() { return getToken(MySQLStatementParser.SIGNED_RIGHT_SHIFT_, 0); }
		public TerminalNode PLUS_() { return getToken(MySQLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(MySQLStatementParser.MINUS_, 0); }
		public TerminalNode ASTERISK_() { return getToken(MySQLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(MySQLStatementParser.SLASH_, 0); }
		public TerminalNode DIV() { return getToken(MySQLStatementParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySQLStatementParser.MOD, 0); }
		public TerminalNode MOD_() { return getToken(MySQLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(MySQLStatementParser.CARET_, 0); }
		public IntervalExpressionContext intervalExpression() {
			return getRuleContext(IntervalExpressionContext.class,0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitBitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitExprContext bitExpr() throws RecognitionException {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BitExprContext _localctx = new BitExprContext(_ctx, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 234;
		enterRecursionRule(_localctx, 234, RULE_bitExpr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1909);
			simpleExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(1955);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1953);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1911);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(1912);
						match(VERTICAL_BAR_);
						setState(1913);
						bitExpr(16);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1914);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(1915);
						match(AMPERSAND_);
						setState(1916);
						bitExpr(15);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1917);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(1918);
						match(SIGNED_LEFT_SHIFT_);
						setState(1919);
						bitExpr(14);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1920);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(1921);
						match(SIGNED_RIGHT_SHIFT_);
						setState(1922);
						bitExpr(13);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1923);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(1924);
						match(PLUS_);
						setState(1925);
						bitExpr(12);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1926);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(1927);
						match(MINUS_);
						setState(1928);
						bitExpr(11);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1929);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(1930);
						match(ASTERISK_);
						setState(1931);
						bitExpr(10);
						}
						break;
					case 8:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1932);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(1933);
						match(SLASH_);
						setState(1934);
						bitExpr(9);
						}
						break;
					case 9:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1935);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(1936);
						match(DIV);
						setState(1937);
						bitExpr(8);
						}
						break;
					case 10:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1938);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(1939);
						match(MOD);
						setState(1940);
						bitExpr(7);
						}
						break;
					case 11:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1941);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1942);
						match(MOD_);
						setState(1943);
						bitExpr(6);
						}
						break;
					case 12:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1944);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1945);
						match(CARET_);
						setState(1946);
						bitExpr(5);
						}
						break;
					case 13:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1947);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1948);
						match(PLUS_);
						setState(1949);
						intervalExpression();
						}
						break;
					case 14:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1950);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1951);
						match(MINUS_);
						setState(1952);
						intervalExpression();
						}
						break;
					}
					} 
				}
				setState(1957);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleExprContext extends ParserRuleContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public LiteralsContext literals() {
			return getRuleContext(LiteralsContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode PLUS_() { return getToken(MySQLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(MySQLStatementParser.MINUS_, 0); }
		public TerminalNode TILDE_() { return getToken(MySQLStatementParser.TILDE_, 0); }
		public TerminalNode NOT_() { return getToken(MySQLStatementParser.NOT_, 0); }
		public TerminalNode BINARY() { return getToken(MySQLStatementParser.BINARY, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode ROW() { return getToken(MySQLStatementParser.ROW, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public TerminalNode LBE_() { return getToken(MySQLStatementParser.LBE_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RBE_() { return getToken(MySQLStatementParser.RBE_, 0); }
		public MatchExpression_Context matchExpression_() {
			return getRuleContext(MatchExpression_Context.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public IntervalExpressionContext intervalExpression() {
			return getRuleContext(IntervalExpressionContext.class,0);
		}
		public TerminalNode OR_() { return getToken(MySQLStatementParser.OR_, 0); }
		public TerminalNode COLLATE() { return getToken(MySQLStatementParser.COLLATE, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public SimpleExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSimpleExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleExprContext simpleExpr() throws RecognitionException {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 236;
		enterRecursionRule(_localctx, 236, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(1959);
				functionCall();
				}
				break;
			case 2:
				{
				setState(1960);
				parameterMarker();
				}
				break;
			case 3:
				{
				setState(1961);
				literals();
				}
				break;
			case 4:
				{
				setState(1962);
				columnName();
				}
				break;
			case 5:
				{
				setState(1963);
				variable();
				}
				break;
			case 6:
				{
				setState(1964);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT_) | (1L << TILDE_) | (1L << PLUS_) | (1L << MINUS_))) != 0) || _la==BINARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1965);
				simpleExpr(7);
				}
				break;
			case 7:
				{
				setState(1967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW) {
					{
					setState(1966);
					match(ROW);
					}
				}

				setState(1969);
				match(LP_);
				setState(1970);
				expr(0);
				setState(1975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1971);
					match(COMMA_);
					setState(1972);
					expr(0);
					}
					}
					setState(1977);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1978);
				match(RP_);
				}
				break;
			case 8:
				{
				setState(1981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS) {
					{
					setState(1980);
					match(EXISTS);
					}
				}

				setState(1983);
				subquery();
				}
				break;
			case 9:
				{
				setState(1984);
				match(LBE_);
				setState(1985);
				identifier();
				setState(1986);
				expr(0);
				setState(1987);
				match(RBE_);
				}
				break;
			case 10:
				{
				setState(1989);
				matchExpression_();
				}
				break;
			case 11:
				{
				setState(1990);
				caseExpression();
				}
				break;
			case 12:
				{
				setState(1991);
				intervalExpression();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2005);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2003);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
					case 1:
						{
						_localctx = new SimpleExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(1994);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(1995);
						match(OR_);
						setState(1996);
						simpleExpr(9);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(1997);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(1998);
						match(COLLATE);
						setState(2001);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING_:
							{
							setState(1999);
							match(STRING_);
							}
							break;
						case TRUNCATE:
						case POSITION:
						case VIEW:
						case ANY:
						case OFFSET:
						case BEGIN:
						case COMMIT:
						case ROLLBACK:
						case SAVEPOINT:
						case BOOLEAN:
						case DATE:
						case TIME:
						case TIMESTAMP:
						case YEAR:
						case QUARTER:
						case MONTH:
						case WEEK:
						case DAY:
						case HOUR:
						case MINUTE:
						case SECOND:
						case MICROSECOND:
						case MAX:
						case MIN:
						case SUM:
						case COUNT:
						case AVG:
						case CURRENT:
						case ENABLE:
						case DISABLE:
						case INSTANCE:
						case DO:
						case DEFINER:
						case CASCADED:
						case LOCAL:
						case CLOSE:
						case OPEN:
						case NEXT:
						case NAME:
						case TYPE:
						case TABLES:
						case TABLESPACE:
						case COLUMNS:
						case FIELDS:
						case INDEXES:
						case STATUS:
						case MODIFY:
						case VALUE:
						case DUPLICATE:
						case FIRST:
						case LAST:
						case AFTER:
						case OJ:
						case ACCOUNT:
						case USER:
						case ROLE:
						case START:
						case TRANSACTION:
						case WITHOUT:
						case ESCAPE:
						case SUBPARTITION:
						case STORAGE:
						case SUPER:
						case TEMPORARY:
						case THAN:
						case UNBOUNDED:
						case SIGNED:
						case UPGRADE:
						case VALIDATION:
						case ROLLUP:
						case SOUNDS:
						case UNKNOWN:
						case OFF:
						case ALWAYS:
						case COMMITTED:
						case LEVEL:
						case NO:
						case PASSWORD:
						case PRIVILEGES:
						case ACTION:
						case ALGORITHM:
						case AUTOCOMMIT:
						case BTREE:
						case CHAIN:
						case CHARSET:
						case CHECKSUM:
						case CIPHER:
						case CLIENT:
						case COALESCE:
						case COMMENT:
						case COMPACT:
						case COMPRESSED:
						case COMPRESSION:
						case CONNECTION:
						case CONSISTENT:
						case DATA:
						case DISCARD:
						case DISK:
						case ENCRYPTION:
						case END:
						case ENGINE:
						case EVENT:
						case EXCHANGE:
						case EXECUTE:
						case FILE:
						case FIXED:
						case FOLLOWING:
						case GLOBAL:
						case HASH:
						case IMPORT_:
						case LESS:
						case MEMORY:
						case NONE:
						case PARSER:
						case PARTIAL:
						case PARTITIONING:
						case PERSIST:
						case PRECEDING:
						case PROCESS:
						case PROXY:
						case QUICK:
						case REBUILD:
						case REDUNDANT:
						case RELOAD:
						case REMOVE:
						case REORGANIZE:
						case REPAIR:
						case REVERSE:
						case SESSION:
						case SHUTDOWN:
						case SIMPLE:
						case SLAVE:
						case VISIBLE:
						case INVISIBLE:
						case ENFORCED:
						case AGAINST:
						case LANGUAGE:
						case MODE:
						case QUERY:
						case EXTENDED:
						case EXPANSION:
						case VARIANCE:
						case MAX_ROWS:
						case MIN_ROWS:
						case SQL_BIG_RESULT:
						case SQL_BUFFER_RESULT:
						case SQL_CACHE:
						case SQL_NO_CACHE:
						case STATS_AUTO_RECALC:
						case STATS_PERSISTENT:
						case STATS_SAMPLE_PAGES:
						case ROW_FORMAT:
						case WEIGHT_STRING:
						case COLUMN_FORMAT:
						case INSERT_METHOD:
						case KEY_BLOCK_SIZE:
						case PACK_KEYS:
						case PERSIST_ONLY:
						case BIT_AND:
						case BIT_OR:
						case BIT_XOR:
						case GROUP_CONCAT:
						case JSON_ARRAYAGG:
						case JSON_OBJECTAGG:
						case STD:
						case STDDEV:
						case STDDEV_POP:
						case STDDEV_SAMP:
						case VAR_POP:
						case VAR_SAMP:
						case AUTO_INCREMENT:
						case AVG_ROW_LENGTH:
						case DELAY_KEY_WRITE:
						case ROTATE:
						case MASTER:
						case BINLOG:
						case ERROR:
						case SCHEDULE:
						case COMPLETION:
						case EVERY:
						case HOST:
						case SOCKET:
						case PORT:
						case SERVER:
						case WRAPPER:
						case OPTIONS:
						case OWNER:
						case RETURNS:
						case CONTAINS:
						case SECURITY:
						case INVOKER:
						case TEMPTABLE:
						case MERGE:
						case UNDEFINED:
						case DATAFILE:
						case FILE_BLOCK_SIZE:
						case EXTENT_SIZE:
						case INITIAL_SIZE:
						case AUTOEXTEND_SIZE:
						case MAX_SIZE:
						case NODEGROUP:
						case WAIT:
						case LOGFILE:
						case UNDOFILE:
						case UNDO_BUFFER_SIZE:
						case REDO_BUFFER_SIZE:
						case HANDLER:
						case PREV:
						case ORGANIZATION:
						case DEFINITION:
						case DESCRIPTION:
						case REFERENCE:
						case FOLLOWS:
						case PRECEDES:
						case IMPORT:
						case CONCURRENT:
						case XML:
						case DUMPFILE:
						case SHARE:
						case CODE:
						case CONTEXT:
						case SOURCE:
						case CHANNEL:
						case CLONE:
						case AGGREGATE:
						case INSTALL:
						case COMPONENT:
						case UNINSTALL:
						case RESOURCE:
						case EXPIRE:
						case NEVER:
						case HISTORY:
						case OPTIONAL:
						case REUSE:
						case MAX_QUERIES_PER_HOUR:
						case MAX_UPDATES_PER_HOUR:
						case MAX_CONNECTIONS_PER_HOUR:
						case MAX_USER_CONNECTIONS:
						case RETAIN:
						case RANDOM:
						case OLD:
						case ISSUER:
						case SUBJECT:
						case CACHE:
						case GENERAL:
						case SLOW:
						case USER_RESOURCES:
						case EXPORT:
						case RELAY:
						case HOSTS:
						case FLUSH:
						case RESET:
						case RESTART:
						case IO_THREAD:
						case SQL_THREAD:
						case SQL_BEFORE_GTIDS:
						case SQL_AFTER_GTIDS:
						case MASTER_LOG_FILE:
						case MASTER_LOG_POS:
						case RELAY_LOG_FILE:
						case RELAY_LOG_POS:
						case SQL_AFTER_MTS_GAPS:
						case UNTIL:
						case DEFAULT_AUTH:
						case PLUGIN_DIR:
						case STOP:
						case IDENTIFIER_:
							{
							setState(2000);
							identifier();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(2007);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public AggregationFunctionContext aggregationFunction() {
			return getRuleContext(AggregationFunctionContext.class,0);
		}
		public SpecialFunctionContext specialFunction() {
			return getRuleContext(SpecialFunctionContext.class,0);
		}
		public RegularFunctionContext regularFunction() {
			return getRuleContext(RegularFunctionContext.class,0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_functionCall);
		try {
			setState(2011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2008);
				aggregationFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2009);
				specialFunction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2010);
				regularFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregationFunctionContext extends ParserRuleContext {
		public AggregationFunctionNameContext aggregationFunctionName() {
			return getRuleContext(AggregationFunctionNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public DistinctContext distinct() {
			return getRuleContext(DistinctContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ASTERISK_() { return getToken(MySQLStatementParser.ASTERISK_, 0); }
		public OverClause_Context overClause_() {
			return getRuleContext(OverClause_Context.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public AggregationFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAggregationFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationFunctionContext aggregationFunction() throws RecognitionException {
		AggregationFunctionContext _localctx = new AggregationFunctionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_aggregationFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2013);
			aggregationFunctionName();
			setState(2014);
			match(LP_);
			setState(2016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISTINCT) {
				{
				setState(2015);
				distinct();
				}
			}

			setState(2027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case VALUES:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case LEFT:
			case RIGHT:
			case IF:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case CHAR:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case DATABASE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case REPLACE:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case MOD:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case ROW:
			case WITHOUT:
			case BINARY:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case SUBSTR:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case CONVERT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case EXTRACT:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MATCH:
			case MEMORY:
			case NONE:
			case NOW:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case CURRENT_TIMESTAMP:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case UNIX_TIMESTAMP:
			case LOWER:
			case UPPER:
			case ADDDATE:
			case ADDTIME:
			case DATE_ADD:
			case DATE_SUB:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case STR_TO_DATE:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case FROM_BASE64:
			case TO_BASE64:
			case GEOMCOLLECTION:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASGEOJSON:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_BUFFER_STRATEGY:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CONVEXHULL:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_DISTANCE_SPHERE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOHASH:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMGEOJSON:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_ISVALID:
			case ST_LATFROMGEOHASH:
			case ST_LATITUDE:
			case ST_LENGTH:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_LONGFROMGEOHASH:
			case ST_LONGITUDE:
			case ST_MAKEENVELOPE:
			case ST_MLINEFROMTEXT:
			case ST_MLINEFROMWKB:
			case ST_MULTILINESTRINGFROMTEXT:
			case ST_MULTILINESTRINGFROMWKB:
			case ST_MPOINTFROMTEXT:
			case ST_MPOINTFROMWKB:
			case ST_MULTIPOINTFROMTEXT:
			case ST_MULTIPOINTFROMWKB:
			case ST_MPOLYFROMTEXT:
			case ST_MPOLYFROMWKB:
			case ST_MULTIPOLYGONFROMTEXT:
			case ST_MULTIPOLYGONFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMGEOHASH:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SIMPLIFY:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SWAPXY:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_TRANSFORM:
			case ST_UNION:
			case ST_VALIDATE:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				{
				setState(2018);
				expr(0);
				setState(2023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2019);
					match(COMMA_);
					setState(2020);
					expr(0);
					}
					}
					setState(2025);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ASTERISK_:
				{
				setState(2026);
				match(ASTERISK_);
				}
				break;
			case RP_:
				break;
			default:
				break;
			}
			setState(2029);
			match(RP_);
			setState(2031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2030);
				overClause_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregationFunctionNameContext extends ParserRuleContext {
		public TerminalNode MAX() { return getToken(MySQLStatementParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySQLStatementParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySQLStatementParser.SUM, 0); }
		public TerminalNode COUNT() { return getToken(MySQLStatementParser.COUNT, 0); }
		public TerminalNode AVG() { return getToken(MySQLStatementParser.AVG, 0); }
		public TerminalNode BIT_AND() { return getToken(MySQLStatementParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySQLStatementParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySQLStatementParser.BIT_XOR, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(MySQLStatementParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(MySQLStatementParser.JSON_OBJECTAGG, 0); }
		public TerminalNode STD() { return getToken(MySQLStatementParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySQLStatementParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySQLStatementParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySQLStatementParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySQLStatementParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySQLStatementParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySQLStatementParser.VARIANCE, 0); }
		public AggregationFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationFunctionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAggregationFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationFunctionNameContext aggregationFunctionName() throws RecognitionException {
		AggregationFunctionNameContext _localctx = new AggregationFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_aggregationFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2033);
			_la = _input.LA(1);
			if ( !(((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (MAX - 144)) | (1L << (MIN - 144)) | (1L << (SUM - 144)) | (1L << (COUNT - 144)) | (1L << (AVG - 144)))) != 0) || ((((_la - 355)) & ~0x3f) == 0 && ((1L << (_la - 355)) & ((1L << (VARIANCE - 355)) | (1L << (BIT_AND - 355)) | (1L << (BIT_OR - 355)) | (1L << (BIT_XOR - 355)) | (1L << (JSON_ARRAYAGG - 355)) | (1L << (JSON_OBJECTAGG - 355)) | (1L << (STD - 355)) | (1L << (STDDEV - 355)) | (1L << (STDDEV_POP - 355)) | (1L << (STDDEV_SAMP - 355)) | (1L << (VAR_POP - 355)) | (1L << (VAR_SAMP - 355)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(MySQLStatementParser.DISTINCT, 0); }
		public DistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctContext distinct() throws RecognitionException {
		DistinctContext _localctx = new DistinctContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2035);
			match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClause_Context extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MySQLStatementParser.OVER, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public WindowSpecification_Context windowSpecification_() {
			return getRuleContext(WindowSpecification_Context.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OverClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitOverClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClause_Context overClause_() throws RecognitionException {
		OverClause_Context _localctx = new OverClause_Context(_ctx, getState());
		enterRule(_localctx, 246, RULE_overClause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2037);
			match(OVER);
			setState(2043);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				{
				setState(2038);
				match(LP_);
				setState(2039);
				windowSpecification_();
				setState(2040);
				match(RP_);
				}
				break;
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case WITHOUT:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MEMORY:
			case NONE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
				{
				setState(2042);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecification_Context extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PartitionClause_Context partitionClause_() {
			return getRuleContext(PartitionClause_Context.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClause_Context frameClause_() {
			return getRuleContext(FrameClause_Context.class,0);
		}
		public WindowSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecification_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitWindowSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecification_Context windowSpecification_() throws RecognitionException {
		WindowSpecification_Context _localctx = new WindowSpecification_Context(_ctx, getState());
		enterRule(_localctx, 248, RULE_windowSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
				{
				setState(2045);
				identifier();
				}
			}

			setState(2049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2048);
				partitionClause_();
				}
			}

			setState(2052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2051);
				orderByClause();
				}
			}

			setState(2055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS || _la==RANGE) {
				{
				setState(2054);
				frameClause_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClause_Context extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public PartitionClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPartitionClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClause_Context partitionClause_() throws RecognitionException {
		PartitionClause_Context _localctx = new PartitionClause_Context(_ctx, getState());
		enterRule(_localctx, 250, RULE_partitionClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2057);
			match(PARTITION);
			setState(2058);
			match(BY);
			setState(2059);
			expr(0);
			setState(2064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2060);
				match(COMMA_);
				setState(2061);
				expr(0);
				}
				}
				setState(2066);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClause_Context extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(MySQLStatementParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MySQLStatementParser.RANGE, 0); }
		public FrameStart_Context frameStart_() {
			return getRuleContext(FrameStart_Context.class,0);
		}
		public FrameBetween_Context frameBetween_() {
			return getRuleContext(FrameBetween_Context.class,0);
		}
		public FrameClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFrameClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClause_Context frameClause_() throws RecognitionException {
		FrameClause_Context _localctx = new FrameClause_Context(_ctx, getState());
		enterRule(_localctx, 252, RULE_frameClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2067);
			_la = _input.LA(1);
			if ( !(_la==ROWS || _la==RANGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2070);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case VALUES:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case LEFT:
			case RIGHT:
			case IF:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case CHAR:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case DATABASE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case REPLACE:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case MOD:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case ROW:
			case WITHOUT:
			case BINARY:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case SUBSTR:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case CONVERT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case EXTRACT:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MATCH:
			case MEMORY:
			case NONE:
			case NOW:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case CURRENT_TIMESTAMP:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case UNIX_TIMESTAMP:
			case LOWER:
			case UPPER:
			case ADDDATE:
			case ADDTIME:
			case DATE_ADD:
			case DATE_SUB:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case STR_TO_DATE:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case FROM_BASE64:
			case TO_BASE64:
			case GEOMCOLLECTION:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASGEOJSON:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_BUFFER_STRATEGY:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CONVEXHULL:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_DISTANCE_SPHERE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOHASH:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMGEOJSON:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_ISVALID:
			case ST_LATFROMGEOHASH:
			case ST_LATITUDE:
			case ST_LENGTH:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_LONGFROMGEOHASH:
			case ST_LONGITUDE:
			case ST_MAKEENVELOPE:
			case ST_MLINEFROMTEXT:
			case ST_MLINEFROMWKB:
			case ST_MULTILINESTRINGFROMTEXT:
			case ST_MULTILINESTRINGFROMWKB:
			case ST_MPOINTFROMTEXT:
			case ST_MPOINTFROMWKB:
			case ST_MULTIPOINTFROMTEXT:
			case ST_MULTIPOINTFROMWKB:
			case ST_MPOLYFROMTEXT:
			case ST_MPOLYFROMWKB:
			case ST_MULTIPOLYGONFROMTEXT:
			case ST_MULTIPOLYGONFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMGEOHASH:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SIMPLIFY:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SWAPXY:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_TRANSFORM:
			case ST_UNION:
			case ST_VALIDATE:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				{
				setState(2068);
				frameStart_();
				}
				break;
			case BETWEEN:
				{
				setState(2069);
				frameBetween_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameStart_Context extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(MySQLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MySQLStatementParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySQLStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MySQLStatementParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(MySQLStatementParser.FOLLOWING, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public FrameStart_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameStart_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFrameStart_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameStart_Context frameStart_() throws RecognitionException {
		FrameStart_Context _localctx = new FrameStart_Context(_ctx, getState());
		enterRule(_localctx, 254, RULE_frameStart_);
		try {
			setState(2084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2072);
				match(CURRENT);
				setState(2073);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2074);
				match(UNBOUNDED);
				setState(2075);
				match(PRECEDING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2076);
				match(UNBOUNDED);
				setState(2077);
				match(FOLLOWING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2078);
				expr(0);
				setState(2079);
				match(PRECEDING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2081);
				expr(0);
				setState(2082);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameEnd_Context extends ParserRuleContext {
		public FrameStart_Context frameStart_() {
			return getRuleContext(FrameStart_Context.class,0);
		}
		public FrameEnd_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameEnd_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFrameEnd_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameEnd_Context frameEnd_() throws RecognitionException {
		FrameEnd_Context _localctx = new FrameEnd_Context(_ctx, getState());
		enterRule(_localctx, 256, RULE_frameEnd_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2086);
			frameStart_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBetween_Context extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(MySQLStatementParser.BETWEEN, 0); }
		public FrameStart_Context frameStart_() {
			return getRuleContext(FrameStart_Context.class,0);
		}
		public TerminalNode AND() { return getToken(MySQLStatementParser.AND, 0); }
		public FrameEnd_Context frameEnd_() {
			return getRuleContext(FrameEnd_Context.class,0);
		}
		public FrameBetween_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFrameBetween_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBetween_Context frameBetween_() throws RecognitionException {
		FrameBetween_Context _localctx = new FrameBetween_Context(_ctx, getState());
		enterRule(_localctx, 258, RULE_frameBetween_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2088);
			match(BETWEEN);
			setState(2089);
			frameStart_();
			setState(2090);
			match(AND);
			setState(2091);
			frameEnd_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecialFunctionContext extends ParserRuleContext {
		public GroupConcatFunctionContext groupConcatFunction() {
			return getRuleContext(GroupConcatFunctionContext.class,0);
		}
		public WindowFunctionContext windowFunction() {
			return getRuleContext(WindowFunctionContext.class,0);
		}
		public CastFunctionContext castFunction() {
			return getRuleContext(CastFunctionContext.class,0);
		}
		public ConvertFunctionContext convertFunction() {
			return getRuleContext(ConvertFunctionContext.class,0);
		}
		public PositionFunctionContext positionFunction() {
			return getRuleContext(PositionFunctionContext.class,0);
		}
		public SubstringFunctionContext substringFunction() {
			return getRuleContext(SubstringFunctionContext.class,0);
		}
		public ExtractFunctionContext extractFunction() {
			return getRuleContext(ExtractFunctionContext.class,0);
		}
		public CharFunctionContext charFunction() {
			return getRuleContext(CharFunctionContext.class,0);
		}
		public TrimFunction_Context trimFunction_() {
			return getRuleContext(TrimFunction_Context.class,0);
		}
		public WeightStringFunctionContext weightStringFunction() {
			return getRuleContext(WeightStringFunctionContext.class,0);
		}
		public ValuesFunction_Context valuesFunction_() {
			return getRuleContext(ValuesFunction_Context.class,0);
		}
		public SpecialFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specialFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSpecialFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecialFunctionContext specialFunction() throws RecognitionException {
		SpecialFunctionContext _localctx = new SpecialFunctionContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_specialFunction);
		try {
			setState(2104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2093);
				groupConcatFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2094);
				windowFunction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2095);
				castFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2096);
				convertFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2097);
				positionFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2098);
				substringFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2099);
				extractFunction();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2100);
				charFunction();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2101);
				trimFunction_();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2102);
				weightStringFunction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2103);
				valuesFunction_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupConcatFunctionContext extends ParserRuleContext {
		public TerminalNode GROUP_CONCAT() { return getToken(MySQLStatementParser.GROUP_CONCAT, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public DistinctContext distinct() {
			return getRuleContext(DistinctContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ASTERISK_() { return getToken(MySQLStatementParser.ASTERISK_, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode SEPARATOR() { return getToken(MySQLStatementParser.SEPARATOR, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public GroupConcatFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupConcatFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitGroupConcatFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupConcatFunctionContext groupConcatFunction() throws RecognitionException {
		GroupConcatFunctionContext _localctx = new GroupConcatFunctionContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_groupConcatFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2106);
			match(GROUP_CONCAT);
			setState(2107);
			match(LP_);
			setState(2109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISTINCT) {
				{
				setState(2108);
				distinct();
				}
			}

			setState(2120);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case VALUES:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case LEFT:
			case RIGHT:
			case IF:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case CHAR:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case DATABASE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case REPLACE:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case MOD:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case ROW:
			case WITHOUT:
			case BINARY:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case SUBSTR:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case CONVERT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case EXTRACT:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MATCH:
			case MEMORY:
			case NONE:
			case NOW:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case CURRENT_TIMESTAMP:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case UNIX_TIMESTAMP:
			case LOWER:
			case UPPER:
			case ADDDATE:
			case ADDTIME:
			case DATE_ADD:
			case DATE_SUB:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case STR_TO_DATE:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case FROM_BASE64:
			case TO_BASE64:
			case GEOMCOLLECTION:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASGEOJSON:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_BUFFER_STRATEGY:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CONVEXHULL:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_DISTANCE_SPHERE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOHASH:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMGEOJSON:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_ISVALID:
			case ST_LATFROMGEOHASH:
			case ST_LATITUDE:
			case ST_LENGTH:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_LONGFROMGEOHASH:
			case ST_LONGITUDE:
			case ST_MAKEENVELOPE:
			case ST_MLINEFROMTEXT:
			case ST_MLINEFROMWKB:
			case ST_MULTILINESTRINGFROMTEXT:
			case ST_MULTILINESTRINGFROMWKB:
			case ST_MPOINTFROMTEXT:
			case ST_MPOINTFROMWKB:
			case ST_MULTIPOINTFROMTEXT:
			case ST_MULTIPOINTFROMWKB:
			case ST_MPOLYFROMTEXT:
			case ST_MPOLYFROMWKB:
			case ST_MULTIPOLYGONFROMTEXT:
			case ST_MULTIPOLYGONFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMGEOHASH:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SIMPLIFY:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SWAPXY:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_TRANSFORM:
			case ST_UNION:
			case ST_VALIDATE:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				{
				setState(2111);
				expr(0);
				setState(2116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2112);
					match(COMMA_);
					setState(2113);
					expr(0);
					}
					}
					setState(2118);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ASTERISK_:
				{
				setState(2119);
				match(ASTERISK_);
				}
				break;
			case RP_:
			case ORDER:
			case SEPARATOR:
				break;
			default:
				break;
			}
			setState(2123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2122);
				orderByClause();
				}
			}

			setState(2127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEPARATOR) {
				{
				setState(2125);
				match(SEPARATOR);
				setState(2126);
				expr(0);
				}
			}

			setState(2129);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public OverClause_Context overClause_() {
			return getRuleContext(OverClause_Context.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public WindowFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitWindowFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionContext windowFunction() throws RecognitionException {
		WindowFunctionContext _localctx = new WindowFunctionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_windowFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2131);
			identifier();
			setState(2132);
			match(LP_);
			setState(2133);
			expr(0);
			setState(2138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2134);
				match(COMMA_);
				setState(2135);
				expr(0);
				}
				}
				setState(2140);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2141);
			match(RP_);
			setState(2142);
			overClause_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastFunctionContext extends ParserRuleContext {
		public TerminalNode CAST() { return getToken(MySQLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public CastFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCastFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastFunctionContext castFunction() throws RecognitionException {
		CastFunctionContext _localctx = new CastFunctionContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_castFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2144);
			match(CAST);
			setState(2145);
			match(LP_);
			setState(2146);
			expr(0);
			setState(2147);
			match(AS);
			setState(2148);
			dataType();
			setState(2149);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertFunctionContext extends ParserRuleContext {
		public TerminalNode CONVERT() { return getToken(MySQLStatementParser.CONVERT, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode USING() { return getToken(MySQLStatementParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConvertFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitConvertFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertFunctionContext convertFunction() throws RecognitionException {
		ConvertFunctionContext _localctx = new ConvertFunctionContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_convertFunction);
		try {
			setState(2165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2151);
				match(CONVERT);
				setState(2152);
				match(LP_);
				setState(2153);
				expr(0);
				setState(2154);
				match(COMMA_);
				setState(2155);
				dataType();
				setState(2156);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2158);
				match(CONVERT);
				setState(2159);
				match(LP_);
				setState(2160);
				expr(0);
				setState(2161);
				match(USING);
				setState(2162);
				identifier();
				setState(2163);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionFunctionContext extends ParserRuleContext {
		public TerminalNode POSITION() { return getToken(MySQLStatementParser.POSITION, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public PositionFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPositionFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionFunctionContext positionFunction() throws RecognitionException {
		PositionFunctionContext _localctx = new PositionFunctionContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_positionFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2167);
			match(POSITION);
			setState(2168);
			match(LP_);
			setState(2169);
			expr(0);
			setState(2170);
			match(IN);
			setState(2171);
			expr(0);
			setState(2172);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstringFunctionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySQLStatementParser.SUBSTRING, 0); }
		public TerminalNode SUBSTR() { return getToken(MySQLStatementParser.SUBSTR, 0); }
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substringFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSubstringFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstringFunctionContext substringFunction() throws RecognitionException {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_substringFunction);
		int _la;
		try {
			setState(2196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2174);
				_la = _input.LA(1);
				if ( !(_la==SUBSTRING || _la==SUBSTR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2175);
				match(LP_);
				setState(2176);
				expr(0);
				setState(2177);
				match(FROM);
				setState(2178);
				match(NUMBER_);
				setState(2181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2179);
					match(FOR);
					setState(2180);
					match(NUMBER_);
					}
				}

				setState(2183);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2185);
				_la = _input.LA(1);
				if ( !(_la==SUBSTRING || _la==SUBSTR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2186);
				match(LP_);
				setState(2187);
				expr(0);
				setState(2188);
				match(COMMA_);
				setState(2189);
				match(NUMBER_);
				setState(2192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(2190);
					match(COMMA_);
					setState(2191);
					match(NUMBER_);
					}
				}

				setState(2194);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractFunctionContext extends ParserRuleContext {
		public TerminalNode EXTRACT() { return getToken(MySQLStatementParser.EXTRACT, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public ExtractFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitExtractFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractFunctionContext extractFunction() throws RecognitionException {
		ExtractFunctionContext _localctx = new ExtractFunctionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_extractFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2198);
			match(EXTRACT);
			setState(2199);
			match(LP_);
			setState(2200);
			identifier();
			setState(2201);
			match(FROM);
			setState(2202);
			expr(0);
			setState(2203);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharFunctionContext extends ParserRuleContext {
		public TerminalNode CHAR() { return getToken(MySQLStatementParser.CHAR, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode USING() { return getToken(MySQLStatementParser.USING, 0); }
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public CharFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCharFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharFunctionContext charFunction() throws RecognitionException {
		CharFunctionContext _localctx = new CharFunctionContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_charFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2205);
			match(CHAR);
			setState(2206);
			match(LP_);
			setState(2207);
			expr(0);
			setState(2212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2208);
				match(COMMA_);
				setState(2209);
				expr(0);
				}
				}
				setState(2214);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2215);
				match(USING);
				setState(2216);
				ignoredIdentifier_();
				}
			}

			setState(2219);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimFunction_Context extends ParserRuleContext {
		public TerminalNode TRIM() { return getToken(MySQLStatementParser.TRIM, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode LEADING() { return getToken(MySQLStatementParser.LEADING, 0); }
		public TerminalNode BOTH() { return getToken(MySQLStatementParser.BOTH, 0); }
		public TerminalNode TRAILING() { return getToken(MySQLStatementParser.TRAILING, 0); }
		public TrimFunction_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTrimFunction_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimFunction_Context trimFunction_() throws RecognitionException {
		TrimFunction_Context _localctx = new TrimFunction_Context(_ctx, getState());
		enterRule(_localctx, 278, RULE_trimFunction_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2221);
			match(TRIM);
			setState(2222);
			match(LP_);
			setState(2223);
			_la = _input.LA(1);
			if ( !(_la==TRAILING || _la==BOTH || _la==LEADING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2224);
			match(STRING_);
			setState(2225);
			match(FROM);
			setState(2226);
			match(STRING_);
			setState(2227);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesFunction_Context extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(MySQLStatementParser.VALUES, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public ValuesFunction_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesFunction_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitValuesFunction_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesFunction_Context valuesFunction_() throws RecognitionException {
		ValuesFunction_Context _localctx = new ValuesFunction_Context(_ctx, getState());
		enterRule(_localctx, 280, RULE_valuesFunction_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2229);
			match(VALUES);
			setState(2230);
			match(LP_);
			setState(2231);
			columnName();
			setState(2232);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringFunctionContext extends ParserRuleContext {
		public TerminalNode WEIGHT_STRING() { return getToken(MySQLStatementParser.WEIGHT_STRING, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public LevelClause_Context levelClause_() {
			return getRuleContext(LevelClause_Context.class,0);
		}
		public WeightStringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitWeightStringFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WeightStringFunctionContext weightStringFunction() throws RecognitionException {
		WeightStringFunctionContext _localctx = new WeightStringFunctionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_weightStringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2234);
			match(WEIGHT_STRING);
			setState(2235);
			match(LP_);
			setState(2236);
			expr(0);
			setState(2239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2237);
				match(AS);
				setState(2238);
				dataType();
				}
			}

			setState(2242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEVEL) {
				{
				setState(2241);
				levelClause_();
				}
			}

			setState(2244);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelClause_Context extends ParserRuleContext {
		public TerminalNode LEVEL() { return getToken(MySQLStatementParser.LEVEL, 0); }
		public List<LevelInWeightListElement_Context> levelInWeightListElement_() {
			return getRuleContexts(LevelInWeightListElement_Context.class);
		}
		public LevelInWeightListElement_Context levelInWeightListElement_(int i) {
			return getRuleContext(LevelInWeightListElement_Context.class,i);
		}
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public TerminalNode MINUS_() { return getToken(MySQLStatementParser.MINUS_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public LevelClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLevelClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelClause_Context levelClause_() throws RecognitionException {
		LevelClause_Context _localctx = new LevelClause_Context(_ctx, getState());
		enterRule(_localctx, 284, RULE_levelClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2246);
			match(LEVEL);
			setState(2258);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				setState(2247);
				levelInWeightListElement_();
				setState(2252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2248);
					match(COMMA_);
					setState(2249);
					levelInWeightListElement_();
					}
					}
					setState(2254);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(2255);
				match(NUMBER_);
				setState(2256);
				match(MINUS_);
				setState(2257);
				match(NUMBER_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElement_Context extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode REVERSE() { return getToken(MySQLStatementParser.REVERSE, 0); }
		public TerminalNode ASC() { return getToken(MySQLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySQLStatementParser.DESC, 0); }
		public LevelInWeightListElement_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLevelInWeightListElement_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElement_Context levelInWeightListElement_() throws RecognitionException {
		LevelInWeightListElement_Context _localctx = new LevelInWeightListElement_Context(_ctx, getState());
		enterRule(_localctx, 286, RULE_levelInWeightListElement_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2260);
			match(NUMBER_);
			setState(2262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2261);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REVERSE) {
				{
				setState(2264);
				match(REVERSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegularFunctionContext extends ParserRuleContext {
		public RegularFunctionName_Context regularFunctionName_() {
			return getRuleContext(RegularFunctionName_Context.class,0);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ASTERISK_() { return getToken(MySQLStatementParser.ASTERISK_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public RegularFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regularFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRegularFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegularFunctionContext regularFunction() throws RecognitionException {
		RegularFunctionContext _localctx = new RegularFunctionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_regularFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2267);
			regularFunctionName_();
			setState(2268);
			match(LP_);
			setState(2278);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case VALUES:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case LEFT:
			case RIGHT:
			case IF:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case CHAR:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case DATABASE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case REPLACE:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case MOD:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case ROW:
			case WITHOUT:
			case BINARY:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case SUBSTR:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case CONVERT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case EXTRACT:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MATCH:
			case MEMORY:
			case NONE:
			case NOW:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case CURRENT_TIMESTAMP:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case UNIX_TIMESTAMP:
			case LOWER:
			case UPPER:
			case ADDDATE:
			case ADDTIME:
			case DATE_ADD:
			case DATE_SUB:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case STR_TO_DATE:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case FROM_BASE64:
			case TO_BASE64:
			case GEOMCOLLECTION:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASGEOJSON:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_BUFFER_STRATEGY:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CONVEXHULL:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_DISTANCE_SPHERE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOHASH:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMGEOJSON:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_ISVALID:
			case ST_LATFROMGEOHASH:
			case ST_LATITUDE:
			case ST_LENGTH:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_LONGFROMGEOHASH:
			case ST_LONGITUDE:
			case ST_MAKEENVELOPE:
			case ST_MLINEFROMTEXT:
			case ST_MLINEFROMWKB:
			case ST_MULTILINESTRINGFROMTEXT:
			case ST_MULTILINESTRINGFROMWKB:
			case ST_MPOINTFROMTEXT:
			case ST_MPOINTFROMWKB:
			case ST_MULTIPOINTFROMTEXT:
			case ST_MULTIPOINTFROMWKB:
			case ST_MPOLYFROMTEXT:
			case ST_MPOLYFROMWKB:
			case ST_MULTIPOLYGONFROMTEXT:
			case ST_MULTIPOLYGONFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMGEOHASH:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SIMPLIFY:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SWAPXY:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_TRANSFORM:
			case ST_UNION:
			case ST_VALIDATE:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				{
				setState(2269);
				expr(0);
				setState(2274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2270);
					match(COMMA_);
					setState(2271);
					expr(0);
					}
					}
					setState(2276);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ASTERISK_:
				{
				setState(2277);
				match(ASTERISK_);
				}
				break;
			case RP_:
				break;
			default:
				break;
			}
			setState(2280);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegularFunctionName_Context extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySQLStatementParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySQLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySQLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOW() { return getToken(MySQLStatementParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(MySQLStatementParser.REPLACE, 0); }
		public TerminalNode INTERVAL() { return getToken(MySQLStatementParser.INTERVAL, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySQLStatementParser.SUBSTRING, 0); }
		public TerminalNode MOD() { return getToken(MySQLStatementParser.MOD, 0); }
		public TerminalNode DATABASE() { return getToken(MySQLStatementParser.DATABASE, 0); }
		public TerminalNode LEFT() { return getToken(MySQLStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySQLStatementParser.RIGHT, 0); }
		public TerminalNode LOWER() { return getToken(MySQLStatementParser.LOWER, 0); }
		public TerminalNode UPPER() { return getToken(MySQLStatementParser.UPPER, 0); }
		public TerminalNode DATE() { return getToken(MySQLStatementParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySQLStatementParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySQLStatementParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySQLStatementParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySQLStatementParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySQLStatementParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySQLStatementParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySQLStatementParser.DAYOFYEAR, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(MySQLStatementParser.GEOMCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySQLStatementParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySQLStatementParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySQLStatementParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySQLStatementParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySQLStatementParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySQLStatementParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySQLStatementParser.POLYGON, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySQLStatementParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySQLStatementParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySQLStatementParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASGEOJSON() { return getToken(MySQLStatementParser.ST_ASGEOJSON, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySQLStatementParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySQLStatementParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySQLStatementParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySQLStatementParser.ST_BUFFER, 0); }
		public TerminalNode ST_BUFFER_STRATEGY() { return getToken(MySQLStatementParser.ST_BUFFER_STRATEGY, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySQLStatementParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySQLStatementParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CONVEXHULL() { return getToken(MySQLStatementParser.ST_CONVEXHULL, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySQLStatementParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySQLStatementParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySQLStatementParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySQLStatementParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySQLStatementParser.ST_DISTANCE, 0); }
		public TerminalNode ST_DISTANCE_SPHERE() { return getToken(MySQLStatementParser.ST_DISTANCE_SPHERE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySQLStatementParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySQLStatementParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySQLStatementParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySQLStatementParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOHASH() { return getToken(MySQLStatementParser.ST_GEOHASH, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySQLStatementParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySQLStatementParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySQLStatementParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySQLStatementParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySQLStatementParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySQLStatementParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySQLStatementParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySQLStatementParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySQLStatementParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMGEOJSON() { return getToken(MySQLStatementParser.ST_GEOMFROMGEOJSON, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySQLStatementParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySQLStatementParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySQLStatementParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySQLStatementParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySQLStatementParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySQLStatementParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySQLStatementParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySQLStatementParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_ISVALID() { return getToken(MySQLStatementParser.ST_ISVALID, 0); }
		public TerminalNode ST_LATFROMGEOHASH() { return getToken(MySQLStatementParser.ST_LATFROMGEOHASH, 0); }
		public TerminalNode ST_LATITUDE() { return getToken(MySQLStatementParser.ST_LATITUDE, 0); }
		public TerminalNode ST_LENGTH() { return getToken(MySQLStatementParser.ST_LENGTH, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySQLStatementParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySQLStatementParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySQLStatementParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySQLStatementParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_LONGFROMGEOHASH() { return getToken(MySQLStatementParser.ST_LONGFROMGEOHASH, 0); }
		public TerminalNode ST_LONGITUDE() { return getToken(MySQLStatementParser.ST_LONGITUDE, 0); }
		public TerminalNode ST_MAKEENVELOPE() { return getToken(MySQLStatementParser.ST_MAKEENVELOPE, 0); }
		public TerminalNode ST_MLINEFROMTEXT() { return getToken(MySQLStatementParser.ST_MLINEFROMTEXT, 0); }
		public TerminalNode ST_MLINEFROMWKB() { return getToken(MySQLStatementParser.ST_MLINEFROMWKB, 0); }
		public TerminalNode ST_MULTILINESTRINGFROMTEXT() { return getToken(MySQLStatementParser.ST_MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_MULTILINESTRINGFROMWKB() { return getToken(MySQLStatementParser.ST_MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode ST_MPOINTFROMTEXT() { return getToken(MySQLStatementParser.ST_MPOINTFROMTEXT, 0); }
		public TerminalNode ST_MPOINTFROMWKB() { return getToken(MySQLStatementParser.ST_MPOINTFROMWKB, 0); }
		public TerminalNode ST_MULTIPOINTFROMTEXT() { return getToken(MySQLStatementParser.ST_MULTIPOINTFROMTEXT, 0); }
		public TerminalNode ST_MULTIPOINTFROMWKB() { return getToken(MySQLStatementParser.ST_MULTIPOINTFROMWKB, 0); }
		public TerminalNode ST_MPOLYFROMTEXT() { return getToken(MySQLStatementParser.ST_MPOLYFROMTEXT, 0); }
		public TerminalNode ST_MPOLYFROMWKB() { return getToken(MySQLStatementParser.ST_MPOLYFROMWKB, 0); }
		public TerminalNode ST_MULTIPOLYGONFROMTEXT() { return getToken(MySQLStatementParser.ST_MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode ST_MULTIPOLYGONFROMWKB() { return getToken(MySQLStatementParser.ST_MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySQLStatementParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySQLStatementParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySQLStatementParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySQLStatementParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySQLStatementParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMGEOHASH() { return getToken(MySQLStatementParser.ST_POINTFROMGEOHASH, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySQLStatementParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySQLStatementParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySQLStatementParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySQLStatementParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySQLStatementParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySQLStatementParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySQLStatementParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SIMPLIFY() { return getToken(MySQLStatementParser.ST_SIMPLIFY, 0); }
		public TerminalNode ST_SRID() { return getToken(MySQLStatementParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySQLStatementParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SWAPXY() { return getToken(MySQLStatementParser.ST_SWAPXY, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySQLStatementParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySQLStatementParser.ST_TOUCHES, 0); }
		public TerminalNode ST_TRANSFORM() { return getToken(MySQLStatementParser.ST_TRANSFORM, 0); }
		public TerminalNode ST_UNION() { return getToken(MySQLStatementParser.ST_UNION, 0); }
		public TerminalNode ST_VALIDATE() { return getToken(MySQLStatementParser.ST_VALIDATE, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySQLStatementParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySQLStatementParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySQLStatementParser.ST_Y, 0); }
		public TerminalNode TIME() { return getToken(MySQLStatementParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySQLStatementParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySQLStatementParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySQLStatementParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySQLStatementParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySQLStatementParser.TIME_TO_SEC, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySQLStatementParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySQLStatementParser.AES_ENCRYPT, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySQLStatementParser.FROM_BASE64, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySQLStatementParser.TO_BASE64, 0); }
		public TerminalNode ADDDATE() { return getToken(MySQLStatementParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySQLStatementParser.ADDTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySQLStatementParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySQLStatementParser.DATE_SUB, 0); }
		public RegularFunctionName_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regularFunctionName_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRegularFunctionName_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegularFunctionName_Context regularFunctionName_() throws RecognitionException {
		RegularFunctionName_Context _localctx = new RegularFunctionName_Context(_ctx, getState());
		enterRule(_localctx, 290, RULE_regularFunctionName_);
		try {
			setState(2420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2282);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2283);
				match(IF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2284);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2285);
				match(UNIX_TIMESTAMP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2286);
				match(LOCALTIME);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2287);
				match(LOCALTIMESTAMP);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2288);
				match(NOW);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2289);
				match(REPLACE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2290);
				match(INTERVAL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2291);
				match(SUBSTRING);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2292);
				match(MOD);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2293);
				match(DATABASE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2294);
				match(LEFT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2295);
				match(RIGHT);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2296);
				match(LOWER);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2297);
				match(UPPER);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2298);
				match(DATE);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2299);
				match(DATEDIFF);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2300);
				match(DATE_FORMAT);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2301);
				match(DAY);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2302);
				match(DAYNAME);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2303);
				match(DAYOFMONTH);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2304);
				match(DAYOFWEEK);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2305);
				match(DAYOFYEAR);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2306);
				match(GEOMCOLLECTION);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2307);
				match(GEOMETRYCOLLECTION);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2308);
				match(LINESTRING);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2309);
				match(MULTILINESTRING);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2310);
				match(MULTIPOINT);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2311);
				match(MULTIPOLYGON);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2312);
				match(POINT);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2313);
				match(POLYGON);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2314);
				match(STR_TO_DATE);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2315);
				match(ST_AREA);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2316);
				match(ST_ASBINARY);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2317);
				match(ST_ASGEOJSON);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2318);
				match(ST_ASTEXT);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2319);
				match(ST_ASWKB);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2320);
				match(ST_ASWKT);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2321);
				match(ST_BUFFER);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2322);
				match(ST_BUFFER_STRATEGY);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2323);
				match(ST_CENTROID);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2324);
				match(ST_CONTAINS);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2325);
				match(ST_CONVEXHULL);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(2326);
				match(ST_CROSSES);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(2327);
				match(ST_DIFFERENCE);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(2328);
				match(ST_DIMENSION);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(2329);
				match(ST_DISJOINT);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(2330);
				match(ST_DISTANCE);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(2331);
				match(ST_DISTANCE_SPHERE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(2332);
				match(ST_ENDPOINT);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(2333);
				match(ST_ENVELOPE);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(2334);
				match(ST_EQUALS);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(2335);
				match(ST_EXTERIORRING);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(2336);
				match(ST_GEOHASH);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(2337);
				match(ST_GEOMCOLLFROMTEXT);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(2338);
				match(ST_GEOMCOLLFROMTXT);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(2339);
				match(ST_GEOMCOLLFROMWKB);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(2340);
				match(ST_GEOMETRYCOLLECTIONFROMTEXT);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(2341);
				match(ST_GEOMETRYCOLLECTIONFROMWKB);
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(2342);
				match(ST_GEOMETRYFROMTEXT);
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(2343);
				match(ST_GEOMETRYFROMWKB);
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(2344);
				match(ST_GEOMETRYN);
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(2345);
				match(ST_GEOMETRYTYPE);
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(2346);
				match(ST_GEOMFROMGEOJSON);
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(2347);
				match(ST_GEOMFROMTEXT);
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(2348);
				match(ST_GEOMFROMWKB);
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(2349);
				match(ST_INTERIORRINGN);
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(2350);
				match(ST_INTERSECTION);
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(2351);
				match(ST_INTERSECTS);
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(2352);
				match(ST_ISCLOSED);
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(2353);
				match(ST_ISEMPTY);
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(2354);
				match(ST_ISSIMPLE);
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(2355);
				match(ST_ISVALID);
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(2356);
				match(ST_LATFROMGEOHASH);
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(2357);
				match(ST_LATITUDE);
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(2358);
				match(ST_LENGTH);
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(2359);
				match(ST_LINEFROMTEXT);
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(2360);
				match(ST_LINEFROMWKB);
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(2361);
				match(ST_LINESTRINGFROMTEXT);
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(2362);
				match(ST_LINESTRINGFROMWKB);
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(2363);
				match(ST_LONGFROMGEOHASH);
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(2364);
				match(ST_LONGITUDE);
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(2365);
				match(ST_MAKEENVELOPE);
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(2366);
				match(ST_MLINEFROMTEXT);
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(2367);
				match(ST_MLINEFROMWKB);
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(2368);
				match(ST_MULTILINESTRINGFROMTEXT);
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(2369);
				match(ST_MULTILINESTRINGFROMWKB);
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(2370);
				match(ST_MPOINTFROMTEXT);
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(2371);
				match(ST_MPOINTFROMWKB);
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(2372);
				match(ST_MULTIPOINTFROMTEXT);
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(2373);
				match(ST_MULTIPOINTFROMWKB);
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(2374);
				match(ST_MPOLYFROMTEXT);
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(2375);
				match(ST_MPOLYFROMWKB);
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(2376);
				match(ST_MULTIPOLYGONFROMTEXT);
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(2377);
				match(ST_MULTIPOLYGONFROMWKB);
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(2378);
				match(ST_NUMGEOMETRIES);
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(2379);
				match(ST_NUMINTERIORRING);
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(2380);
				match(ST_NUMINTERIORRINGS);
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(2381);
				match(ST_NUMPOINTS);
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(2382);
				match(ST_OVERLAPS);
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(2383);
				match(ST_POINTFROMGEOHASH);
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(2384);
				match(ST_POINTFROMTEXT);
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(2385);
				match(ST_POINTFROMWKB);
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(2386);
				match(ST_POINTN);
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(2387);
				match(ST_POLYFROMTEXT);
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(2388);
				match(ST_POLYFROMWKB);
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(2389);
				match(ST_POLYGONFROMTEXT);
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(2390);
				match(ST_POLYGONFROMWKB);
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(2391);
				match(ST_SIMPLIFY);
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(2392);
				match(ST_SRID);
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(2393);
				match(ST_STARTPOINT);
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(2394);
				match(ST_SWAPXY);
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(2395);
				match(ST_SYMDIFFERENCE);
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(2396);
				match(ST_TOUCHES);
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(2397);
				match(ST_TRANSFORM);
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(2398);
				match(ST_UNION);
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(2399);
				match(ST_VALIDATE);
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(2400);
				match(ST_WITHIN);
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(2401);
				match(ST_X);
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(2402);
				match(ST_Y);
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(2403);
				match(TIME);
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(2404);
				match(TIMEDIFF);
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(2405);
				match(TIMESTAMP);
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(2406);
				match(TIMESTAMPADD);
				}
				break;
			case 126:
				enterOuterAlt(_localctx, 126);
				{
				setState(2407);
				match(TIMESTAMPDIFF);
				}
				break;
			case 127:
				enterOuterAlt(_localctx, 127);
				{
				setState(2408);
				match(TIME_FORMAT);
				}
				break;
			case 128:
				enterOuterAlt(_localctx, 128);
				{
				setState(2409);
				match(TIME_TO_SEC);
				}
				break;
			case 129:
				enterOuterAlt(_localctx, 129);
				{
				setState(2410);
				match(AES_DECRYPT);
				}
				break;
			case 130:
				enterOuterAlt(_localctx, 130);
				{
				setState(2411);
				match(AES_ENCRYPT);
				}
				break;
			case 131:
				enterOuterAlt(_localctx, 131);
				{
				setState(2412);
				match(FROM_BASE64);
				}
				break;
			case 132:
				enterOuterAlt(_localctx, 132);
				{
				setState(2413);
				match(TO_BASE64);
				}
				break;
			case 133:
				enterOuterAlt(_localctx, 133);
				{
				setState(2414);
				match(ADDDATE);
				}
				break;
			case 134:
				enterOuterAlt(_localctx, 134);
				{
				setState(2415);
				match(ADDTIME);
				}
				break;
			case 135:
				enterOuterAlt(_localctx, 135);
				{
				setState(2416);
				match(DATE);
				}
				break;
			case 136:
				enterOuterAlt(_localctx, 136);
				{
				setState(2417);
				match(DATE_ADD);
				}
				break;
			case 137:
				enterOuterAlt(_localctx, 137);
				{
				setState(2418);
				match(DATE_SUB);
				}
				break;
			case 138:
				enterOuterAlt(_localctx, 138);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchExpression_Context extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(MySQLStatementParser.MATCH, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode AGAINST() { return getToken(MySQLStatementParser.AGAINST, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MatchSearchModifier_Context matchSearchModifier_() {
			return getRuleContext(MatchSearchModifier_Context.class,0);
		}
		public MatchExpression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchExpression_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitMatchExpression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchExpression_Context matchExpression_() throws RecognitionException {
		MatchExpression_Context _localctx = new MatchExpression_Context(_ctx, getState());
		enterRule(_localctx, 292, RULE_matchExpression_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2422);
			match(MATCH);
			setState(2423);
			columnNames();
			setState(2424);
			match(AGAINST);
			{
			setState(2425);
			expr(0);
			setState(2427);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2426);
				matchSearchModifier_();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchSearchModifier_Context extends ParserRuleContext {
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public TerminalNode NATURAL() { return getToken(MySQLStatementParser.NATURAL, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySQLStatementParser.LANGUAGE, 0); }
		public TerminalNode MODE() { return getToken(MySQLStatementParser.MODE, 0); }
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public TerminalNode QUERY() { return getToken(MySQLStatementParser.QUERY, 0); }
		public TerminalNode EXPANSION() { return getToken(MySQLStatementParser.EXPANSION, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySQLStatementParser.BOOLEAN, 0); }
		public MatchSearchModifier_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchSearchModifier_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitMatchSearchModifier_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchSearchModifier_Context matchSearchModifier_() throws RecognitionException {
		MatchSearchModifier_Context _localctx = new MatchSearchModifier_Context(_ctx, getState());
		enterRule(_localctx, 294, RULE_matchSearchModifier_);
		try {
			setState(2446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2429);
				match(IN);
				setState(2430);
				match(NATURAL);
				setState(2431);
				match(LANGUAGE);
				setState(2432);
				match(MODE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2433);
				match(IN);
				setState(2434);
				match(NATURAL);
				setState(2435);
				match(LANGUAGE);
				setState(2436);
				match(MODE);
				setState(2437);
				match(WITH);
				setState(2438);
				match(QUERY);
				setState(2439);
				match(EXPANSION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2440);
				match(IN);
				setState(2441);
				match(BOOLEAN);
				setState(2442);
				match(MODE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2443);
				match(WITH);
				setState(2444);
				match(QUERY);
				setState(2445);
				match(EXPANSION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExpressionContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(MySQLStatementParser.CASE, 0); }
		public TerminalNode END() { return getToken(MySQLStatementParser.END, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<CaseWhen_Context> caseWhen_() {
			return getRuleContexts(CaseWhen_Context.class);
		}
		public CaseWhen_Context caseWhen_(int i) {
			return getRuleContext(CaseWhen_Context.class,i);
		}
		public CaseElse_Context caseElse_() {
			return getRuleContext(CaseElse_Context.class,0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCaseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_caseExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2448);
			match(CASE);
			setState(2450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT_) | (1L << TILDE_) | (1L << PLUS_) | (1L << MINUS_) | (1L << DOT_) | (1L << LP_) | (1L << LBE_) | (1L << QUESTION_) | (1L << AT_) | (1L << TRUNCATE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (POSITION - 65)) | (1L << (VIEW - 65)) | (1L << (VALUES - 65)) | (1L << (CASE - 65)) | (1L << (CAST - 65)) | (1L << (TRIM - 65)) | (1L << (SUBSTRING - 65)) | (1L << (LEFT - 65)) | (1L << (RIGHT - 65)) | (1L << (IF - 65)) | (1L << (NULL - 65)) | (1L << (TRUE - 65)) | (1L << (FALSE - 65)) | (1L << (EXISTS - 65)) | (1L << (ANY - 65)) | (1L << (OFFSET - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)) | (1L << (SAVEPOINT - 65)) | (1L << (BOOLEAN - 65)) | (1L << (CHAR - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (INTERVAL - 129)) | (1L << (DATE - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (LOCALTIME - 129)) | (1L << (LOCALTIMESTAMP - 129)) | (1L << (YEAR - 129)) | (1L << (QUARTER - 129)) | (1L << (MONTH - 129)) | (1L << (WEEK - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (MICROSECOND - 129)) | (1L << (MAX - 129)) | (1L << (MIN - 129)) | (1L << (SUM - 129)) | (1L << (COUNT - 129)) | (1L << (AVG - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (INSTANCE - 129)) | (1L << (DO - 129)) | (1L << (DEFINER - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (OPEN - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (TYPE - 129)) | (1L << (DATABASE - 129)) | (1L << (TABLES - 129)) | (1L << (TABLESPACE - 129)) | (1L << (COLUMNS - 129)) | (1L << (FIELDS - 129)) | (1L << (INDEXES - 129)) | (1L << (STATUS - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (REPLACE - 193)) | (1L << (MODIFY - 193)) | (1L << (VALUE - 193)) | (1L << (DUPLICATE - 193)) | (1L << (FIRST - 193)) | (1L << (LAST - 193)) | (1L << (AFTER - 193)) | (1L << (OJ - 193)) | (1L << (MOD - 193)) | (1L << (ACCOUNT - 193)) | (1L << (USER - 193)) | (1L << (ROLE - 193)) | (1L << (START - 193)) | (1L << (TRANSACTION - 193)) | (1L << (ROW - 193)) | (1L << (WITHOUT - 193)) | (1L << (BINARY - 193)) | (1L << (ESCAPE - 193)) | (1L << (SUBPARTITION - 193)) | (1L << (STORAGE - 193)) | (1L << (SUPER - 193)) | (1L << (SUBSTR - 193)) | (1L << (TEMPORARY - 193)) | (1L << (THAN - 193)) | (1L << (UNBOUNDED - 193)) | (1L << (SIGNED - 193)) | (1L << (UPGRADE - 193)) | (1L << (VALIDATION - 193)) | (1L << (ROLLUP - 193)) | (1L << (SOUNDS - 193)) | (1L << (UNKNOWN - 193)) | (1L << (OFF - 193)) | (1L << (ALWAYS - 193)) | (1L << (COMMITTED - 193)) | (1L << (LEVEL - 193)) | (1L << (NO - 193)) | (1L << (PASSWORD - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (ACTION - 193)) | (1L << (ALGORITHM - 193)) | (1L << (AUTOCOMMIT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (BTREE - 258)) | (1L << (CHAIN - 258)) | (1L << (CHARSET - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLIENT - 258)) | (1L << (COALESCE - 258)) | (1L << (COMMENT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONVERT - 258)) | (1L << (DATA - 258)) | (1L << (DISCARD - 258)) | (1L << (DISK - 258)) | (1L << (ENCRYPTION - 258)) | (1L << (END - 258)) | (1L << (ENGINE - 258)) | (1L << (EVENT - 258)) | (1L << (EXCHANGE - 258)) | (1L << (EXECUTE - 258)) | (1L << (EXTRACT - 258)) | (1L << (FILE - 258)) | (1L << (FIXED - 258)) | (1L << (FOLLOWING - 258)) | (1L << (GLOBAL - 258)) | (1L << (HASH - 258)) | (1L << (IMPORT_ - 258)) | (1L << (LESS - 258)) | (1L << (MATCH - 258)) | (1L << (MEMORY - 258)) | (1L << (NONE - 258)) | (1L << (NOW - 258)) | (1L << (PARSER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PARTITIONING - 258)) | (1L << (PERSIST - 258)) | (1L << (PRECEDING - 258)) | (1L << (PROCESS - 258)) | (1L << (PROXY - 258)) | (1L << (QUICK - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (REBUILD - 323)) | (1L << (REDUNDANT - 323)) | (1L << (RELOAD - 323)) | (1L << (REMOVE - 323)) | (1L << (REORGANIZE - 323)) | (1L << (REPAIR - 323)) | (1L << (REVERSE - 323)) | (1L << (SESSION - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIMPLE - 323)) | (1L << (SLAVE - 323)) | (1L << (VISIBLE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (ENFORCED - 323)) | (1L << (AGAINST - 323)) | (1L << (LANGUAGE - 323)) | (1L << (MODE - 323)) | (1L << (QUERY - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXPANSION - 323)) | (1L << (VARIANCE - 323)) | (1L << (MAX_ROWS - 323)) | (1L << (MIN_ROWS - 323)) | (1L << (SQL_BIG_RESULT - 323)) | (1L << (SQL_BUFFER_RESULT - 323)) | (1L << (SQL_CACHE - 323)) | (1L << (SQL_NO_CACHE - 323)) | (1L << (STATS_AUTO_RECALC - 323)) | (1L << (STATS_PERSISTENT - 323)) | (1L << (STATS_SAMPLE_PAGES - 323)) | (1L << (ROW_FORMAT - 323)) | (1L << (WEIGHT_STRING - 323)) | (1L << (COLUMN_FORMAT - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (PACK_KEYS - 323)) | (1L << (PERSIST_ONLY - 323)) | (1L << (BIT_AND - 323)) | (1L << (BIT_OR - 323)) | (1L << (BIT_XOR - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (GROUP_CONCAT - 387)) | (1L << (JSON_ARRAYAGG - 387)) | (1L << (JSON_OBJECTAGG - 387)) | (1L << (STD - 387)) | (1L << (STDDEV - 387)) | (1L << (STDDEV_POP - 387)) | (1L << (STDDEV_SAMP - 387)) | (1L << (VAR_POP - 387)) | (1L << (VAR_SAMP - 387)) | (1L << (AUTO_INCREMENT - 387)) | (1L << (AVG_ROW_LENGTH - 387)) | (1L << (DELAY_KEY_WRITE - 387)) | (1L << (CURRENT_TIMESTAMP - 387)) | (1L << (ROTATE - 387)) | (1L << (MASTER - 387)) | (1L << (BINLOG - 387)) | (1L << (ERROR - 387)) | (1L << (SCHEDULE - 387)) | (1L << (COMPLETION - 387)) | (1L << (EVERY - 387)) | (1L << (HOST - 387)) | (1L << (SOCKET - 387)) | (1L << (PORT - 387)) | (1L << (SERVER - 387)) | (1L << (WRAPPER - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)) | (1L << (RETURNS - 387)) | (1L << (CONTAINS - 387)) | (1L << (SECURITY - 387)) | (1L << (INVOKER - 387)) | (1L << (TEMPTABLE - 387)) | (1L << (MERGE - 387)) | (1L << (UNDEFINED - 387)) | (1L << (DATAFILE - 387)) | (1L << (FILE_BLOCK_SIZE - 387)) | (1L << (EXTENT_SIZE - 387)) | (1L << (INITIAL_SIZE - 387)) | (1L << (AUTOEXTEND_SIZE - 387)) | (1L << (MAX_SIZE - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (NODEGROUP - 451)) | (1L << (WAIT - 451)) | (1L << (LOGFILE - 451)) | (1L << (UNDOFILE - 451)) | (1L << (UNDO_BUFFER_SIZE - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (HANDLER - 451)) | (1L << (PREV - 451)) | (1L << (ORGANIZATION - 451)) | (1L << (DEFINITION - 451)) | (1L << (DESCRIPTION - 451)) | (1L << (REFERENCE - 451)) | (1L << (FOLLOWS - 451)) | (1L << (PRECEDES - 451)) | (1L << (IMPORT - 451)) | (1L << (CONCURRENT - 451)) | (1L << (XML - 451)) | (1L << (DUMPFILE - 451)) | (1L << (SHARE - 451)) | (1L << (CODE - 451)) | (1L << (CONTEXT - 451)) | (1L << (SOURCE - 451)) | (1L << (CHANNEL - 451)) | (1L << (CLONE - 451)) | (1L << (AGGREGATE - 451)) | (1L << (INSTALL - 451)) | (1L << (COMPONENT - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (UNINSTALL - 515)) | (1L << (RESOURCE - 515)) | (1L << (EXPIRE - 515)) | (1L << (NEVER - 515)) | (1L << (HISTORY - 515)) | (1L << (OPTIONAL - 515)) | (1L << (REUSE - 515)) | (1L << (MAX_QUERIES_PER_HOUR - 515)) | (1L << (MAX_UPDATES_PER_HOUR - 515)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 515)) | (1L << (MAX_USER_CONNECTIONS - 515)) | (1L << (RETAIN - 515)) | (1L << (RANDOM - 515)) | (1L << (OLD - 515)) | (1L << (ISSUER - 515)) | (1L << (SUBJECT - 515)) | (1L << (CACHE - 515)) | (1L << (GENERAL - 515)) | (1L << (SLOW - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (EXPORT - 515)) | (1L << (RELAY - 515)) | (1L << (HOSTS - 515)) | (1L << (FLUSH - 515)) | (1L << (RESET - 515)) | (1L << (RESTART - 515)) | (1L << (UNIX_TIMESTAMP - 515)) | (1L << (LOWER - 515)) | (1L << (UPPER - 515)) | (1L << (ADDDATE - 515)) | (1L << (ADDTIME - 515)) | (1L << (DATE_ADD - 515)) | (1L << (DATE_SUB - 515)) | (1L << (DATEDIFF - 515)) | (1L << (DATE_FORMAT - 515)) | (1L << (DAYNAME - 515)) | (1L << (DAYOFMONTH - 515)) | (1L << (DAYOFWEEK - 515)) | (1L << (DAYOFYEAR - 515)) | (1L << (STR_TO_DATE - 515)) | (1L << (TIMEDIFF - 515)) | (1L << (TIMESTAMPADD - 515)) | (1L << (TIMESTAMPDIFF - 515)) | (1L << (TIME_FORMAT - 515)) | (1L << (TIME_TO_SEC - 515)) | (1L << (AES_DECRYPT - 515)) | (1L << (AES_ENCRYPT - 515)) | (1L << (FROM_BASE64 - 515)) | (1L << (TO_BASE64 - 515)) | (1L << (GEOMCOLLECTION - 515)) | (1L << (GEOMETRYCOLLECTION - 515)) | (1L << (LINESTRING - 515)))) != 0) || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MULTILINESTRING - 579)) | (1L << (MULTIPOINT - 579)) | (1L << (MULTIPOLYGON - 579)) | (1L << (POINT - 579)) | (1L << (POLYGON - 579)) | (1L << (ST_AREA - 579)) | (1L << (ST_ASBINARY - 579)) | (1L << (ST_ASGEOJSON - 579)) | (1L << (ST_ASTEXT - 579)) | (1L << (ST_ASWKB - 579)) | (1L << (ST_ASWKT - 579)) | (1L << (ST_BUFFER - 579)) | (1L << (ST_BUFFER_STRATEGY - 579)) | (1L << (ST_CENTROID - 579)) | (1L << (ST_CONTAINS - 579)) | (1L << (ST_CONVEXHULL - 579)) | (1L << (ST_CROSSES - 579)) | (1L << (ST_DIFFERENCE - 579)) | (1L << (ST_DIMENSION - 579)) | (1L << (ST_DISJOINT - 579)) | (1L << (ST_DISTANCE - 579)) | (1L << (ST_DISTANCE_SPHERE - 579)) | (1L << (ST_ENDPOINT - 579)) | (1L << (ST_ENVELOPE - 579)) | (1L << (ST_EQUALS - 579)) | (1L << (ST_EXTERIORRING - 579)) | (1L << (ST_GEOHASH - 579)) | (1L << (ST_GEOMCOLLFROMTEXT - 579)) | (1L << (ST_GEOMCOLLFROMTXT - 579)) | (1L << (ST_GEOMCOLLFROMWKB - 579)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 579)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 579)) | (1L << (ST_GEOMETRYFROMTEXT - 579)) | (1L << (ST_GEOMETRYFROMWKB - 579)) | (1L << (ST_GEOMETRYN - 579)) | (1L << (ST_GEOMETRYTYPE - 579)) | (1L << (ST_GEOMFROMGEOJSON - 579)) | (1L << (ST_GEOMFROMTEXT - 579)) | (1L << (ST_GEOMFROMWKB - 579)) | (1L << (ST_INTERIORRINGN - 579)) | (1L << (ST_INTERSECTION - 579)) | (1L << (ST_INTERSECTS - 579)) | (1L << (ST_ISCLOSED - 579)) | (1L << (ST_ISEMPTY - 579)) | (1L << (ST_ISSIMPLE - 579)) | (1L << (ST_ISVALID - 579)) | (1L << (ST_LATFROMGEOHASH - 579)) | (1L << (ST_LATITUDE - 579)) | (1L << (ST_LENGTH - 579)) | (1L << (ST_LINEFROMTEXT - 579)) | (1L << (ST_LINEFROMWKB - 579)) | (1L << (ST_LINESTRINGFROMTEXT - 579)) | (1L << (ST_LINESTRINGFROMWKB - 579)) | (1L << (ST_LONGFROMGEOHASH - 579)) | (1L << (ST_LONGITUDE - 579)) | (1L << (ST_MAKEENVELOPE - 579)) | (1L << (ST_MLINEFROMTEXT - 579)) | (1L << (ST_MLINEFROMWKB - 579)) | (1L << (ST_MULTILINESTRINGFROMTEXT - 579)) | (1L << (ST_MULTILINESTRINGFROMWKB - 579)) | (1L << (ST_MPOINTFROMTEXT - 579)) | (1L << (ST_MPOINTFROMWKB - 579)) | (1L << (ST_MULTIPOINTFROMTEXT - 579)) | (1L << (ST_MULTIPOINTFROMWKB - 579)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (ST_MPOLYFROMTEXT - 643)) | (1L << (ST_MPOLYFROMWKB - 643)) | (1L << (ST_MULTIPOLYGONFROMTEXT - 643)) | (1L << (ST_MULTIPOLYGONFROMWKB - 643)) | (1L << (ST_NUMGEOMETRIES - 643)) | (1L << (ST_NUMINTERIORRING - 643)) | (1L << (ST_NUMINTERIORRINGS - 643)) | (1L << (ST_NUMPOINTS - 643)) | (1L << (ST_OVERLAPS - 643)) | (1L << (ST_POINTFROMGEOHASH - 643)) | (1L << (ST_POINTFROMTEXT - 643)) | (1L << (ST_POINTFROMWKB - 643)) | (1L << (ST_POINTN - 643)) | (1L << (ST_POLYFROMTEXT - 643)) | (1L << (ST_POLYFROMWKB - 643)) | (1L << (ST_POLYGONFROMTEXT - 643)) | (1L << (ST_POLYGONFROMWKB - 643)) | (1L << (ST_SIMPLIFY - 643)) | (1L << (ST_SRID - 643)) | (1L << (ST_STARTPOINT - 643)) | (1L << (ST_SWAPXY - 643)) | (1L << (ST_SYMDIFFERENCE - 643)) | (1L << (ST_TOUCHES - 643)) | (1L << (ST_TRANSFORM - 643)) | (1L << (ST_UNION - 643)) | (1L << (ST_VALIDATE - 643)) | (1L << (ST_WITHIN - 643)) | (1L << (ST_X - 643)) | (1L << (ST_Y - 643)) | (1L << (IO_THREAD - 643)) | (1L << (SQL_THREAD - 643)) | (1L << (SQL_BEFORE_GTIDS - 643)) | (1L << (SQL_AFTER_GTIDS - 643)) | (1L << (MASTER_LOG_FILE - 643)) | (1L << (MASTER_LOG_POS - 643)) | (1L << (RELAY_LOG_FILE - 643)) | (1L << (RELAY_LOG_POS - 643)) | (1L << (SQL_AFTER_MTS_GAPS - 643)) | (1L << (UNTIL - 643)) | (1L << (DEFAULT_AUTH - 643)) | (1L << (PLUGIN_DIR - 643)) | (1L << (STOP - 643)) | (1L << (IDENTIFIER_ - 643)) | (1L << (STRING_ - 643)) | (1L << (NUMBER_ - 643)) | (1L << (HEX_DIGIT_ - 643)) | (1L << (BIT_NUM_ - 643)))) != 0)) {
				{
				setState(2449);
				simpleExpr(0);
				}
			}

			setState(2453); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2452);
				caseWhen_();
				}
				}
				setState(2455); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(2458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2457);
				caseElse_();
				}
			}

			setState(2460);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseWhen_Context extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MySQLStatementParser.WHEN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(MySQLStatementParser.THEN, 0); }
		public CaseWhen_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseWhen_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCaseWhen_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseWhen_Context caseWhen_() throws RecognitionException {
		CaseWhen_Context _localctx = new CaseWhen_Context(_ctx, getState());
		enterRule(_localctx, 298, RULE_caseWhen_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2462);
			match(WHEN);
			setState(2463);
			expr(0);
			setState(2464);
			match(THEN);
			setState(2465);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseElse_Context extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(MySQLStatementParser.ELSE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CaseElse_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseElse_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCaseElse_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseElse_Context caseElse_() throws RecognitionException {
		CaseElse_Context _localctx = new CaseElse_Context(_ctx, getState());
		enterRule(_localctx, 300, RULE_caseElse_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2467);
			match(ELSE);
			setState(2468);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExpressionContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(MySQLStatementParser.INTERVAL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalUnit_Context intervalUnit_() {
			return getRuleContext(IntervalUnit_Context.class,0);
		}
		public IntervalExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpression; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIntervalExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExpressionContext intervalExpression() throws RecognitionException {
		IntervalExpressionContext _localctx = new IntervalExpressionContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_intervalExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2470);
			match(INTERVAL);
			setState(2471);
			expr(0);
			setState(2472);
			intervalUnit_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalUnit_Context extends ParserRuleContext {
		public TerminalNode MICROSECOND() { return getToken(MySQLStatementParser.MICROSECOND, 0); }
		public TerminalNode SECOND() { return getToken(MySQLStatementParser.SECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySQLStatementParser.MINUTE, 0); }
		public TerminalNode HOUR() { return getToken(MySQLStatementParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(MySQLStatementParser.DAY, 0); }
		public TerminalNode WEEK() { return getToken(MySQLStatementParser.WEEK, 0); }
		public TerminalNode MONTH() { return getToken(MySQLStatementParser.MONTH, 0); }
		public TerminalNode QUARTER() { return getToken(MySQLStatementParser.QUARTER, 0); }
		public TerminalNode YEAR() { return getToken(MySQLStatementParser.YEAR, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySQLStatementParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySQLStatementParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySQLStatementParser.MINUTE_SECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySQLStatementParser.HOUR_MICROSECOND, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySQLStatementParser.HOUR_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySQLStatementParser.HOUR_MINUTE, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySQLStatementParser.DAY_MICROSECOND, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySQLStatementParser.DAY_SECOND, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySQLStatementParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySQLStatementParser.DAY_HOUR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySQLStatementParser.YEAR_MONTH, 0); }
		public IntervalUnit_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalUnit_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIntervalUnit_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalUnit_Context intervalUnit_() throws RecognitionException {
		IntervalUnit_Context _localctx = new IntervalUnit_Context(_ctx, getState());
		enterRule(_localctx, 304, RULE_intervalUnit_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2474);
			_la = _input.LA(1);
			if ( !(((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (YEAR - 135)) | (1L << (QUARTER - 135)) | (1L << (MONTH - 135)) | (1L << (WEEK - 135)) | (1L << (DAY - 135)) | (1L << (HOUR - 135)) | (1L << (MINUTE - 135)) | (1L << (SECOND - 135)) | (1L << (MICROSECOND - 135)))) != 0) || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (YEAR_MONTH - 405)) | (1L << (DAY_HOUR - 405)) | (1L << (DAY_MINUTE - 405)) | (1L << (DAY_SECOND - 405)) | (1L << (DAY_MICROSECOND - 405)) | (1L << (HOUR_MINUTE - 405)) | (1L << (HOUR_SECOND - 405)) | (1L << (HOUR_MICROSECOND - 405)) | (1L << (MINUTE_SECOND - 405)) | (1L << (MINUTE_MICROSECOND - 405)) | (1L << (SECOND_MICROSECOND - 405)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public List<OrderByItemContext> orderByItem() {
			return getRuleContexts(OrderByItemContext.class);
		}
		public OrderByItemContext orderByItem(int i) {
			return getRuleContext(OrderByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2476);
			match(ORDER);
			setState(2477);
			match(BY);
			setState(2478);
			orderByItem();
			setState(2483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2479);
				match(COMMA_);
				setState(2480);
				orderByItem();
				}
				}
				setState(2485);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByItemContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySQLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySQLStatementParser.DESC, 0); }
		public OrderByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitOrderByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByItemContext orderByItem() throws RecognitionException {
		OrderByItemContext _localctx = new OrderByItemContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_orderByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2489);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(2486);
				columnName();
				}
				break;
			case 2:
				{
				setState(2487);
				numberLiterals();
				}
				break;
			case 3:
				{
				setState(2488);
				expr(0);
				}
				break;
			}
			setState(2492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2491);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public DataTypeLengthContext dataTypeLength() {
			return getRuleContext(DataTypeLengthContext.class,0);
		}
		public CharacterSet_Context characterSet_() {
			return getRuleContext(CharacterSet_Context.class,0);
		}
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(MySQLStatementParser.ZEROFILL, 0); }
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_dataType);
		int _la;
		try {
			setState(2515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2494);
				dataTypeName();
				setState(2496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2495);
					dataTypeLength();
					}
				}

				setState(2499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(2498);
					characterSet_();
					}
				}

				setState(2502);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
				case 1:
					{
					setState(2501);
					collateClause_();
					}
					break;
				}
				setState(2505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(2504);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2507);
				dataTypeName();
				setState(2508);
				collectionOptions();
				setState(2510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(2509);
					characterSet_();
					}
				}

				setState(2513);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					setState(2512);
					collateClause_();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeNameContext extends ParserRuleContext {
		public TerminalNode INTEGER() { return getToken(MySQLStatementParser.INTEGER, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLStatementParser.UNSIGNED, 0); }
		public TerminalNode SIGNED() { return getToken(MySQLStatementParser.SIGNED, 0); }
		public TerminalNode INT() { return getToken(MySQLStatementParser.INT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySQLStatementParser.SMALLINT, 0); }
		public TerminalNode TINYINT() { return getToken(MySQLStatementParser.TINYINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySQLStatementParser.MEDIUMINT, 0); }
		public TerminalNode BIGINT() { return getToken(MySQLStatementParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(MySQLStatementParser.DECIMAL, 0); }
		public TerminalNode NUMERIC() { return getToken(MySQLStatementParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(MySQLStatementParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(MySQLStatementParser.DOUBLE, 0); }
		public TerminalNode BIT() { return getToken(MySQLStatementParser.BIT, 0); }
		public TerminalNode BOOL() { return getToken(MySQLStatementParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySQLStatementParser.BOOLEAN, 0); }
		public TerminalNode DEC() { return getToken(MySQLStatementParser.DEC, 0); }
		public TerminalNode DATE() { return getToken(MySQLStatementParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySQLStatementParser.DATETIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode TIME() { return getToken(MySQLStatementParser.TIME, 0); }
		public TerminalNode YEAR() { return getToken(MySQLStatementParser.YEAR, 0); }
		public TerminalNode CHAR() { return getToken(MySQLStatementParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(MySQLStatementParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySQLStatementParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySQLStatementParser.VARBINARY, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySQLStatementParser.TINYBLOB, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySQLStatementParser.TINYTEXT, 0); }
		public TerminalNode BLOB() { return getToken(MySQLStatementParser.BLOB, 0); }
		public TerminalNode TEXT() { return getToken(MySQLStatementParser.TEXT, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySQLStatementParser.MEDIUMBLOB, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySQLStatementParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySQLStatementParser.LONGBLOB, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySQLStatementParser.LONGTEXT, 0); }
		public TerminalNode ENUM() { return getToken(MySQLStatementParser.ENUM, 0); }
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public TerminalNode GEOMETRY() { return getToken(MySQLStatementParser.GEOMETRY, 0); }
		public TerminalNode POINT() { return getToken(MySQLStatementParser.POINT, 0); }
		public TerminalNode LINESTRING() { return getToken(MySQLStatementParser.LINESTRING, 0); }
		public TerminalNode POLYGON() { return getToken(MySQLStatementParser.POLYGON, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySQLStatementParser.MULTIPOINT, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySQLStatementParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySQLStatementParser.MULTIPOLYGON, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySQLStatementParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode JSON() { return getToken(MySQLStatementParser.JSON, 0); }
		public DataTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDataTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeNameContext dataTypeName() throws RecognitionException {
		DataTypeNameContext _localctx = new DataTypeNameContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_dataTypeName);
		int _la;
		try {
			setState(2564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED || _la==SIGNED) {
					{
					setState(2517);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2520);
				match(INTEGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2521);
				match(INT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2522);
				match(SMALLINT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2523);
				match(TINYINT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2524);
				match(MEDIUMINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2525);
				match(BIGINT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2526);
				match(DECIMAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2527);
				match(NUMERIC);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2528);
				match(FLOAT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2529);
				match(DOUBLE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2530);
				match(BIT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2531);
				match(BOOL);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2532);
				match(BOOLEAN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2533);
				match(DEC);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2534);
				match(DATE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2535);
				match(DATETIME);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2536);
				match(TIMESTAMP);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2537);
				match(TIME);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2538);
				match(YEAR);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2539);
				match(CHAR);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2540);
				match(VARCHAR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2541);
				match(BINARY);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2542);
				match(VARBINARY);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2543);
				match(TINYBLOB);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2544);
				match(TINYTEXT);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2545);
				match(BLOB);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2546);
				match(TEXT);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2547);
				match(MEDIUMBLOB);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2548);
				match(MEDIUMTEXT);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2549);
				match(LONGBLOB);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2550);
				match(LONGTEXT);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2551);
				match(ENUM);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2552);
				match(SET);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2553);
				match(GEOMETRY);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2554);
				match(POINT);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2555);
				match(LINESTRING);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2556);
				match(POLYGON);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2557);
				match(MULTIPOINT);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2558);
				match(MULTILINESTRING);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2559);
				match(MULTIPOLYGON);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2560);
				match(GEOMETRYCOLLECTION);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2561);
				match(JSON);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2562);
				match(UNSIGNED);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2563);
				match(SIGNED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeLengthContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public DataTypeLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeLength; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDataTypeLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeLengthContext dataTypeLength() throws RecognitionException {
		DataTypeLengthContext _localctx = new DataTypeLengthContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_dataTypeLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2566);
			match(LP_);
			setState(2567);
			match(NUMBER_);
			setState(2570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(2568);
				match(COMMA_);
				setState(2569);
				match(NUMBER_);
				}
			}

			setState(2572);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2574);
			match(LP_);
			setState(2575);
			match(STRING_);
			setState(2580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2576);
				match(COMMA_);
				setState(2577);
				match(STRING_);
				}
				}
				setState(2582);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2583);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterSet_Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySQLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(MySQLStatementParser.CHAR, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public CharacterSet_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSet_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCharacterSet_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSet_Context characterSet_() throws RecognitionException {
		CharacterSet_Context _localctx = new CharacterSet_Context(_ctx, getState());
		enterRule(_localctx, 318, RULE_characterSet_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2585);
			_la = _input.LA(1);
			if ( !(_la==CHAR || _la==CHARACTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2586);
			match(SET);
			setState(2588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(2587);
				match(EQ_);
				}
			}

			setState(2590);
			ignoredIdentifier_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateClause_Context extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(MySQLStatementParser.COLLATE, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public CollateClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCollateClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateClause_Context collateClause_() throws RecognitionException {
		CollateClause_Context _localctx = new CollateClause_Context(_ctx, getState());
		enterRule(_localctx, 320, RULE_collateClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			match(COLLATE);
			setState(2594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(2593);
				match(EQ_);
				}
			}

			setState(2598);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				{
				setState(2596);
				match(STRING_);
				}
				break;
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case WITHOUT:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MEMORY:
			case NONE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
				{
				setState(2597);
				ignoredIdentifier_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifier_Context extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(MySQLStatementParser.DOT_, 0); }
		public IgnoredIdentifier_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifier_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIgnoredIdentifier_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifier_Context ignoredIdentifier_() throws RecognitionException {
		IgnoredIdentifier_Context _localctx = new IgnoredIdentifier_Context(_ctx, getState());
		enterRule(_localctx, 322, RULE_ignoredIdentifier_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2600);
			identifier();
			setState(2603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				{
				setState(2601);
				match(DOT_);
				setState(2602);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifiers_Context extends ParserRuleContext {
		public List<IgnoredIdentifier_Context> ignoredIdentifier_() {
			return getRuleContexts(IgnoredIdentifier_Context.class);
		}
		public IgnoredIdentifier_Context ignoredIdentifier_(int i) {
			return getRuleContext(IgnoredIdentifier_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public IgnoredIdentifiers_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifiers_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIgnoredIdentifiers_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifiers_Context ignoredIdentifiers_() throws RecognitionException {
		IgnoredIdentifiers_Context _localctx = new IgnoredIdentifiers_Context(_ctx, getState());
		enterRule(_localctx, 324, RULE_ignoredIdentifiers_);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2605);
			ignoredIdentifier_();
			setState(2610);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,249,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2606);
					match(COMMA_);
					setState(2607);
					ignoredIdentifier_();
					}
					} 
				}
				setState(2612);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,249,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNotExistClause_Context tableNotExistClause_() {
			return getRuleContext(TableNotExistClause_Context.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionClauseContext createDefinitionClause() {
			return getRuleContext(CreateDefinitionClauseContext.class,0);
		}
		public CreateLikeClauseContext createLikeClause() {
			return getRuleContext(CreateLikeClauseContext.class,0);
		}
		public CreateTableSpecification_Context createTableSpecification_() {
			return getRuleContext(CreateTableSpecification_Context.class,0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2613);
			match(CREATE);
			setState(2615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2614);
				createTableSpecification_();
				}
			}

			setState(2617);
			match(TABLE);
			setState(2618);
			tableNotExistClause_();
			setState(2619);
			tableName();
			setState(2622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				{
				setState(2620);
				createDefinitionClause();
				}
				break;
			case 2:
				{
				setState(2621);
				createLikeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public AlterDefinitionClauseContext alterDefinitionClause() {
			return getRuleContext(AlterDefinitionClauseContext.class,0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2624);
			match(ALTER);
			setState(2625);
			match(TABLE);
			setState(2626);
			tableName();
			setState(2628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << ADD) | (1L << INDEX))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (WITH - 73)) | (1L << (UNION - 73)) | (1L << (ORDER - 73)) | (1L << (CHAR - 73)) | (1L << (CHARACTER - 73)))) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & ((1L << (DEFAULT - 149)) | (1L << (ENABLE - 149)) | (1L << (DISABLE - 149)) | (1L << (TABLESPACE - 149)) | (1L << (MODIFY - 149)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (WITHOUT - 215)) | (1L << (UPGRADE - 215)) | (1L << (CHECK - 215)) | (1L << (PASSWORD - 215)) | (1L << (ALGORITHM - 215)) | (1L << (ANALYZE - 215)) | (1L << (CHANGE - 215)) | (1L << (CHECKSUM - 215)) | (1L << (COALESCE - 215)) | (1L << (COLLATE - 215)) | (1L << (COMMENT - 215)) | (1L << (COMPRESSION - 215)) | (1L << (CONNECTION - 215)) | (1L << (CONVERT - 215)) | (1L << (DATA - 215)) | (1L << (DISCARD - 215)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (ENCRYPTION - 281)) | (1L << (ENGINE - 281)) | (1L << (EXCHANGE - 281)) | (1L << (FORCE - 281)) | (1L << (IMPORT_ - 281)) | (1L << (LOCK - 281)) | (1L << (OPTIMIZE - 281)) | (1L << (REBUILD - 281)) | (1L << (REMOVE - 281)) | (1L << (RENAME - 281)) | (1L << (REORGANIZE - 281)) | (1L << (REPAIR - 281)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (MAX_ROWS - 356)) | (1L << (MIN_ROWS - 356)) | (1L << (STATS_AUTO_RECALC - 356)) | (1L << (STATS_PERSISTENT - 356)) | (1L << (STATS_SAMPLE_PAGES - 356)) | (1L << (ROW_FORMAT - 356)) | (1L << (INSERT_METHOD - 356)) | (1L << (KEY_BLOCK_SIZE - 356)) | (1L << (PACK_KEYS - 356)) | (1L << (AUTO_INCREMENT - 356)) | (1L << (AVG_ROW_LENGTH - 356)) | (1L << (DELAY_KEY_WRITE - 356)))) != 0)) {
				{
				setState(2627);
				alterDefinitionClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public DropTableSpecification_Context dropTableSpecification_() {
			return getRuleContext(DropTableSpecification_Context.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableExistClause_Context tableExistClause_() {
			return getRuleContext(TableExistClause_Context.class,0);
		}
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_dropTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			match(DROP);
			setState(2631);
			dropTableSpecification_();
			setState(2632);
			match(TABLE);
			setState(2633);
			tableExistClause_();
			setState(2634);
			tableNames();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public DropIndexSpecification_Context dropIndexSpecification_() {
			return getRuleContext(DropIndexSpecification_Context.class,0);
		}
		public TerminalNode ON() { return getToken(MySQLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySQLStatementParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySQLStatementParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySQLStatementParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySQLStatementParser.LOCK, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySQLStatementParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySQLStatementParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySQLStatementParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySQLStatementParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySQLStatementParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySQLStatementParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySQLStatementParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySQLStatementParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySQLStatementParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySQLStatementParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySQLStatementParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySQLStatementParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2636);
			match(DROP);
			setState(2637);
			match(INDEX);
			setState(2639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2638);
				dropIndexSpecification_();
				}
			}

			setState(2641);
			indexName();
			setState(2644);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2642);
				match(ON);
				setState(2643);
				tableName();
				}
			}

			setState(2658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALGORITHM || _la==LOCK) {
				{
				setState(2656);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(2646);
					match(ALGORITHM);
					setState(2648);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQ_) {
						{
						setState(2647);
						match(EQ_);
						}
					}

					setState(2650);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case LOCK:
					{
					setState(2651);
					match(LOCK);
					setState(2653);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQ_) {
						{
						setState(2652);
						match(EQ_);
						}
					}

					setState(2655);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || ((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (EXCLUSIVE - 287)) | (1L << (NONE - 287)) | (1L << (SHARED - 287)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2660);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MySQLStatementParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			match(TRUNCATE);
			setState(2663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2662);
				match(TABLE);
				}
			}

			setState(2665);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public CreateIndexSpecification_Context createIndexSpecification_() {
			return getRuleContext(CreateIndexSpecification_Context.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySQLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public KeyParts_Context keyParts_() {
			return getRuleContext(KeyParts_Context.class,0);
		}
		public IndexType_Context indexType_() {
			return getRuleContext(IndexType_Context.class,0);
		}
		public IndexOption_Context indexOption_() {
			return getRuleContext(IndexOption_Context.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySQLStatementParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySQLStatementParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySQLStatementParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySQLStatementParser.LOCK, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySQLStatementParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySQLStatementParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySQLStatementParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySQLStatementParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySQLStatementParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySQLStatementParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySQLStatementParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySQLStatementParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySQLStatementParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySQLStatementParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySQLStatementParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySQLStatementParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_createIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2667);
			match(CREATE);
			setState(2668);
			createIndexSpecification_();
			setState(2669);
			match(INDEX);
			setState(2670);
			indexName();
			setState(2672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2671);
				indexType_();
				}
			}

			setState(2674);
			match(ON);
			setState(2675);
			tableName();
			setState(2676);
			keyParts_();
			setState(2678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==USING || _la==COMMENT || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (VISIBLE - 345)) | (1L << (INVISIBLE - 345)) | (1L << (KEY_BLOCK_SIZE - 345)))) != 0)) {
				{
				setState(2677);
				indexOption_();
				}
			}

			setState(2692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALGORITHM || _la==LOCK) {
				{
				setState(2690);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(2680);
					match(ALGORITHM);
					setState(2682);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQ_) {
						{
						setState(2681);
						match(EQ_);
						}
					}

					setState(2684);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case LOCK:
					{
					setState(2685);
					match(LOCK);
					setState(2687);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQ_) {
						{
						setState(2686);
						match(EQ_);
						}
					}

					setState(2689);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || ((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (EXCLUSIVE - 287)) | (1L << (NONE - 287)) | (1L << (SHARED - 287)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2694);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySQLStatementParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySQLStatementParser.SCHEMA, 0); }
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public List<CreateDatabaseSpecification_Context> createDatabaseSpecification_() {
			return getRuleContexts(CreateDatabaseSpecification_Context.class);
		}
		public CreateDatabaseSpecification_Context createDatabaseSpecification_(int i) {
			return getRuleContext(CreateDatabaseSpecification_Context.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2695);
			match(CREATE);
			setState(2696);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==DATABASE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2697);
				match(IF);
				setState(2698);
				match(NOT);
				setState(2699);
				match(EXISTS);
				}
			}

			setState(2702);
			schemaName();
			setState(2706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CHARACTER || _la==DEFAULT || _la==CHARSET || _la==COLLATE) {
				{
				{
				setState(2703);
				createDatabaseSpecification_();
				}
				}
				setState(2708);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySQLStatementParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySQLStatementParser.SCHEMA, 0); }
		public List<CreateDatabaseSpecification_Context> createDatabaseSpecification_() {
			return getRuleContexts(CreateDatabaseSpecification_Context.class);
		}
		public CreateDatabaseSpecification_Context createDatabaseSpecification_(int i) {
			return getRuleContext(CreateDatabaseSpecification_Context.class,i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_alterDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2709);
			match(ALTER);
			setState(2710);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==DATABASE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2711);
			schemaName();
			setState(2715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CHARACTER || _la==DEFAULT || _la==CHARSET || _la==COLLATE) {
				{
				{
				setState(2712);
				createDatabaseSpecification_();
				}
				}
				setState(2717);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseSpecification_Context extends ParserRuleContext {
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySQLStatementParser.CHARSET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public TerminalNode COLLATE() { return getToken(MySQLStatementParser.COLLATE, 0); }
		public CollationName_Context collationName_() {
			return getRuleContext(CollationName_Context.class,0);
		}
		public TerminalNode ENCRYPTION() { return getToken(MySQLStatementParser.ENCRYPTION, 0); }
		public TerminalNode Y_N_() { return getToken(MySQLStatementParser.Y_N_, 0); }
		public CreateDatabaseSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseSpecification_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateDatabaseSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseSpecification_Context createDatabaseSpecification_() throws RecognitionException {
		CreateDatabaseSpecification_Context _localctx = new CreateDatabaseSpecification_Context(_ctx, getState());
		enterRule(_localctx, 342, RULE_createDatabaseSpecification_);
		int _la;
		try {
			setState(2742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2718);
					match(DEFAULT);
					}
				}

				setState(2724);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(2721);
					match(CHARACTER);
					setState(2722);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(2723);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(2726);
					match(EQ_);
					}
				}

				setState(2729);
				characterSetName_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2730);
					match(DEFAULT);
					}
				}

				setState(2733);
				match(COLLATE);
				setState(2735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(2734);
					match(EQ_);
					}
				}

				setState(2737);
				collationName_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2738);
				match(DEFAULT);
				setState(2739);
				match(ENCRYPTION);
				setState(2740);
				match(EQ_);
				setState(2741);
				match(Y_N_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySQLStatementParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySQLStatementParser.SCHEMA, 0); }
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2744);
			match(DROP);
			setState(2745);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==DATABASE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2746);
				match(IF);
				setState(2747);
				match(EXISTS);
				}
			}

			setState(2750);
			schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(MySQLStatementParser.INSTANCE, 0); }
		public InstanceActionContext instanceAction() {
			return getRuleContext(InstanceActionContext.class,0);
		}
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2752);
			match(ALTER);
			setState(2753);
			match(INSTANCE);
			setState(2754);
			instanceAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstanceActionContext extends ParserRuleContext {
		public TerminalNode ROTATE() { return getToken(MySQLStatementParser.ROTATE, 0); }
		public TerminalNode INNODB_() { return getToken(MySQLStatementParser.INNODB_, 0); }
		public TerminalNode MASTER() { return getToken(MySQLStatementParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public TerminalNode BINLOG() { return getToken(MySQLStatementParser.BINLOG, 0); }
		public TerminalNode RELOAD() { return getToken(MySQLStatementParser.RELOAD, 0); }
		public TerminalNode TLS_() { return getToken(MySQLStatementParser.TLS_, 0); }
		public TerminalNode NO() { return getToken(MySQLStatementParser.NO, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySQLStatementParser.ROLLBACK, 0); }
		public TerminalNode ON() { return getToken(MySQLStatementParser.ON, 0); }
		public TerminalNode ERROR() { return getToken(MySQLStatementParser.ERROR, 0); }
		public InstanceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_instanceAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitInstanceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstanceActionContext instanceAction() throws RecognitionException {
		InstanceActionContext _localctx = new InstanceActionContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_instanceAction);
		int _la;
		try {
			setState(2772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2756);
				match(ROTATE);
				setState(2757);
				match(INNODB_);
				setState(2758);
				match(MASTER);
				setState(2759);
				match(KEY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2760);
				match(ROTATE);
				setState(2761);
				match(BINLOG);
				setState(2762);
				match(MASTER);
				setState(2763);
				match(KEY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2764);
				match(RELOAD);
				setState(2765);
				match(TLS_);
				setState(2770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2766);
					match(NO);
					setState(2767);
					match(ROLLBACK);
					setState(2768);
					match(ON);
					setState(2769);
					match(ERROR);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MySQLStatementParser.EVENT, 0); }
		public EventNameContext eventName() {
			return getRuleContext(EventNameContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySQLStatementParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySQLStatementParser.SCHEDULE, 0); }
		public ScheduleExpression_Context scheduleExpression_() {
			return getRuleContext(ScheduleExpression_Context.class,0);
		}
		public TerminalNode DO() { return getToken(MySQLStatementParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public List<TerminalNode> NOT() { return getTokens(MySQLStatementParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(MySQLStatementParser.NOT, i);
		}
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public TerminalNode COMPLETION() { return getToken(MySQLStatementParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySQLStatementParser.PRESERVE, 0); }
		public TerminalNode ENABLE() { return getToken(MySQLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySQLStatementParser.DISABLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLStatementParser.SLAVE, 0); }
		public TerminalNode COMMENT() { return getToken(MySQLStatementParser.COMMENT, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2774);
			match(CREATE);
			setState(2776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2775);
				ownerStatement();
				}
			}

			setState(2778);
			match(EVENT);
			setState(2782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2779);
				match(IF);
				setState(2780);
				match(NOT);
				setState(2781);
				match(EXISTS);
				}
			}

			setState(2784);
			eventName();
			setState(2785);
			match(ON);
			setState(2786);
			match(SCHEDULE);
			setState(2787);
			scheduleExpression_();
			setState(2794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2788);
				match(ON);
				setState(2789);
				match(COMPLETION);
				setState(2791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2790);
					match(NOT);
					}
				}

				setState(2793);
				match(PRESERVE);
				}
			}

			setState(2801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				setState(2796);
				match(ENABLE);
				}
				break;
			case 2:
				{
				setState(2797);
				match(DISABLE);
				}
				break;
			case 3:
				{
				setState(2798);
				match(DISABLE);
				setState(2799);
				match(ON);
				setState(2800);
				match(SLAVE);
				}
				break;
			}
			setState(2805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2803);
				match(COMMENT);
				setState(2804);
				match(STRING_);
				}
			}

			setState(2807);
			match(DO);
			setState(2808);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(MySQLStatementParser.EVENT, 0); }
		public List<EventNameContext> eventName() {
			return getRuleContexts(EventNameContext.class);
		}
		public EventNameContext eventName(int i) {
			return getRuleContext(EventNameContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySQLStatementParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySQLStatementParser.SCHEDULE, 0); }
		public ScheduleExpression_Context scheduleExpression_() {
			return getRuleContext(ScheduleExpression_Context.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySQLStatementParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySQLStatementParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(MySQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public TerminalNode ENABLE() { return getToken(MySQLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySQLStatementParser.DISABLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLStatementParser.SLAVE, 0); }
		public TerminalNode COMMENT() { return getToken(MySQLStatementParser.COMMENT, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode DO() { return getToken(MySQLStatementParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2810);
			match(ALTER);
			setState(2812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2811);
				ownerStatement();
				}
			}

			setState(2814);
			match(EVENT);
			setState(2815);
			eventName();
			setState(2819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				setState(2816);
				match(ON);
				setState(2817);
				match(SCHEDULE);
				setState(2818);
				scheduleExpression_();
				}
				break;
			}
			setState(2827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2821);
				match(ON);
				setState(2822);
				match(COMPLETION);
				setState(2824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2823);
					match(NOT);
					}
				}

				setState(2826);
				match(PRESERVE);
				}
			}

			setState(2832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RENAME) {
				{
				setState(2829);
				match(RENAME);
				setState(2830);
				match(TO);
				setState(2831);
				eventName();
				}
			}

			setState(2839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				{
				setState(2834);
				match(ENABLE);
				}
				break;
			case 2:
				{
				setState(2835);
				match(DISABLE);
				}
				break;
			case 3:
				{
				setState(2836);
				match(DISABLE);
				setState(2837);
				match(ON);
				setState(2838);
				match(SLAVE);
				}
				break;
			}
			setState(2843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2841);
				match(COMMENT);
				setState(2842);
				match(STRING_);
				}
			}

			setState(2847);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DO) {
				{
				setState(2845);
				match(DO);
				setState(2846);
				routineBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySQLStatementParser.EVENT, 0); }
		public EventNameContext eventName() {
			return getRuleContext(EventNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_dropEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2849);
			match(DROP);
			setState(2850);
			match(EVENT);
			setState(2853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2851);
				match(IF);
				setState(2852);
				match(EXISTS);
				}
			}

			setState(2855);
			eventName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLStatementParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode RETURNS() { return getToken(MySQLStatementParser.RETURNS, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public List<RoutineOption_Context> routineOption_() {
			return getRuleContexts(RoutineOption_Context.class);
		}
		public RoutineOption_Context routineOption_(int i) {
			return getRuleContext(RoutineOption_Context.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_createFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2857);
			match(CREATE);
			setState(2859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2858);
				ownerStatement();
				}
			}

			setState(2861);
			match(FUNCTION);
			setState(2862);
			functionName();
			setState(2863);
			match(LP_);
			setState(2867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
				{
				setState(2864);
				identifier();
				setState(2865);
				dataType();
				}
			}

			setState(2875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2869);
				match(COMMA_);
				setState(2870);
				identifier();
				setState(2871);
				dataType();
				}
				}
				setState(2877);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2878);
			match(RP_);
			setState(2879);
			match(RETURNS);
			setState(2880);
			dataType();
			setState(2884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NOT || _la==SQL || _la==NO || _la==COMMENT || _la==LANGUAGE || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (DETERMINISTIC - 433)) | (1L << (CONTAINS - 433)) | (1L << (READS - 433)) | (1L << (MODIFIES - 433)))) != 0)) {
				{
				{
				setState(2881);
				routineOption_();
				}
				}
				setState(2886);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2887);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLStatementParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public List<RoutineOption_Context> routineOption_() {
			return getRuleContexts(RoutineOption_Context.class);
		}
		public RoutineOption_Context routineOption_(int i) {
			return getRuleContext(RoutineOption_Context.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2889);
			match(ALTER);
			setState(2890);
			match(FUNCTION);
			setState(2891);
			functionName();
			setState(2895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NOT || _la==SQL || _la==NO || _la==COMMENT || _la==LANGUAGE || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (DETERMINISTIC - 433)) | (1L << (CONTAINS - 433)) | (1L << (READS - 433)) | (1L << (MODIFIES - 433)))) != 0)) {
				{
				{
				setState(2892);
				routineOption_();
				}
				}
				setState(2897);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLStatementParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_dropFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2898);
			match(DROP);
			setState(2899);
			match(FUNCTION);
			{
			setState(2900);
			match(IF);
			setState(2901);
			match(EXISTS);
			}
			setState(2903);
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLStatementParser.PROCEDURE, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameter_Context> procedureParameter_() {
			return getRuleContexts(ProcedureParameter_Context.class);
		}
		public ProcedureParameter_Context procedureParameter_(int i) {
			return getRuleContext(ProcedureParameter_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public List<RoutineOption_Context> routineOption_() {
			return getRuleContexts(RoutineOption_Context.class);
		}
		public RoutineOption_Context routineOption_(int i) {
			return getRuleContext(RoutineOption_Context.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_createProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2905);
			match(CREATE);
			setState(2907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2906);
				ownerStatement();
				}
			}

			setState(2909);
			match(PROCEDURE);
			setState(2910);
			functionName();
			setState(2911);
			match(LP_);
			setState(2913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN || _la==OUT || _la==INOUT) {
				{
				setState(2912);
				procedureParameter_();
				}
			}

			setState(2919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2915);
				match(COMMA_);
				setState(2916);
				procedureParameter_();
				}
				}
				setState(2921);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2922);
			match(RP_);
			setState(2926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NOT || _la==SQL || _la==NO || _la==COMMENT || _la==LANGUAGE || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (DETERMINISTIC - 433)) | (1L << (CONTAINS - 433)) | (1L << (READS - 433)) | (1L << (MODIFIES - 433)))) != 0)) {
				{
				{
				setState(2923);
				routineOption_();
				}
				}
				setState(2928);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2929);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLStatementParser.PROCEDURE, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public List<RoutineOption_Context> routineOption_() {
			return getRuleContexts(RoutineOption_Context.class);
		}
		public RoutineOption_Context routineOption_(int i) {
			return getRuleContext(RoutineOption_Context.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2931);
			match(ALTER);
			setState(2932);
			match(PROCEDURE);
			setState(2933);
			functionName();
			setState(2937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NOT || _la==SQL || _la==NO || _la==COMMENT || _la==LANGUAGE || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (DETERMINISTIC - 433)) | (1L << (CONTAINS - 433)) | (1L << (READS - 433)) | (1L << (MODIFIES - 433)))) != 0)) {
				{
				{
				setState(2934);
				routineOption_();
				}
				}
				setState(2939);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLStatementParser.PROCEDURE, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2940);
			match(DROP);
			setState(2941);
			match(PROCEDURE);
			setState(2944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2942);
				match(IF);
				setState(2943);
				match(EXISTS);
				}
			}

			setState(2946);
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(MySQLStatementParser.SERVER, 0); }
		public ServerNameContext serverName() {
			return getRuleContext(ServerNameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(MySQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(MySQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(MySQLStatementParser.WRAPPER, 0); }
		public WrapperNameContext wrapperName() {
			return getRuleContext(WrapperNameContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(MySQLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<ServerOption_Context> serverOption_() {
			return getRuleContexts(ServerOption_Context.class);
		}
		public ServerOption_Context serverOption_(int i) {
			return getRuleContext(ServerOption_Context.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2948);
			match(CREATE);
			setState(2949);
			match(SERVER);
			setState(2950);
			serverName();
			setState(2951);
			match(FOREIGN);
			setState(2952);
			match(DATA);
			setState(2953);
			match(WRAPPER);
			setState(2954);
			wrapperName();
			setState(2955);
			match(OPTIONS);
			setState(2956);
			match(LP_);
			setState(2957);
			serverOption_();
			setState(2962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2958);
				match(COMMA_);
				setState(2959);
				serverOption_();
				}
				}
				setState(2964);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2965);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MySQLStatementParser.SERVER, 0); }
		public ServerNameContext serverName() {
			return getRuleContext(ServerNameContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(MySQLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<ServerOption_Context> serverOption_() {
			return getRuleContexts(ServerOption_Context.class);
		}
		public ServerOption_Context serverOption_(int i) {
			return getRuleContext(ServerOption_Context.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2967);
			match(ALTER);
			setState(2968);
			match(SERVER);
			setState(2969);
			serverName();
			setState(2970);
			match(OPTIONS);
			setState(2971);
			match(LP_);
			setState(2972);
			serverOption_();
			setState(2977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2973);
				match(COMMA_);
				setState(2974);
				serverOption_();
				}
				}
				setState(2979);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2980);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MySQLStatementParser.SERVER, 0); }
		public ServerNameContext serverName() {
			return getRuleContext(ServerNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2982);
			match(DROP);
			setState(2983);
			match(SERVER);
			setState(2986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2984);
				match(IF);
				setState(2985);
				match(EXISTS);
				}
			}

			setState(2988);
			serverName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MySQLStatementParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySQLStatementParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySQLStatementParser.ALGORITHM, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySQLStatementParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySQLStatementParser.SECURITY, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySQLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySQLStatementParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySQLStatementParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySQLStatementParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySQLStatementParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySQLStatementParser.INVOKER, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode CASCADED() { return getToken(MySQLStatementParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLStatementParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2990);
			match(CREATE);
			setState(2993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2991);
				match(OR);
				setState(2992);
				match(REPLACE);
				}
			}

			setState(2998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2995);
				match(ALGORITHM);
				setState(2996);
				match(EQ_);
				setState(2997);
				_la = _input.LA(1);
				if ( !(((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (TEMPTABLE - 442)) | (1L << (MERGE - 442)) | (1L << (UNDEFINED - 442)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(3000);
				ownerStatement();
				}
			}

			setState(3006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(3003);
				match(SQL);
				setState(3004);
				match(SECURITY);
				setState(3005);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3008);
			match(VIEW);
			setState(3009);
			viewName();
			setState(3021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(3010);
				match(LP_);
				setState(3011);
				identifier();
				setState(3016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3012);
					match(COMMA_);
					setState(3013);
					identifier();
					}
					}
					setState(3018);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3019);
				match(RP_);
				}
			}

			setState(3023);
			match(AS);
			setState(3024);
			select();
			setState(3031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3025);
				match(WITH);
				setState(3027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(3026);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3029);
				match(CHECK);
				setState(3030);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(MySQLStatementParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySQLStatementParser.ALGORITHM, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySQLStatementParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySQLStatementParser.SECURITY, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySQLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySQLStatementParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySQLStatementParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySQLStatementParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySQLStatementParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySQLStatementParser.INVOKER, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode CASCADED() { return getToken(MySQLStatementParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLStatementParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3033);
			match(ALTER);
			setState(3037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(3034);
				match(ALGORITHM);
				setState(3035);
				match(EQ_);
				setState(3036);
				_la = _input.LA(1);
				if ( !(((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (TEMPTABLE - 442)) | (1L << (MERGE - 442)) | (1L << (UNDEFINED - 442)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(3039);
				ownerStatement();
				}
			}

			setState(3045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(3042);
				match(SQL);
				setState(3043);
				match(SECURITY);
				setState(3044);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3047);
			match(VIEW);
			setState(3048);
			viewName();
			setState(3060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(3049);
				match(LP_);
				setState(3050);
				identifier();
				setState(3055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3051);
					match(COMMA_);
					setState(3052);
					identifier();
					}
					}
					setState(3057);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3058);
				match(RP_);
				}
			}

			setState(3062);
			match(AS);
			setState(3063);
			select();
			setState(3070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3064);
				match(WITH);
				setState(3066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(3065);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3068);
				match(CHECK);
				setState(3069);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MySQLStatementParser.VIEW, 0); }
		public List<ViewNameContext> viewName() {
			return getRuleContexts(ViewNameContext.class);
		}
		public ViewNameContext viewName(int i) {
			return getRuleContext(ViewNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode RESTRICT() { return getToken(MySQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySQLStatementParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3072);
			match(DROP);
			setState(3073);
			match(VIEW);
			setState(3076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3074);
				match(IF);
				setState(3075);
				match(EXISTS);
				}
			}

			setState(3078);
			viewName();
			setState(3083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3079);
				match(COMMA_);
				setState(3080);
				viewName();
				}
				}
				setState(3085);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3086);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLStatementParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySQLStatementParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySQLStatementParser.DATAFILE, 0); }
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public TerminalNode UNDO() { return getToken(MySQLStatementParser.UNDO, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySQLStatementParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public FileSizeLiteral_Context fileSizeLiteral_() {
			return getRuleContext(FileSizeLiteral_Context.class,0);
		}
		public TerminalNode ENCRYPTION() { return getToken(MySQLStatementParser.ENCRYPTION, 0); }
		public TerminalNode Y_N_() { return getToken(MySQLStatementParser.Y_N_, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3089);
			match(CREATE);
			setState(3091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO) {
				{
				setState(3090);
				match(UNDO);
				}
			}

			setState(3093);
			match(TABLESPACE);
			setState(3094);
			identifier();
			setState(3095);
			match(ADD);
			setState(3096);
			match(DATAFILE);
			setState(3097);
			match(STRING_);
			setState(3101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(3098);
				match(FILE_BLOCK_SIZE);
				setState(3099);
				match(EQ_);
				setState(3100);
				fileSizeLiteral_();
				}
			}

			setState(3106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPTION) {
				{
				setState(3103);
				match(ENCRYPTION);
				setState(3104);
				match(EQ_);
				setState(3105);
				match(Y_N_);
				}
			}

			setState(3113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(3108);
				match(ENGINE);
				setState(3110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3109);
					match(EQ_);
					}
				}

				setState(3112);
				match(STRING_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLStatementParser.TABLESPACE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySQLStatementParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySQLStatementParser.DATAFILE, 0); }
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public TerminalNode USE() { return getToken(MySQLStatementParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLStatementParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public TerminalNode UNDO() { return getToken(MySQLStatementParser.UNDO, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySQLStatementParser.EXTENT_SIZE, 0); }
		public List<FileSizeLiteral_Context> fileSizeLiteral_() {
			return getRuleContexts(FileSizeLiteral_Context.class);
		}
		public FileSizeLiteral_Context fileSizeLiteral_(int i) {
			return getRuleContext(FileSizeLiteral_Context.class,i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySQLStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySQLStatementParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySQLStatementParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySQLStatementParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySQLStatementParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySQLStatementParser.COMMENT, 0); }
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3115);
			match(CREATE);
			setState(3117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO) {
				{
				setState(3116);
				match(UNDO);
				}
			}

			setState(3119);
			match(TABLESPACE);
			setState(3120);
			identifier();
			setState(3121);
			match(ADD);
			setState(3122);
			match(DATAFILE);
			setState(3123);
			match(STRING_);
			setState(3124);
			match(USE);
			setState(3125);
			match(LOGFILE);
			setState(3126);
			match(GROUP);
			setState(3127);
			identifier();
			setState(3133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(3128);
				match(EXTENT_SIZE);
				setState(3130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3129);
					match(EQ_);
					}
				}

				setState(3132);
				fileSizeLiteral_();
				}
			}

			setState(3140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(3135);
				match(INITIAL_SIZE);
				setState(3137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3136);
					match(EQ_);
					}
				}

				setState(3139);
				fileSizeLiteral_();
				}
			}

			setState(3147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(3142);
				match(AUTOEXTEND_SIZE);
				setState(3144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3143);
					match(EQ_);
					}
				}

				setState(3146);
				fileSizeLiteral_();
				}
			}

			setState(3154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(3149);
				match(MAX_SIZE);
				setState(3151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3150);
					match(EQ_);
					}
				}

				setState(3153);
				fileSizeLiteral_();
				}
			}

			setState(3161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(3156);
				match(NODEGROUP);
				setState(3158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3157);
					match(EQ_);
					}
				}

				setState(3160);
				identifier();
				}
			}

			setState(3164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(3163);
				match(WAIT);
				}
			}

			setState(3171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(3166);
				match(COMMENT);
				setState(3168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3167);
					match(EQ_);
					}
				}

				setState(3170);
				match(STRING_);
				}
			}

			setState(3173);
			match(ENGINE);
			setState(3175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(3174);
				match(EQ_);
				}
			}

			setState(3177);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLStatementParser.TABLESPACE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DATAFILE() { return getToken(MySQLStatementParser.DATAFILE, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public TerminalNode ADD() { return getToken(MySQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySQLStatementParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public FileSizeLiteral_Context fileSizeLiteral_() {
			return getRuleContext(FileSizeLiteral_Context.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySQLStatementParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3179);
			match(ALTER);
			setState(3180);
			match(TABLESPACE);
			setState(3181);
			identifier();
			setState(3182);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==ADD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3183);
			match(DATAFILE);
			setState(3184);
			match(STRING_);
			setState(3188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(3185);
				match(INITIAL_SIZE);
				setState(3186);
				match(EQ_);
				setState(3187);
				fileSizeLiteral_();
				}
			}

			setState(3191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(3190);
				match(WAIT);
				}
			}

			setState(3193);
			match(ENGINE);
			setState(3195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(3194);
				match(EQ_);
				}
			}

			setState(3197);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLStatementParser.TABLESPACE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3199);
			match(DROP);
			setState(3200);
			match(TABLESPACE);
			setState(3201);
			identifier();
			setState(3207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(3202);
				match(ENGINE);
				setState(3204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3203);
					match(EQ_);
					}
				}

				setState(3206);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLStatementParser.GROUP, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySQLStatementParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySQLStatementParser.UNDOFILE, 0); }
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySQLStatementParser.INITIAL_SIZE, 0); }
		public List<FileSizeLiteral_Context> fileSizeLiteral_() {
			return getRuleContexts(FileSizeLiteral_Context.class);
		}
		public FileSizeLiteral_Context fileSizeLiteral_(int i) {
			return getRuleContext(FileSizeLiteral_Context.class,i);
		}
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySQLStatementParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySQLStatementParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySQLStatementParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySQLStatementParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySQLStatementParser.COMMENT, 0); }
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3209);
			match(CREATE);
			setState(3210);
			match(LOGFILE);
			setState(3211);
			match(GROUP);
			setState(3212);
			identifier();
			setState(3213);
			match(ADD);
			setState(3214);
			match(UNDOFILE);
			setState(3215);
			match(STRING_);
			setState(3221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(3216);
				match(INITIAL_SIZE);
				setState(3218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3217);
					match(EQ_);
					}
				}

				setState(3220);
				fileSizeLiteral_();
				}
			}

			setState(3228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(3223);
				match(UNDO_BUFFER_SIZE);
				setState(3225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3224);
					match(EQ_);
					}
				}

				setState(3227);
				fileSizeLiteral_();
				}
			}

			setState(3235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(3230);
				match(REDO_BUFFER_SIZE);
				setState(3232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3231);
					match(EQ_);
					}
				}

				setState(3234);
				fileSizeLiteral_();
				}
			}

			setState(3242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(3237);
				match(NODEGROUP);
				setState(3239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3238);
					match(EQ_);
					}
				}

				setState(3241);
				identifier();
				}
			}

			setState(3245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(3244);
				match(WAIT);
				}
			}

			setState(3252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(3247);
				match(COMMENT);
				setState(3249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3248);
					match(EQ_);
					}
				}

				setState(3251);
				match(STRING_);
				}
			}

			setState(3254);
			match(ENGINE);
			setState(3256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(3255);
				match(EQ_);
				}
			}

			setState(3258);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(MySQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLStatementParser.GROUP, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySQLStatementParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySQLStatementParser.UNDOFILE, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySQLStatementParser.INITIAL_SIZE, 0); }
		public FileSizeLiteral_Context fileSizeLiteral_() {
			return getRuleContext(FileSizeLiteral_Context.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySQLStatementParser.WAIT, 0); }
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3260);
			match(ALTER);
			setState(3261);
			match(LOGFILE);
			setState(3262);
			match(GROUP);
			setState(3263);
			identifier();
			setState(3264);
			match(ADD);
			setState(3265);
			match(UNDOFILE);
			setState(3266);
			match(STRING_);
			setState(3272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(3267);
				match(INITIAL_SIZE);
				setState(3269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3268);
					match(EQ_);
					}
				}

				setState(3271);
				fileSizeLiteral_();
				}
			}

			setState(3275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(3274);
				match(WAIT);
				}
			}

			setState(3277);
			match(ENGINE);
			setState(3279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(3278);
				match(EQ_);
				}
			}

			setState(3281);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(MySQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLStatementParser.GROUP, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3283);
			match(DROP);
			setState(3284);
			match(LOGFILE);
			setState(3285);
			match(GROUP);
			setState(3286);
			identifier();
			setState(3287);
			match(ENGINE);
			setState(3288);
			match(EQ_);
			setState(3289);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySQLStatementParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TriggerTimeContext triggerTime() {
			return getRuleContext(TriggerTimeContext.class,0);
		}
		public TriggerEventContext triggerEvent() {
			return getRuleContext(TriggerEventContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySQLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(MySQLStatementParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(MySQLStatementParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TriggerOrderContext triggerOrder() {
			return getRuleContext(TriggerOrderContext.class,0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3291);
			match(CREATE);
			setState(3293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(3292);
				ownerStatement();
				}
			}

			setState(3295);
			match(TRIGGER);
			setState(3296);
			triggerName();
			setState(3297);
			triggerTime();
			setState(3298);
			triggerEvent();
			setState(3299);
			match(ON);
			setState(3300);
			tableName();
			setState(3301);
			match(FOR);
			setState(3302);
			match(EACH);
			setState(3303);
			match(ROW);
			setState(3305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOLLOWS || _la==PRECEDES) {
				{
				setState(3304);
				triggerOrder();
				}
			}

			setState(3307);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableSpecification_Context extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(MySQLStatementParser.TEMPORARY, 0); }
		public CreateTableSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableSpecification_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateTableSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableSpecification_Context createTableSpecification_() throws RecognitionException {
		CreateTableSpecification_Context _localctx = new CreateTableSpecification_Context(_ctx, getState());
		enterRule(_localctx, 396, RULE_createTableSpecification_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3309);
			match(TEMPORARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNotExistClause_Context extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public TableNotExistClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNotExistClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTableNotExistClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNotExistClause_Context tableNotExistClause_() throws RecognitionException {
		TableNotExistClause_Context _localctx = new TableNotExistClause_Context(_ctx, getState());
		enterRule(_localctx, 398, RULE_tableNotExistClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3311);
				match(IF);
				setState(3312);
				match(NOT);
				setState(3313);
				match(EXISTS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public CreateDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionClauseContext createDefinitionClause() throws RecognitionException {
		CreateDefinitionClauseContext _localctx = new CreateDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_createDefinitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3316);
			match(LP_);
			setState(3317);
			createDefinition();
			setState(3322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3318);
				match(COMMA_);
				setState(3319);
				createDefinition();
				}
				}
				setState(3324);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3325);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public IndexDefinition_Context indexDefinition_() {
			return getRuleContext(IndexDefinition_Context.class,0);
		}
		public ConstraintDefinitionContext constraintDefinition() {
			return getRuleContext(ConstraintDefinitionContext.class,0);
		}
		public CheckConstraintDefinitionContext checkConstraintDefinition() {
			return getRuleContext(CheckConstraintDefinitionContext.class,0);
		}
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_createDefinition);
		try {
			setState(3331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3327);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3328);
				indexDefinition_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3329);
				constraintDefinition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3330);
				checkConstraintDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<StorageOptionContext> storageOption() {
			return getRuleContexts(StorageOptionContext.class);
		}
		public StorageOptionContext storageOption(int i) {
			return getRuleContext(StorageOptionContext.class,i);
		}
		public List<GeneratedOptionContext> generatedOption() {
			return getRuleContexts(GeneratedOptionContext.class);
		}
		public GeneratedOptionContext generatedOption(int i) {
			return getRuleContext(GeneratedOptionContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3333);
			columnName();
			setState(3334);
			dataType();
			setState(3347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				setState(3338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (CONSTRAINT - 60)) | (1L << (PRIMARY - 60)) | (1L << (UNIQUE - 60)) | (1L << (KEY - 60)) | (1L << (NOT - 60)) | (1L << (NULL - 60)))) != 0) || _la==DEFAULT || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (STORAGE - 221)) | (1L << (CHECK - 221)) | (1L << (REFERENCES - 221)) | (1L << (COLLATE - 221)) | (1L << (COMMENT - 221)))) != 0) || _la==COLUMN_FORMAT || _la==AUTO_INCREMENT) {
					{
					{
					setState(3335);
					storageOption();
					}
					}
					setState(3340);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (CONSTRAINT - 60)) | (1L << (PRIMARY - 60)) | (1L << (UNIQUE - 60)) | (1L << (KEY - 60)) | (1L << (AS - 60)) | (1L << (NOT - 60)) | (1L << (NULL - 60)))) != 0) || ((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (GENERATED - 218)) | (1L << (STORED - 218)) | (1L << (VIRTUAL - 218)) | (1L << (CHECK - 218)) | (1L << (REFERENCES - 218)) | (1L << (COLLATE - 218)) | (1L << (COMMENT - 218)))) != 0)) {
					{
					{
					setState(3341);
					generatedOption();
					}
					}
					setState(3346);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageOptionContext extends ParserRuleContext {
		public DataTypeGenericOptionContext dataTypeGenericOption() {
			return getRuleContext(DataTypeGenericOptionContext.class,0);
		}
		public TerminalNode AUTO_INCREMENT() { return getToken(MySQLStatementParser.AUTO_INCREMENT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public LiteralsContext literals() {
			return getRuleContext(LiteralsContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COLUMN_FORMAT() { return getToken(MySQLStatementParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySQLStatementParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySQLStatementParser.DYNAMIC, 0); }
		public TerminalNode STORAGE() { return getToken(MySQLStatementParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySQLStatementParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySQLStatementParser.MEMORY, 0); }
		public StorageOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitStorageOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageOptionContext storageOption() throws RecognitionException {
		StorageOptionContext _localctx = new StorageOptionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_storageOption);
		int _la;
		try {
			setState(3360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case KEY:
			case NOT:
			case NULL:
			case CHECK:
			case REFERENCES:
			case COLLATE:
			case COMMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3349);
				dataTypeGenericOption();
				}
				break;
			case AUTO_INCREMENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3350);
				match(AUTO_INCREMENT);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3351);
				match(DEFAULT);
				setState(3354);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3352);
					literals();
					}
					break;
				case 2:
					{
					setState(3353);
					expr(0);
					}
					break;
				}
				}
				break;
			case COLUMN_FORMAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3356);
				match(COLUMN_FORMAT);
				setState(3357);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3358);
				match(STORAGE);
				setState(3359);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneratedOptionContext extends ParserRuleContext {
		public DataTypeGenericOptionContext dataTypeGenericOption() {
			return getRuleContext(DataTypeGenericOptionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(MySQLStatementParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(MySQLStatementParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySQLStatementParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(MySQLStatementParser.STORED, 0); }
		public GeneratedOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitGeneratedOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedOptionContext generatedOption() throws RecognitionException {
		GeneratedOptionContext _localctx = new GeneratedOptionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_generatedOption);
		int _la;
		try {
			setState(3370);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case KEY:
			case NOT:
			case NULL:
			case CHECK:
			case REFERENCES:
			case COLLATE:
			case COMMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3362);
				dataTypeGenericOption();
				}
				break;
			case AS:
			case GENERATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(3363);
					match(GENERATED);
					setState(3364);
					match(ALWAYS);
					}
				}

				setState(3367);
				match(AS);
				setState(3368);
				expr(0);
				}
				break;
			case STORED:
			case VIRTUAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3369);
				_la = _input.LA(1);
				if ( !(_la==STORED || _la==VIRTUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeGenericOptionContext extends ParserRuleContext {
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(MySQLStatementParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public TerminalNode NULL() { return getToken(MySQLStatementParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public CheckConstraintDefinitionContext checkConstraintDefinition() {
			return getRuleContext(CheckConstraintDefinitionContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySQLStatementParser.COMMENT, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public DataTypeGenericOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeGenericOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDataTypeGenericOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeGenericOptionContext dataTypeGenericOption() throws RecognitionException {
		DataTypeGenericOptionContext _localctx = new DataTypeGenericOptionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_dataTypeGenericOption);
		int _la;
		try {
			setState(3386);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case KEY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3372);
				primaryKey();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3373);
				match(UNIQUE);
				setState(3375);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(3374);
					match(KEY);
					}
					break;
				}
				}
				break;
			case NOT:
			case NULL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3377);
					match(NOT);
					}
				}

				setState(3380);
				match(NULL);
				}
				break;
			case COLLATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3381);
				collateClause_();
				}
				break;
			case CONSTRAINT:
			case CHECK:
				enterOuterAlt(_localctx, 5);
				{
				setState(3382);
				checkConstraintDefinition();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 6);
				{
				setState(3383);
				referenceDefinition();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 7);
				{
				setState(3384);
				match(COMMENT);
				setState(3385);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConstraintDefinitionContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(MySQLStatementParser.CHECK, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySQLStatementParser.CONSTRAINT, 0); }
		public TerminalNode ENFORCED() { return getToken(MySQLStatementParser.ENFORCED, 0); }
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public CheckConstraintDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraintDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCheckConstraintDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConstraintDefinitionContext checkConstraintDefinition() throws RecognitionException {
		CheckConstraintDefinitionContext _localctx = new CheckConstraintDefinitionContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_checkConstraintDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3388);
				match(CONSTRAINT);
				setState(3390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
					{
					setState(3389);
					ignoredIdentifier_();
					}
				}

				}
			}

			setState(3394);
			match(CHECK);
			setState(3395);
			expr(0);
			setState(3400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				setState(3397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3396);
					match(NOT);
					}
				}

				setState(3399);
				match(ENFORCED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(MySQLStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public KeyParts_Context keyParts_() {
			return getRuleContext(KeyParts_Context.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySQLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(MySQLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySQLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySQLStatementParser.SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(MySQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySQLStatementParser.ON, i);
		}
		public List<ReferenceOption_Context> referenceOption_() {
			return getRuleContexts(ReferenceOption_Context.class);
		}
		public ReferenceOption_Context referenceOption_(int i) {
			return getRuleContext(ReferenceOption_Context.class,i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(MySQLStatementParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(MySQLStatementParser.UPDATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(MySQLStatementParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(MySQLStatementParser.DELETE, i);
		}
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3402);
			match(REFERENCES);
			setState(3403);
			tableName();
			setState(3404);
			keyParts_();
			setState(3411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				setState(3405);
				match(MATCH);
				setState(3406);
				match(FULL);
				}
				break;
			case 2:
				{
				setState(3407);
				match(MATCH);
				setState(3408);
				match(PARTIAL);
				}
				break;
			case 3:
				{
				setState(3409);
				match(MATCH);
				setState(3410);
				match(SIMPLE);
				}
				break;
			}
			setState(3418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ON) {
				{
				{
				setState(3413);
				match(ON);
				setState(3414);
				_la = _input.LA(1);
				if ( !(_la==UPDATE || _la==DELETE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3415);
				referenceOption_();
				}
				}
				setState(3420);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceOption_Context extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySQLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(MySQLStatementParser.NULL, 0); }
		public TerminalNode NO() { return getToken(MySQLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySQLStatementParser.ACTION, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public ReferenceOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitReferenceOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceOption_Context referenceOption_() throws RecognitionException {
		ReferenceOption_Context _localctx = new ReferenceOption_Context(_ctx, getState());
		enterRule(_localctx, 416, RULE_referenceOption_);
		try {
			setState(3429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3421);
				match(RESTRICT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3422);
				match(CASCADE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3423);
				match(SET);
				setState(3424);
				match(NULL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3425);
				match(NO);
				setState(3426);
				match(ACTION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3427);
				match(SET);
				setState(3428);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexDefinition_Context extends ParserRuleContext {
		public KeyParts_Context keyParts_() {
			return getRuleContext(KeyParts_Context.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public IndexType_Context indexType_() {
			return getRuleContext(IndexType_Context.class,0);
		}
		public List<IndexOption_Context> indexOption_() {
			return getRuleContexts(IndexOption_Context.class);
		}
		public IndexOption_Context indexOption_(int i) {
			return getRuleContext(IndexOption_Context.class,i);
		}
		public TerminalNode FULLTEXT() { return getToken(MySQLStatementParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySQLStatementParser.SPATIAL, 0); }
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public IndexDefinition_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexDefinition_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIndexDefinition_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexDefinition_Context indexDefinition_() throws RecognitionException {
		IndexDefinition_Context _localctx = new IndexDefinition_Context(_ctx, getState());
		enterRule(_localctx, 418, RULE_indexDefinition_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL) {
				{
				setState(3431);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY) {
				{
				setState(3434);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
				{
				setState(3437);
				indexName();
				}
			}

			setState(3441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3440);
				indexType_();
				}
			}

			setState(3443);
			keyParts_();
			setState(3447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WITH || _la==USING || _la==COMMENT || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (VISIBLE - 345)) | (1L << (INVISIBLE - 345)) | (1L << (KEY_BLOCK_SIZE - 345)))) != 0)) {
				{
				{
				setState(3444);
				indexOption_();
				}
				}
				setState(3449);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexType_Context extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySQLStatementParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySQLStatementParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySQLStatementParser.HASH, 0); }
		public IndexType_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIndexType_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexType_Context indexType_() throws RecognitionException {
		IndexType_Context _localctx = new IndexType_Context(_ctx, getState());
		enterRule(_localctx, 420, RULE_indexType_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3450);
			match(USING);
			setState(3451);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyParts_Context extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<KeyPart_Context> keyPart_() {
			return getRuleContexts(KeyPart_Context.class);
		}
		public KeyPart_Context keyPart_(int i) {
			return getRuleContext(KeyPart_Context.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public KeyParts_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyParts_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitKeyParts_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyParts_Context keyParts_() throws RecognitionException {
		KeyParts_Context _localctx = new KeyParts_Context(_ctx, getState());
		enterRule(_localctx, 422, RULE_keyParts_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3453);
			match(LP_);
			setState(3454);
			keyPart_();
			setState(3459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3455);
				match(COMMA_);
				setState(3456);
				keyPart_();
				}
				}
				setState(3461);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3462);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyPart_Context extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySQLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySQLStatementParser.DESC, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public KeyPart_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyPart_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitKeyPart_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyPart_Context keyPart_() throws RecognitionException {
		KeyPart_Context _localctx = new KeyPart_Context(_ctx, getState());
		enterRule(_localctx, 424, RULE_keyPart_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3471);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				setState(3464);
				columnName();
				setState(3468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3465);
					match(LP_);
					setState(3466);
					match(NUMBER_);
					setState(3467);
					match(RP_);
					}
				}

				}
				break;
			case 2:
				{
				setState(3470);
				expr(0);
				}
				break;
			}
			setState(3474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3473);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOption_Context extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySQLStatementParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public IndexType_Context indexType_() {
			return getRuleContext(IndexType_Context.class,0);
		}
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySQLStatementParser.PARSER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySQLStatementParser.COMMENT, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode VISIBLE() { return getToken(MySQLStatementParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySQLStatementParser.INVISIBLE, 0); }
		public IndexOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIndexOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOption_Context indexOption_() throws RecognitionException {
		IndexOption_Context _localctx = new IndexOption_Context(_ctx, getState());
		enterRule(_localctx, 426, RULE_indexOption_);
		int _la;
		try {
			setState(3488);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3476);
				match(KEY_BLOCK_SIZE);
				setState(3478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3477);
					match(EQ_);
					}
				}

				setState(3480);
				match(NUMBER_);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3481);
				indexType_();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(3482);
				match(WITH);
				setState(3483);
				match(PARSER);
				setState(3484);
				identifier();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3485);
				match(COMMENT);
				setState(3486);
				match(STRING_);
				}
				break;
			case VISIBLE:
			case INVISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3487);
				_la = _input.LA(1);
				if ( !(_la==VISIBLE || _la==INVISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintDefinitionContext extends ParserRuleContext {
		public PrimaryKeyOptionContext primaryKeyOption() {
			return getRuleContext(PrimaryKeyOptionContext.class,0);
		}
		public UniqueOption_Context uniqueOption_() {
			return getRuleContext(UniqueOption_Context.class,0);
		}
		public ForeignKeyOptionContext foreignKeyOption() {
			return getRuleContext(ForeignKeyOptionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySQLStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public ConstraintDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitConstraintDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintDefinitionContext constraintDefinition() throws RecognitionException {
		ConstraintDefinitionContext _localctx = new ConstraintDefinitionContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_constraintDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3490);
				match(CONSTRAINT);
				setState(3492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
					{
					setState(3491);
					ignoredIdentifier_();
					}
				}

				}
			}

			setState(3499);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case KEY:
				{
				setState(3496);
				primaryKeyOption();
				}
				break;
			case UNIQUE:
				{
				setState(3497);
				uniqueOption_();
				}
				break;
			case FOREIGN:
				{
				setState(3498);
				foreignKeyOption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimaryKeyOptionContext extends ParserRuleContext {
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public IndexType_Context indexType_() {
			return getRuleContext(IndexType_Context.class,0);
		}
		public List<IndexOption_Context> indexOption_() {
			return getRuleContexts(IndexOption_Context.class);
		}
		public IndexOption_Context indexOption_(int i) {
			return getRuleContext(IndexOption_Context.class,i);
		}
		public PrimaryKeyOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKeyOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPrimaryKeyOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyOptionContext primaryKeyOption() throws RecognitionException {
		PrimaryKeyOptionContext _localctx = new PrimaryKeyOptionContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_primaryKeyOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3501);
			primaryKey();
			setState(3503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3502);
				indexType_();
				}
			}

			setState(3505);
			columnNames();
			setState(3509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WITH || _la==USING || _la==COMMENT || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (VISIBLE - 345)) | (1L << (INVISIBLE - 345)) | (1L << (KEY_BLOCK_SIZE - 345)))) != 0)) {
				{
				{
				setState(3506);
				indexOption_();
				}
				}
				setState(3511);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimaryKeyContext extends ParserRuleContext {
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySQLStatementParser.PRIMARY, 0); }
		public PrimaryKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKey; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyContext primaryKey() throws RecognitionException {
		PrimaryKeyContext _localctx = new PrimaryKeyContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_primaryKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(3512);
				match(PRIMARY);
				}
			}

			setState(3515);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UniqueOption_Context extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(MySQLStatementParser.UNIQUE, 0); }
		public KeyParts_Context keyParts_() {
			return getRuleContext(KeyParts_Context.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public IndexType_Context indexType_() {
			return getRuleContext(IndexType_Context.class,0);
		}
		public List<IndexOption_Context> indexOption_() {
			return getRuleContexts(IndexOption_Context.class);
		}
		public IndexOption_Context indexOption_(int i) {
			return getRuleContext(IndexOption_Context.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public UniqueOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUniqueOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueOption_Context uniqueOption_() throws RecognitionException {
		UniqueOption_Context _localctx = new UniqueOption_Context(_ctx, getState());
		enterRule(_localctx, 434, RULE_uniqueOption_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3517);
			match(UNIQUE);
			setState(3519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY) {
				{
				setState(3518);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
				{
				setState(3521);
				indexName();
				}
			}

			setState(3525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3524);
				indexType_();
				}
			}

			setState(3527);
			keyParts_();
			setState(3531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WITH || _la==USING || _la==COMMENT || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (VISIBLE - 345)) | (1L << (INVISIBLE - 345)) | (1L << (KEY_BLOCK_SIZE - 345)))) != 0)) {
				{
				{
				setState(3528);
				indexOption_();
				}
				}
				setState(3533);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignKeyOptionContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(MySQLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public ForeignKeyOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignKeyOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitForeignKeyOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignKeyOptionContext foreignKeyOption() throws RecognitionException {
		ForeignKeyOptionContext _localctx = new ForeignKeyOptionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_foreignKeyOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3534);
			match(FOREIGN);
			setState(3535);
			match(KEY);
			setState(3537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				setState(3536);
				indexName();
				}
				break;
			}
			setState(3539);
			columnNames();
			setState(3540);
			referenceDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySQLStatementParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public CreateLikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLikeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLikeClauseContext createLikeClause() throws RecognitionException {
		CreateLikeClauseContext _localctx = new CreateLikeClauseContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_createLikeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(3542);
				match(LP_);
				}
			}

			setState(3545);
			match(LIKE);
			setState(3546);
			tableName();
			setState(3548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(3547);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexSpecification_Context extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(MySQLStatementParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySQLStatementParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySQLStatementParser.SPATIAL, 0); }
		public CreateIndexSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexSpecification_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateIndexSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexSpecification_Context createIndexSpecification_() throws RecognitionException {
		CreateIndexSpecification_Context _localctx = new CreateIndexSpecification_Context(_ctx, getState());
		enterRule(_localctx, 440, RULE_createIndexSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE || _la==FULLTEXT || _la==SPATIAL) {
				{
				setState(3550);
				_la = _input.LA(1);
				if ( !(_la==UNIQUE || _la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefinitionClauseContext extends ParserRuleContext {
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public AlterDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefinitionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefinitionClauseContext alterDefinitionClause() throws RecognitionException {
		AlterDefinitionClauseContext _localctx = new AlterDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_alterDefinitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3553);
			alterSpecification();
			setState(3558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3554);
				match(COMMA_);
				setState(3555);
				alterSpecification();
				}
				}
				setState(3560);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public TableOptions_Context tableOptions_() {
			return getRuleContext(TableOptions_Context.class,0);
		}
		public AddColumnSpecificationContext addColumnSpecification() {
			return getRuleContext(AddColumnSpecificationContext.class,0);
		}
		public AddIndexSpecificationContext addIndexSpecification() {
			return getRuleContext(AddIndexSpecificationContext.class,0);
		}
		public AddConstraintSpecificationContext addConstraintSpecification() {
			return getRuleContext(AddConstraintSpecificationContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySQLStatementParser.ADD, 0); }
		public CheckConstraintDefinitionContext checkConstraintDefinition() {
			return getRuleContext(CheckConstraintDefinitionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode CHECK() { return getToken(MySQLStatementParser.CHECK, 0); }
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode ENFORCED() { return getToken(MySQLStatementParser.ENFORCED, 0); }
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySQLStatementParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public TerminalNode INSTANT() { return getToken(MySQLStatementParser.INSTANT, 0); }
		public TerminalNode INPLACE() { return getToken(MySQLStatementParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySQLStatementParser.COPY, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public LiteralsContext literals() {
			return getRuleContext(LiteralsContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySQLStatementParser.COLUMN, 0); }
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(MySQLStatementParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySQLStatementParser.INVISIBLE, 0); }
		public ChangeColumnSpecificationContext changeColumnSpecification() {
			return getRuleContext(ChangeColumnSpecificationContext.class,0);
		}
		public ModifyColumnSpecificationContext modifyColumnSpecification() {
			return getRuleContext(ModifyColumnSpecificationContext.class,0);
		}
		public CharacterSet_Context characterSet_() {
			return getRuleContext(CharacterSet_Context.class,0);
		}
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public TerminalNode CONVERT() { return getToken(MySQLStatementParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public TerminalNode KEYS() { return getToken(MySQLStatementParser.KEYS, 0); }
		public TerminalNode DISABLE() { return getToken(MySQLStatementParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(MySQLStatementParser.ENABLE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLStatementParser.TABLESPACE, 0); }
		public TerminalNode DISCARD() { return getToken(MySQLStatementParser.DISCARD, 0); }
		public TerminalNode IMPORT_() { return getToken(MySQLStatementParser.IMPORT_, 0); }
		public DropColumnSpecificationContext dropColumnSpecification() {
			return getRuleContext(DropColumnSpecificationContext.class,0);
		}
		public DropIndexSpecificationContext dropIndexSpecification() {
			return getRuleContext(DropIndexSpecificationContext.class,0);
		}
		public DropPrimaryKeySpecificationContext dropPrimaryKeySpecification() {
			return getRuleContext(DropPrimaryKeySpecificationContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(MySQLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public TerminalNode FORCE() { return getToken(MySQLStatementParser.FORCE, 0); }
		public TerminalNode LOCK() { return getToken(MySQLStatementParser.LOCK, 0); }
		public TerminalNode NONE() { return getToken(MySQLStatementParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySQLStatementParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode ORDER() { return getToken(MySQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public RenameColumnSpecificationContext renameColumnSpecification() {
			return getRuleContext(RenameColumnSpecificationContext.class,0);
		}
		public RenameIndexSpecificationContext renameIndexSpecification() {
			return getRuleContext(RenameIndexSpecificationContext.class,0);
		}
		public RenameTableSpecificationContext renameTableSpecification() {
			return getRuleContext(RenameTableSpecificationContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(MySQLStatementParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySQLStatementParser.WITHOUT, 0); }
		public List<TerminalNode> WITH() { return getTokens(MySQLStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySQLStatementParser.WITH, i);
		}
		public TerminalNode PARTITION() { return getToken(MySQLStatementParser.PARTITION, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public PartitionDefinition_Context partitionDefinition_() {
			return getRuleContext(PartitionDefinition_Context.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public IgnoredIdentifiers_Context ignoredIdentifiers_() {
			return getRuleContext(IgnoredIdentifiers_Context.class,0);
		}
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySQLStatementParser.TRUNCATE, 0); }
		public TerminalNode COALESCE() { return getToken(MySQLStatementParser.COALESCE, 0); }
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySQLStatementParser.REORGANIZE, 0); }
		public TerminalNode INTO() { return getToken(MySQLStatementParser.INTO, 0); }
		public PartitionDefinitions_Context partitionDefinitions_() {
			return getRuleContext(PartitionDefinitions_Context.class,0);
		}
		public TerminalNode EXCHANGE() { return getToken(MySQLStatementParser.EXCHANGE, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode ANALYZE() { return getToken(MySQLStatementParser.ANALYZE, 0); }
		public TerminalNode OPTIMIZE() { return getToken(MySQLStatementParser.OPTIMIZE, 0); }
		public TerminalNode REBUILD() { return getToken(MySQLStatementParser.REBUILD, 0); }
		public TerminalNode REPAIR() { return getToken(MySQLStatementParser.REPAIR, 0); }
		public TerminalNode REMOVE() { return getToken(MySQLStatementParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySQLStatementParser.PARTITIONING, 0); }
		public TerminalNode UPGRADE() { return getToken(MySQLStatementParser.UPGRADE, 0); }
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_alterSpecification);
		int _la;
		try {
			setState(3722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3561);
				tableOptions_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3562);
				addColumnSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3563);
				addIndexSpecification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3564);
				addConstraintSpecification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3565);
				match(ADD);
				setState(3566);
				checkConstraintDefinition();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3567);
				match(DROP);
				setState(3568);
				match(CHECK);
				setState(3569);
				ignoredIdentifier_();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3570);
				match(ALTER);
				setState(3571);
				match(CHECK);
				setState(3572);
				ignoredIdentifier_();
				setState(3574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3573);
					match(NOT);
					}
				}

				setState(3576);
				match(ENFORCED);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3578);
				match(ALGORITHM);
				setState(3580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3579);
					match(EQ_);
					}
				}

				setState(3582);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3583);
				match(ALTER);
				setState(3585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(3584);
					match(COLUMN);
					}
				}

				setState(3587);
				columnName();
				setState(3593);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(3588);
					match(SET);
					setState(3589);
					match(DEFAULT);
					setState(3590);
					literals();
					}
					break;
				case DROP:
					{
					setState(3591);
					match(DROP);
					setState(3592);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3595);
				match(ALTER);
				setState(3596);
				match(INDEX);
				setState(3597);
				indexName();
				setState(3598);
				_la = _input.LA(1);
				if ( !(_la==VISIBLE || _la==INVISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3600);
				changeColumnSpecification();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3601);
				modifyColumnSpecification();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(3602);
					match(DEFAULT);
					}
				}

				setState(3605);
				characterSet_();
				setState(3607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(3606);
					collateClause_();
					}
				}

				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3609);
				match(CONVERT);
				setState(3610);
				match(TO);
				setState(3611);
				characterSet_();
				setState(3613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(3612);
					collateClause_();
					}
				}

				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3615);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3616);
				match(KEYS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3617);
				_la = _input.LA(1);
				if ( !(_la==DISCARD || _la==IMPORT_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3618);
				match(TABLESPACE);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3619);
				dropColumnSpecification();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3620);
				dropIndexSpecification();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3621);
				dropPrimaryKeySpecification();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3622);
				match(DROP);
				setState(3623);
				match(FOREIGN);
				setState(3624);
				match(KEY);
				setState(3625);
				ignoredIdentifier_();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3626);
				match(FORCE);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3627);
				match(LOCK);
				setState(3629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3628);
					match(EQ_);
					}
				}

				setState(3631);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (EXCLUSIVE - 287)) | (1L << (NONE - 287)) | (1L << (SHARED - 287)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3632);
				match(ORDER);
				setState(3633);
				match(BY);
				setState(3634);
				columnNames();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3635);
				renameColumnSpecification();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3636);
				renameIndexSpecification();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3637);
				renameTableSpecification();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3638);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3639);
				match(VALIDATION);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3640);
				match(ADD);
				setState(3641);
				match(PARTITION);
				setState(3642);
				match(LP_);
				setState(3643);
				partitionDefinition_();
				setState(3644);
				match(RP_);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3646);
				match(DROP);
				setState(3647);
				match(PARTITION);
				setState(3648);
				ignoredIdentifiers_();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(3649);
				match(DISCARD);
				setState(3650);
				match(PARTITION);
				setState(3653);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRUNCATE:
				case POSITION:
				case VIEW:
				case ANY:
				case OFFSET:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case BOOLEAN:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case OPEN:
				case NEXT:
				case NAME:
				case TYPE:
				case TABLES:
				case TABLESPACE:
				case COLUMNS:
				case FIELDS:
				case INDEXES:
				case STATUS:
				case MODIFY:
				case VALUE:
				case DUPLICATE:
				case FIRST:
				case LAST:
				case AFTER:
				case OJ:
				case ACCOUNT:
				case USER:
				case ROLE:
				case START:
				case TRANSACTION:
				case WITHOUT:
				case ESCAPE:
				case SUBPARTITION:
				case STORAGE:
				case SUPER:
				case TEMPORARY:
				case THAN:
				case UNBOUNDED:
				case SIGNED:
				case UPGRADE:
				case VALIDATION:
				case ROLLUP:
				case SOUNDS:
				case UNKNOWN:
				case OFF:
				case ALWAYS:
				case COMMITTED:
				case LEVEL:
				case NO:
				case PASSWORD:
				case PRIVILEGES:
				case ACTION:
				case ALGORITHM:
				case AUTOCOMMIT:
				case BTREE:
				case CHAIN:
				case CHARSET:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case COMMENT:
				case COMPACT:
				case COMPRESSED:
				case COMPRESSION:
				case CONNECTION:
				case CONSISTENT:
				case DATA:
				case DISCARD:
				case DISK:
				case ENCRYPTION:
				case END:
				case ENGINE:
				case EVENT:
				case EXCHANGE:
				case EXECUTE:
				case FILE:
				case FIXED:
				case FOLLOWING:
				case GLOBAL:
				case HASH:
				case IMPORT_:
				case LESS:
				case MEMORY:
				case NONE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PERSIST:
				case PRECEDING:
				case PROCESS:
				case PROXY:
				case QUICK:
				case REBUILD:
				case REDUNDANT:
				case RELOAD:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REVERSE:
				case SESSION:
				case SHUTDOWN:
				case SIMPLE:
				case SLAVE:
				case VISIBLE:
				case INVISIBLE:
				case ENFORCED:
				case AGAINST:
				case LANGUAGE:
				case MODE:
				case QUERY:
				case EXTENDED:
				case EXPANSION:
				case VARIANCE:
				case MAX_ROWS:
				case MIN_ROWS:
				case SQL_BIG_RESULT:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case ROW_FORMAT:
				case WEIGHT_STRING:
				case COLUMN_FORMAT:
				case INSERT_METHOD:
				case KEY_BLOCK_SIZE:
				case PACK_KEYS:
				case PERSIST_ONLY:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case GROUP_CONCAT:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case DELAY_KEY_WRITE:
				case ROTATE:
				case MASTER:
				case BINLOG:
				case ERROR:
				case SCHEDULE:
				case COMPLETION:
				case EVERY:
				case HOST:
				case SOCKET:
				case PORT:
				case SERVER:
				case WRAPPER:
				case OPTIONS:
				case OWNER:
				case RETURNS:
				case CONTAINS:
				case SECURITY:
				case INVOKER:
				case TEMPTABLE:
				case MERGE:
				case UNDEFINED:
				case DATAFILE:
				case FILE_BLOCK_SIZE:
				case EXTENT_SIZE:
				case INITIAL_SIZE:
				case AUTOEXTEND_SIZE:
				case MAX_SIZE:
				case NODEGROUP:
				case WAIT:
				case LOGFILE:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case REDO_BUFFER_SIZE:
				case HANDLER:
				case PREV:
				case ORGANIZATION:
				case DEFINITION:
				case DESCRIPTION:
				case REFERENCE:
				case FOLLOWS:
				case PRECEDES:
				case IMPORT:
				case CONCURRENT:
				case XML:
				case DUMPFILE:
				case SHARE:
				case CODE:
				case CONTEXT:
				case SOURCE:
				case CHANNEL:
				case CLONE:
				case AGGREGATE:
				case INSTALL:
				case COMPONENT:
				case UNINSTALL:
				case RESOURCE:
				case EXPIRE:
				case NEVER:
				case HISTORY:
				case OPTIONAL:
				case REUSE:
				case MAX_QUERIES_PER_HOUR:
				case MAX_UPDATES_PER_HOUR:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case RETAIN:
				case RANDOM:
				case OLD:
				case ISSUER:
				case SUBJECT:
				case CACHE:
				case GENERAL:
				case SLOW:
				case USER_RESOURCES:
				case EXPORT:
				case RELAY:
				case HOSTS:
				case FLUSH:
				case RESET:
				case RESTART:
				case IO_THREAD:
				case SQL_THREAD:
				case SQL_BEFORE_GTIDS:
				case SQL_AFTER_GTIDS:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case SQL_AFTER_MTS_GAPS:
				case UNTIL:
				case DEFAULT_AUTH:
				case PLUGIN_DIR:
				case STOP:
				case IDENTIFIER_:
					{
					setState(3651);
					ignoredIdentifiers_();
					}
					break;
				case ALL:
					{
					setState(3652);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3655);
				match(TABLESPACE);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(3656);
				match(IMPORT_);
				setState(3657);
				match(PARTITION);
				setState(3660);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRUNCATE:
				case POSITION:
				case VIEW:
				case ANY:
				case OFFSET:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case BOOLEAN:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case OPEN:
				case NEXT:
				case NAME:
				case TYPE:
				case TABLES:
				case TABLESPACE:
				case COLUMNS:
				case FIELDS:
				case INDEXES:
				case STATUS:
				case MODIFY:
				case VALUE:
				case DUPLICATE:
				case FIRST:
				case LAST:
				case AFTER:
				case OJ:
				case ACCOUNT:
				case USER:
				case ROLE:
				case START:
				case TRANSACTION:
				case WITHOUT:
				case ESCAPE:
				case SUBPARTITION:
				case STORAGE:
				case SUPER:
				case TEMPORARY:
				case THAN:
				case UNBOUNDED:
				case SIGNED:
				case UPGRADE:
				case VALIDATION:
				case ROLLUP:
				case SOUNDS:
				case UNKNOWN:
				case OFF:
				case ALWAYS:
				case COMMITTED:
				case LEVEL:
				case NO:
				case PASSWORD:
				case PRIVILEGES:
				case ACTION:
				case ALGORITHM:
				case AUTOCOMMIT:
				case BTREE:
				case CHAIN:
				case CHARSET:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case COMMENT:
				case COMPACT:
				case COMPRESSED:
				case COMPRESSION:
				case CONNECTION:
				case CONSISTENT:
				case DATA:
				case DISCARD:
				case DISK:
				case ENCRYPTION:
				case END:
				case ENGINE:
				case EVENT:
				case EXCHANGE:
				case EXECUTE:
				case FILE:
				case FIXED:
				case FOLLOWING:
				case GLOBAL:
				case HASH:
				case IMPORT_:
				case LESS:
				case MEMORY:
				case NONE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PERSIST:
				case PRECEDING:
				case PROCESS:
				case PROXY:
				case QUICK:
				case REBUILD:
				case REDUNDANT:
				case RELOAD:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REVERSE:
				case SESSION:
				case SHUTDOWN:
				case SIMPLE:
				case SLAVE:
				case VISIBLE:
				case INVISIBLE:
				case ENFORCED:
				case AGAINST:
				case LANGUAGE:
				case MODE:
				case QUERY:
				case EXTENDED:
				case EXPANSION:
				case VARIANCE:
				case MAX_ROWS:
				case MIN_ROWS:
				case SQL_BIG_RESULT:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case ROW_FORMAT:
				case WEIGHT_STRING:
				case COLUMN_FORMAT:
				case INSERT_METHOD:
				case KEY_BLOCK_SIZE:
				case PACK_KEYS:
				case PERSIST_ONLY:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case GROUP_CONCAT:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case DELAY_KEY_WRITE:
				case ROTATE:
				case MASTER:
				case BINLOG:
				case ERROR:
				case SCHEDULE:
				case COMPLETION:
				case EVERY:
				case HOST:
				case SOCKET:
				case PORT:
				case SERVER:
				case WRAPPER:
				case OPTIONS:
				case OWNER:
				case RETURNS:
				case CONTAINS:
				case SECURITY:
				case INVOKER:
				case TEMPTABLE:
				case MERGE:
				case UNDEFINED:
				case DATAFILE:
				case FILE_BLOCK_SIZE:
				case EXTENT_SIZE:
				case INITIAL_SIZE:
				case AUTOEXTEND_SIZE:
				case MAX_SIZE:
				case NODEGROUP:
				case WAIT:
				case LOGFILE:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case REDO_BUFFER_SIZE:
				case HANDLER:
				case PREV:
				case ORGANIZATION:
				case DEFINITION:
				case DESCRIPTION:
				case REFERENCE:
				case FOLLOWS:
				case PRECEDES:
				case IMPORT:
				case CONCURRENT:
				case XML:
				case DUMPFILE:
				case SHARE:
				case CODE:
				case CONTEXT:
				case SOURCE:
				case CHANNEL:
				case CLONE:
				case AGGREGATE:
				case INSTALL:
				case COMPONENT:
				case UNINSTALL:
				case RESOURCE:
				case EXPIRE:
				case NEVER:
				case HISTORY:
				case OPTIONAL:
				case REUSE:
				case MAX_QUERIES_PER_HOUR:
				case MAX_UPDATES_PER_HOUR:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case RETAIN:
				case RANDOM:
				case OLD:
				case ISSUER:
				case SUBJECT:
				case CACHE:
				case GENERAL:
				case SLOW:
				case USER_RESOURCES:
				case EXPORT:
				case RELAY:
				case HOSTS:
				case FLUSH:
				case RESET:
				case RESTART:
				case IO_THREAD:
				case SQL_THREAD:
				case SQL_BEFORE_GTIDS:
				case SQL_AFTER_GTIDS:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case SQL_AFTER_MTS_GAPS:
				case UNTIL:
				case DEFAULT_AUTH:
				case PLUGIN_DIR:
				case STOP:
				case IDENTIFIER_:
					{
					setState(3658);
					ignoredIdentifiers_();
					}
					break;
				case ALL:
					{
					setState(3659);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3662);
				match(TABLESPACE);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(3663);
				match(TRUNCATE);
				setState(3664);
				match(PARTITION);
				setState(3667);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRUNCATE:
				case POSITION:
				case VIEW:
				case ANY:
				case OFFSET:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case BOOLEAN:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case OPEN:
				case NEXT:
				case NAME:
				case TYPE:
				case TABLES:
				case TABLESPACE:
				case COLUMNS:
				case FIELDS:
				case INDEXES:
				case STATUS:
				case MODIFY:
				case VALUE:
				case DUPLICATE:
				case FIRST:
				case LAST:
				case AFTER:
				case OJ:
				case ACCOUNT:
				case USER:
				case ROLE:
				case START:
				case TRANSACTION:
				case WITHOUT:
				case ESCAPE:
				case SUBPARTITION:
				case STORAGE:
				case SUPER:
				case TEMPORARY:
				case THAN:
				case UNBOUNDED:
				case SIGNED:
				case UPGRADE:
				case VALIDATION:
				case ROLLUP:
				case SOUNDS:
				case UNKNOWN:
				case OFF:
				case ALWAYS:
				case COMMITTED:
				case LEVEL:
				case NO:
				case PASSWORD:
				case PRIVILEGES:
				case ACTION:
				case ALGORITHM:
				case AUTOCOMMIT:
				case BTREE:
				case CHAIN:
				case CHARSET:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case COMMENT:
				case COMPACT:
				case COMPRESSED:
				case COMPRESSION:
				case CONNECTION:
				case CONSISTENT:
				case DATA:
				case DISCARD:
				case DISK:
				case ENCRYPTION:
				case END:
				case ENGINE:
				case EVENT:
				case EXCHANGE:
				case EXECUTE:
				case FILE:
				case FIXED:
				case FOLLOWING:
				case GLOBAL:
				case HASH:
				case IMPORT_:
				case LESS:
				case MEMORY:
				case NONE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PERSIST:
				case PRECEDING:
				case PROCESS:
				case PROXY:
				case QUICK:
				case REBUILD:
				case REDUNDANT:
				case RELOAD:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REVERSE:
				case SESSION:
				case SHUTDOWN:
				case SIMPLE:
				case SLAVE:
				case VISIBLE:
				case INVISIBLE:
				case ENFORCED:
				case AGAINST:
				case LANGUAGE:
				case MODE:
				case QUERY:
				case EXTENDED:
				case EXPANSION:
				case VARIANCE:
				case MAX_ROWS:
				case MIN_ROWS:
				case SQL_BIG_RESULT:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case ROW_FORMAT:
				case WEIGHT_STRING:
				case COLUMN_FORMAT:
				case INSERT_METHOD:
				case KEY_BLOCK_SIZE:
				case PACK_KEYS:
				case PERSIST_ONLY:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case GROUP_CONCAT:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case DELAY_KEY_WRITE:
				case ROTATE:
				case MASTER:
				case BINLOG:
				case ERROR:
				case SCHEDULE:
				case COMPLETION:
				case EVERY:
				case HOST:
				case SOCKET:
				case PORT:
				case SERVER:
				case WRAPPER:
				case OPTIONS:
				case OWNER:
				case RETURNS:
				case CONTAINS:
				case SECURITY:
				case INVOKER:
				case TEMPTABLE:
				case MERGE:
				case UNDEFINED:
				case DATAFILE:
				case FILE_BLOCK_SIZE:
				case EXTENT_SIZE:
				case INITIAL_SIZE:
				case AUTOEXTEND_SIZE:
				case MAX_SIZE:
				case NODEGROUP:
				case WAIT:
				case LOGFILE:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case REDO_BUFFER_SIZE:
				case HANDLER:
				case PREV:
				case ORGANIZATION:
				case DEFINITION:
				case DESCRIPTION:
				case REFERENCE:
				case FOLLOWS:
				case PRECEDES:
				case IMPORT:
				case CONCURRENT:
				case XML:
				case DUMPFILE:
				case SHARE:
				case CODE:
				case CONTEXT:
				case SOURCE:
				case CHANNEL:
				case CLONE:
				case AGGREGATE:
				case INSTALL:
				case COMPONENT:
				case UNINSTALL:
				case RESOURCE:
				case EXPIRE:
				case NEVER:
				case HISTORY:
				case OPTIONAL:
				case REUSE:
				case MAX_QUERIES_PER_HOUR:
				case MAX_UPDATES_PER_HOUR:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case RETAIN:
				case RANDOM:
				case OLD:
				case ISSUER:
				case SUBJECT:
				case CACHE:
				case GENERAL:
				case SLOW:
				case USER_RESOURCES:
				case EXPORT:
				case RELAY:
				case HOSTS:
				case FLUSH:
				case RESET:
				case RESTART:
				case IO_THREAD:
				case SQL_THREAD:
				case SQL_BEFORE_GTIDS:
				case SQL_AFTER_GTIDS:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case SQL_AFTER_MTS_GAPS:
				case UNTIL:
				case DEFAULT_AUTH:
				case PLUGIN_DIR:
				case STOP:
				case IDENTIFIER_:
					{
					setState(3665);
					ignoredIdentifiers_();
					}
					break;
				case ALL:
					{
					setState(3666);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(3669);
				match(COALESCE);
				setState(3670);
				match(PARTITION);
				setState(3671);
				match(NUMBER_);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(3672);
				match(REORGANIZE);
				setState(3673);
				match(PARTITION);
				setState(3674);
				ignoredIdentifiers_();
				setState(3675);
				match(INTO);
				setState(3676);
				partitionDefinitions_();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(3678);
				match(EXCHANGE);
				setState(3679);
				match(PARTITION);
				setState(3680);
				ignoredIdentifier_();
				setState(3681);
				match(WITH);
				setState(3682);
				match(TABLE);
				setState(3683);
				tableName();
				setState(3686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(3684);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3685);
					match(VALIDATION);
					}
				}

				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(3688);
				match(ANALYZE);
				setState(3689);
				match(PARTITION);
				setState(3692);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRUNCATE:
				case POSITION:
				case VIEW:
				case ANY:
				case OFFSET:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case BOOLEAN:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case OPEN:
				case NEXT:
				case NAME:
				case TYPE:
				case TABLES:
				case TABLESPACE:
				case COLUMNS:
				case FIELDS:
				case INDEXES:
				case STATUS:
				case MODIFY:
				case VALUE:
				case DUPLICATE:
				case FIRST:
				case LAST:
				case AFTER:
				case OJ:
				case ACCOUNT:
				case USER:
				case ROLE:
				case START:
				case TRANSACTION:
				case WITHOUT:
				case ESCAPE:
				case SUBPARTITION:
				case STORAGE:
				case SUPER:
				case TEMPORARY:
				case THAN:
				case UNBOUNDED:
				case SIGNED:
				case UPGRADE:
				case VALIDATION:
				case ROLLUP:
				case SOUNDS:
				case UNKNOWN:
				case OFF:
				case ALWAYS:
				case COMMITTED:
				case LEVEL:
				case NO:
				case PASSWORD:
				case PRIVILEGES:
				case ACTION:
				case ALGORITHM:
				case AUTOCOMMIT:
				case BTREE:
				case CHAIN:
				case CHARSET:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case COMMENT:
				case COMPACT:
				case COMPRESSED:
				case COMPRESSION:
				case CONNECTION:
				case CONSISTENT:
				case DATA:
				case DISCARD:
				case DISK:
				case ENCRYPTION:
				case END:
				case ENGINE:
				case EVENT:
				case EXCHANGE:
				case EXECUTE:
				case FILE:
				case FIXED:
				case FOLLOWING:
				case GLOBAL:
				case HASH:
				case IMPORT_:
				case LESS:
				case MEMORY:
				case NONE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PERSIST:
				case PRECEDING:
				case PROCESS:
				case PROXY:
				case QUICK:
				case REBUILD:
				case REDUNDANT:
				case RELOAD:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REVERSE:
				case SESSION:
				case SHUTDOWN:
				case SIMPLE:
				case SLAVE:
				case VISIBLE:
				case INVISIBLE:
				case ENFORCED:
				case AGAINST:
				case LANGUAGE:
				case MODE:
				case QUERY:
				case EXTENDED:
				case EXPANSION:
				case VARIANCE:
				case MAX_ROWS:
				case MIN_ROWS:
				case SQL_BIG_RESULT:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case ROW_FORMAT:
				case WEIGHT_STRING:
				case COLUMN_FORMAT:
				case INSERT_METHOD:
				case KEY_BLOCK_SIZE:
				case PACK_KEYS:
				case PERSIST_ONLY:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case GROUP_CONCAT:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case DELAY_KEY_WRITE:
				case ROTATE:
				case MASTER:
				case BINLOG:
				case ERROR:
				case SCHEDULE:
				case COMPLETION:
				case EVERY:
				case HOST:
				case SOCKET:
				case PORT:
				case SERVER:
				case WRAPPER:
				case OPTIONS:
				case OWNER:
				case RETURNS:
				case CONTAINS:
				case SECURITY:
				case INVOKER:
				case TEMPTABLE:
				case MERGE:
				case UNDEFINED:
				case DATAFILE:
				case FILE_BLOCK_SIZE:
				case EXTENT_SIZE:
				case INITIAL_SIZE:
				case AUTOEXTEND_SIZE:
				case MAX_SIZE:
				case NODEGROUP:
				case WAIT:
				case LOGFILE:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case REDO_BUFFER_SIZE:
				case HANDLER:
				case PREV:
				case ORGANIZATION:
				case DEFINITION:
				case DESCRIPTION:
				case REFERENCE:
				case FOLLOWS:
				case PRECEDES:
				case IMPORT:
				case CONCURRENT:
				case XML:
				case DUMPFILE:
				case SHARE:
				case CODE:
				case CONTEXT:
				case SOURCE:
				case CHANNEL:
				case CLONE:
				case AGGREGATE:
				case INSTALL:
				case COMPONENT:
				case UNINSTALL:
				case RESOURCE:
				case EXPIRE:
				case NEVER:
				case HISTORY:
				case OPTIONAL:
				case REUSE:
				case MAX_QUERIES_PER_HOUR:
				case MAX_UPDATES_PER_HOUR:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case RETAIN:
				case RANDOM:
				case OLD:
				case ISSUER:
				case SUBJECT:
				case CACHE:
				case GENERAL:
				case SLOW:
				case USER_RESOURCES:
				case EXPORT:
				case RELAY:
				case HOSTS:
				case FLUSH:
				case RESET:
				case RESTART:
				case IO_THREAD:
				case SQL_THREAD:
				case SQL_BEFORE_GTIDS:
				case SQL_AFTER_GTIDS:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case SQL_AFTER_MTS_GAPS:
				case UNTIL:
				case DEFAULT_AUTH:
				case PLUGIN_DIR:
				case STOP:
				case IDENTIFIER_:
					{
					setState(3690);
					ignoredIdentifiers_();
					}
					break;
				case ALL:
					{
					setState(3691);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(3694);
				match(CHECK);
				setState(3695);
				match(PARTITION);
				setState(3698);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRUNCATE:
				case POSITION:
				case VIEW:
				case ANY:
				case OFFSET:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case BOOLEAN:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case OPEN:
				case NEXT:
				case NAME:
				case TYPE:
				case TABLES:
				case TABLESPACE:
				case COLUMNS:
				case FIELDS:
				case INDEXES:
				case STATUS:
				case MODIFY:
				case VALUE:
				case DUPLICATE:
				case FIRST:
				case LAST:
				case AFTER:
				case OJ:
				case ACCOUNT:
				case USER:
				case ROLE:
				case START:
				case TRANSACTION:
				case WITHOUT:
				case ESCAPE:
				case SUBPARTITION:
				case STORAGE:
				case SUPER:
				case TEMPORARY:
				case THAN:
				case UNBOUNDED:
				case SIGNED:
				case UPGRADE:
				case VALIDATION:
				case ROLLUP:
				case SOUNDS:
				case UNKNOWN:
				case OFF:
				case ALWAYS:
				case COMMITTED:
				case LEVEL:
				case NO:
				case PASSWORD:
				case PRIVILEGES:
				case ACTION:
				case ALGORITHM:
				case AUTOCOMMIT:
				case BTREE:
				case CHAIN:
				case CHARSET:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case COMMENT:
				case COMPACT:
				case COMPRESSED:
				case COMPRESSION:
				case CONNECTION:
				case CONSISTENT:
				case DATA:
				case DISCARD:
				case DISK:
				case ENCRYPTION:
				case END:
				case ENGINE:
				case EVENT:
				case EXCHANGE:
				case EXECUTE:
				case FILE:
				case FIXED:
				case FOLLOWING:
				case GLOBAL:
				case HASH:
				case IMPORT_:
				case LESS:
				case MEMORY:
				case NONE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PERSIST:
				case PRECEDING:
				case PROCESS:
				case PROXY:
				case QUICK:
				case REBUILD:
				case REDUNDANT:
				case RELOAD:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REVERSE:
				case SESSION:
				case SHUTDOWN:
				case SIMPLE:
				case SLAVE:
				case VISIBLE:
				case INVISIBLE:
				case ENFORCED:
				case AGAINST:
				case LANGUAGE:
				case MODE:
				case QUERY:
				case EXTENDED:
				case EXPANSION:
				case VARIANCE:
				case MAX_ROWS:
				case MIN_ROWS:
				case SQL_BIG_RESULT:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case ROW_FORMAT:
				case WEIGHT_STRING:
				case COLUMN_FORMAT:
				case INSERT_METHOD:
				case KEY_BLOCK_SIZE:
				case PACK_KEYS:
				case PERSIST_ONLY:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case GROUP_CONCAT:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case DELAY_KEY_WRITE:
				case ROTATE:
				case MASTER:
				case BINLOG:
				case ERROR:
				case SCHEDULE:
				case COMPLETION:
				case EVERY:
				case HOST:
				case SOCKET:
				case PORT:
				case SERVER:
				case WRAPPER:
				case OPTIONS:
				case OWNER:
				case RETURNS:
				case CONTAINS:
				case SECURITY:
				case INVOKER:
				case TEMPTABLE:
				case MERGE:
				case UNDEFINED:
				case DATAFILE:
				case FILE_BLOCK_SIZE:
				case EXTENT_SIZE:
				case INITIAL_SIZE:
				case AUTOEXTEND_SIZE:
				case MAX_SIZE:
				case NODEGROUP:
				case WAIT:
				case LOGFILE:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case REDO_BUFFER_SIZE:
				case HANDLER:
				case PREV:
				case ORGANIZATION:
				case DEFINITION:
				case DESCRIPTION:
				case REFERENCE:
				case FOLLOWS:
				case PRECEDES:
				case IMPORT:
				case CONCURRENT:
				case XML:
				case DUMPFILE:
				case SHARE:
				case CODE:
				case CONTEXT:
				case SOURCE:
				case CHANNEL:
				case CLONE:
				case AGGREGATE:
				case INSTALL:
				case COMPONENT:
				case UNINSTALL:
				case RESOURCE:
				case EXPIRE:
				case NEVER:
				case HISTORY:
				case OPTIONAL:
				case REUSE:
				case MAX_QUERIES_PER_HOUR:
				case MAX_UPDATES_PER_HOUR:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case RETAIN:
				case RANDOM:
				case OLD:
				case ISSUER:
				case SUBJECT:
				case CACHE:
				case GENERAL:
				case SLOW:
				case USER_RESOURCES:
				case EXPORT:
				case RELAY:
				case HOSTS:
				case FLUSH:
				case RESET:
				case RESTART:
				case IO_THREAD:
				case SQL_THREAD:
				case SQL_BEFORE_GTIDS:
				case SQL_AFTER_GTIDS:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case SQL_AFTER_MTS_GAPS:
				case UNTIL:
				case DEFAULT_AUTH:
				case PLUGIN_DIR:
				case STOP:
				case IDENTIFIER_:
					{
					setState(3696);
					ignoredIdentifiers_();
					}
					break;
				case ALL:
					{
					setState(3697);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(3700);
				match(OPTIMIZE);
				setState(3701);
				match(PARTITION);
				setState(3704);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRUNCATE:
				case POSITION:
				case VIEW:
				case ANY:
				case OFFSET:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case BOOLEAN:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case OPEN:
				case NEXT:
				case NAME:
				case TYPE:
				case TABLES:
				case TABLESPACE:
				case COLUMNS:
				case FIELDS:
				case INDEXES:
				case STATUS:
				case MODIFY:
				case VALUE:
				case DUPLICATE:
				case FIRST:
				case LAST:
				case AFTER:
				case OJ:
				case ACCOUNT:
				case USER:
				case ROLE:
				case START:
				case TRANSACTION:
				case WITHOUT:
				case ESCAPE:
				case SUBPARTITION:
				case STORAGE:
				case SUPER:
				case TEMPORARY:
				case THAN:
				case UNBOUNDED:
				case SIGNED:
				case UPGRADE:
				case VALIDATION:
				case ROLLUP:
				case SOUNDS:
				case UNKNOWN:
				case OFF:
				case ALWAYS:
				case COMMITTED:
				case LEVEL:
				case NO:
				case PASSWORD:
				case PRIVILEGES:
				case ACTION:
				case ALGORITHM:
				case AUTOCOMMIT:
				case BTREE:
				case CHAIN:
				case CHARSET:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case COMMENT:
				case COMPACT:
				case COMPRESSED:
				case COMPRESSION:
				case CONNECTION:
				case CONSISTENT:
				case DATA:
				case DISCARD:
				case DISK:
				case ENCRYPTION:
				case END:
				case ENGINE:
				case EVENT:
				case EXCHANGE:
				case EXECUTE:
				case FILE:
				case FIXED:
				case FOLLOWING:
				case GLOBAL:
				case HASH:
				case IMPORT_:
				case LESS:
				case MEMORY:
				case NONE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PERSIST:
				case PRECEDING:
				case PROCESS:
				case PROXY:
				case QUICK:
				case REBUILD:
				case REDUNDANT:
				case RELOAD:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REVERSE:
				case SESSION:
				case SHUTDOWN:
				case SIMPLE:
				case SLAVE:
				case VISIBLE:
				case INVISIBLE:
				case ENFORCED:
				case AGAINST:
				case LANGUAGE:
				case MODE:
				case QUERY:
				case EXTENDED:
				case EXPANSION:
				case VARIANCE:
				case MAX_ROWS:
				case MIN_ROWS:
				case SQL_BIG_RESULT:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case ROW_FORMAT:
				case WEIGHT_STRING:
				case COLUMN_FORMAT:
				case INSERT_METHOD:
				case KEY_BLOCK_SIZE:
				case PACK_KEYS:
				case PERSIST_ONLY:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case GROUP_CONCAT:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case DELAY_KEY_WRITE:
				case ROTATE:
				case MASTER:
				case BINLOG:
				case ERROR:
				case SCHEDULE:
				case COMPLETION:
				case EVERY:
				case HOST:
				case SOCKET:
				case PORT:
				case SERVER:
				case WRAPPER:
				case OPTIONS:
				case OWNER:
				case RETURNS:
				case CONTAINS:
				case SECURITY:
				case INVOKER:
				case TEMPTABLE:
				case MERGE:
				case UNDEFINED:
				case DATAFILE:
				case FILE_BLOCK_SIZE:
				case EXTENT_SIZE:
				case INITIAL_SIZE:
				case AUTOEXTEND_SIZE:
				case MAX_SIZE:
				case NODEGROUP:
				case WAIT:
				case LOGFILE:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case REDO_BUFFER_SIZE:
				case HANDLER:
				case PREV:
				case ORGANIZATION:
				case DEFINITION:
				case DESCRIPTION:
				case REFERENCE:
				case FOLLOWS:
				case PRECEDES:
				case IMPORT:
				case CONCURRENT:
				case XML:
				case DUMPFILE:
				case SHARE:
				case CODE:
				case CONTEXT:
				case SOURCE:
				case CHANNEL:
				case CLONE:
				case AGGREGATE:
				case INSTALL:
				case COMPONENT:
				case UNINSTALL:
				case RESOURCE:
				case EXPIRE:
				case NEVER:
				case HISTORY:
				case OPTIONAL:
				case REUSE:
				case MAX_QUERIES_PER_HOUR:
				case MAX_UPDATES_PER_HOUR:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case RETAIN:
				case RANDOM:
				case OLD:
				case ISSUER:
				case SUBJECT:
				case CACHE:
				case GENERAL:
				case SLOW:
				case USER_RESOURCES:
				case EXPORT:
				case RELAY:
				case HOSTS:
				case FLUSH:
				case RESET:
				case RESTART:
				case IO_THREAD:
				case SQL_THREAD:
				case SQL_BEFORE_GTIDS:
				case SQL_AFTER_GTIDS:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case SQL_AFTER_MTS_GAPS:
				case UNTIL:
				case DEFAULT_AUTH:
				case PLUGIN_DIR:
				case STOP:
				case IDENTIFIER_:
					{
					setState(3702);
					ignoredIdentifiers_();
					}
					break;
				case ALL:
					{
					setState(3703);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(3706);
				match(REBUILD);
				setState(3707);
				match(PARTITION);
				setState(3710);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRUNCATE:
				case POSITION:
				case VIEW:
				case ANY:
				case OFFSET:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case BOOLEAN:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case OPEN:
				case NEXT:
				case NAME:
				case TYPE:
				case TABLES:
				case TABLESPACE:
				case COLUMNS:
				case FIELDS:
				case INDEXES:
				case STATUS:
				case MODIFY:
				case VALUE:
				case DUPLICATE:
				case FIRST:
				case LAST:
				case AFTER:
				case OJ:
				case ACCOUNT:
				case USER:
				case ROLE:
				case START:
				case TRANSACTION:
				case WITHOUT:
				case ESCAPE:
				case SUBPARTITION:
				case STORAGE:
				case SUPER:
				case TEMPORARY:
				case THAN:
				case UNBOUNDED:
				case SIGNED:
				case UPGRADE:
				case VALIDATION:
				case ROLLUP:
				case SOUNDS:
				case UNKNOWN:
				case OFF:
				case ALWAYS:
				case COMMITTED:
				case LEVEL:
				case NO:
				case PASSWORD:
				case PRIVILEGES:
				case ACTION:
				case ALGORITHM:
				case AUTOCOMMIT:
				case BTREE:
				case CHAIN:
				case CHARSET:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case COMMENT:
				case COMPACT:
				case COMPRESSED:
				case COMPRESSION:
				case CONNECTION:
				case CONSISTENT:
				case DATA:
				case DISCARD:
				case DISK:
				case ENCRYPTION:
				case END:
				case ENGINE:
				case EVENT:
				case EXCHANGE:
				case EXECUTE:
				case FILE:
				case FIXED:
				case FOLLOWING:
				case GLOBAL:
				case HASH:
				case IMPORT_:
				case LESS:
				case MEMORY:
				case NONE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PERSIST:
				case PRECEDING:
				case PROCESS:
				case PROXY:
				case QUICK:
				case REBUILD:
				case REDUNDANT:
				case RELOAD:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REVERSE:
				case SESSION:
				case SHUTDOWN:
				case SIMPLE:
				case SLAVE:
				case VISIBLE:
				case INVISIBLE:
				case ENFORCED:
				case AGAINST:
				case LANGUAGE:
				case MODE:
				case QUERY:
				case EXTENDED:
				case EXPANSION:
				case VARIANCE:
				case MAX_ROWS:
				case MIN_ROWS:
				case SQL_BIG_RESULT:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case ROW_FORMAT:
				case WEIGHT_STRING:
				case COLUMN_FORMAT:
				case INSERT_METHOD:
				case KEY_BLOCK_SIZE:
				case PACK_KEYS:
				case PERSIST_ONLY:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case GROUP_CONCAT:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case DELAY_KEY_WRITE:
				case ROTATE:
				case MASTER:
				case BINLOG:
				case ERROR:
				case SCHEDULE:
				case COMPLETION:
				case EVERY:
				case HOST:
				case SOCKET:
				case PORT:
				case SERVER:
				case WRAPPER:
				case OPTIONS:
				case OWNER:
				case RETURNS:
				case CONTAINS:
				case SECURITY:
				case INVOKER:
				case TEMPTABLE:
				case MERGE:
				case UNDEFINED:
				case DATAFILE:
				case FILE_BLOCK_SIZE:
				case EXTENT_SIZE:
				case INITIAL_SIZE:
				case AUTOEXTEND_SIZE:
				case MAX_SIZE:
				case NODEGROUP:
				case WAIT:
				case LOGFILE:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case REDO_BUFFER_SIZE:
				case HANDLER:
				case PREV:
				case ORGANIZATION:
				case DEFINITION:
				case DESCRIPTION:
				case REFERENCE:
				case FOLLOWS:
				case PRECEDES:
				case IMPORT:
				case CONCURRENT:
				case XML:
				case DUMPFILE:
				case SHARE:
				case CODE:
				case CONTEXT:
				case SOURCE:
				case CHANNEL:
				case CLONE:
				case AGGREGATE:
				case INSTALL:
				case COMPONENT:
				case UNINSTALL:
				case RESOURCE:
				case EXPIRE:
				case NEVER:
				case HISTORY:
				case OPTIONAL:
				case REUSE:
				case MAX_QUERIES_PER_HOUR:
				case MAX_UPDATES_PER_HOUR:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case RETAIN:
				case RANDOM:
				case OLD:
				case ISSUER:
				case SUBJECT:
				case CACHE:
				case GENERAL:
				case SLOW:
				case USER_RESOURCES:
				case EXPORT:
				case RELAY:
				case HOSTS:
				case FLUSH:
				case RESET:
				case RESTART:
				case IO_THREAD:
				case SQL_THREAD:
				case SQL_BEFORE_GTIDS:
				case SQL_AFTER_GTIDS:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case SQL_AFTER_MTS_GAPS:
				case UNTIL:
				case DEFAULT_AUTH:
				case PLUGIN_DIR:
				case STOP:
				case IDENTIFIER_:
					{
					setState(3708);
					ignoredIdentifiers_();
					}
					break;
				case ALL:
					{
					setState(3709);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(3712);
				match(REPAIR);
				setState(3713);
				match(PARTITION);
				setState(3716);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRUNCATE:
				case POSITION:
				case VIEW:
				case ANY:
				case OFFSET:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case BOOLEAN:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MICROSECOND:
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case AVG:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case INSTANCE:
				case DO:
				case DEFINER:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case OPEN:
				case NEXT:
				case NAME:
				case TYPE:
				case TABLES:
				case TABLESPACE:
				case COLUMNS:
				case FIELDS:
				case INDEXES:
				case STATUS:
				case MODIFY:
				case VALUE:
				case DUPLICATE:
				case FIRST:
				case LAST:
				case AFTER:
				case OJ:
				case ACCOUNT:
				case USER:
				case ROLE:
				case START:
				case TRANSACTION:
				case WITHOUT:
				case ESCAPE:
				case SUBPARTITION:
				case STORAGE:
				case SUPER:
				case TEMPORARY:
				case THAN:
				case UNBOUNDED:
				case SIGNED:
				case UPGRADE:
				case VALIDATION:
				case ROLLUP:
				case SOUNDS:
				case UNKNOWN:
				case OFF:
				case ALWAYS:
				case COMMITTED:
				case LEVEL:
				case NO:
				case PASSWORD:
				case PRIVILEGES:
				case ACTION:
				case ALGORITHM:
				case AUTOCOMMIT:
				case BTREE:
				case CHAIN:
				case CHARSET:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case COMMENT:
				case COMPACT:
				case COMPRESSED:
				case COMPRESSION:
				case CONNECTION:
				case CONSISTENT:
				case DATA:
				case DISCARD:
				case DISK:
				case ENCRYPTION:
				case END:
				case ENGINE:
				case EVENT:
				case EXCHANGE:
				case EXECUTE:
				case FILE:
				case FIXED:
				case FOLLOWING:
				case GLOBAL:
				case HASH:
				case IMPORT_:
				case LESS:
				case MEMORY:
				case NONE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PERSIST:
				case PRECEDING:
				case PROCESS:
				case PROXY:
				case QUICK:
				case REBUILD:
				case REDUNDANT:
				case RELOAD:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REVERSE:
				case SESSION:
				case SHUTDOWN:
				case SIMPLE:
				case SLAVE:
				case VISIBLE:
				case INVISIBLE:
				case ENFORCED:
				case AGAINST:
				case LANGUAGE:
				case MODE:
				case QUERY:
				case EXTENDED:
				case EXPANSION:
				case VARIANCE:
				case MAX_ROWS:
				case MIN_ROWS:
				case SQL_BIG_RESULT:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case ROW_FORMAT:
				case WEIGHT_STRING:
				case COLUMN_FORMAT:
				case INSERT_METHOD:
				case KEY_BLOCK_SIZE:
				case PACK_KEYS:
				case PERSIST_ONLY:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case GROUP_CONCAT:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case VAR_POP:
				case VAR_SAMP:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case DELAY_KEY_WRITE:
				case ROTATE:
				case MASTER:
				case BINLOG:
				case ERROR:
				case SCHEDULE:
				case COMPLETION:
				case EVERY:
				case HOST:
				case SOCKET:
				case PORT:
				case SERVER:
				case WRAPPER:
				case OPTIONS:
				case OWNER:
				case RETURNS:
				case CONTAINS:
				case SECURITY:
				case INVOKER:
				case TEMPTABLE:
				case MERGE:
				case UNDEFINED:
				case DATAFILE:
				case FILE_BLOCK_SIZE:
				case EXTENT_SIZE:
				case INITIAL_SIZE:
				case AUTOEXTEND_SIZE:
				case MAX_SIZE:
				case NODEGROUP:
				case WAIT:
				case LOGFILE:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case REDO_BUFFER_SIZE:
				case HANDLER:
				case PREV:
				case ORGANIZATION:
				case DEFINITION:
				case DESCRIPTION:
				case REFERENCE:
				case FOLLOWS:
				case PRECEDES:
				case IMPORT:
				case CONCURRENT:
				case XML:
				case DUMPFILE:
				case SHARE:
				case CODE:
				case CONTEXT:
				case SOURCE:
				case CHANNEL:
				case CLONE:
				case AGGREGATE:
				case INSTALL:
				case COMPONENT:
				case UNINSTALL:
				case RESOURCE:
				case EXPIRE:
				case NEVER:
				case HISTORY:
				case OPTIONAL:
				case REUSE:
				case MAX_QUERIES_PER_HOUR:
				case MAX_UPDATES_PER_HOUR:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case RETAIN:
				case RANDOM:
				case OLD:
				case ISSUER:
				case SUBJECT:
				case CACHE:
				case GENERAL:
				case SLOW:
				case USER_RESOURCES:
				case EXPORT:
				case RELAY:
				case HOSTS:
				case FLUSH:
				case RESET:
				case RESTART:
				case IO_THREAD:
				case SQL_THREAD:
				case SQL_BEFORE_GTIDS:
				case SQL_AFTER_GTIDS:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case SQL_AFTER_MTS_GAPS:
				case UNTIL:
				case DEFAULT_AUTH:
				case PLUGIN_DIR:
				case STOP:
				case IDENTIFIER_:
					{
					setState(3714);
					ignoredIdentifiers_();
					}
					break;
				case ALL:
					{
					setState(3715);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(3718);
				match(REMOVE);
				setState(3719);
				match(PARTITIONING);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(3720);
				match(UPGRADE);
				setState(3721);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptions_Context extends ParserRuleContext {
		public List<TableOption_Context> tableOption_() {
			return getRuleContexts(TableOption_Context.class);
		}
		public TableOption_Context tableOption_(int i) {
			return getRuleContext(TableOption_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TableOptions_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOptions_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTableOptions_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptions_Context tableOptions_() throws RecognitionException {
		TableOptions_Context _localctx = new TableOptions_Context(_ctx, getState());
		enterRule(_localctx, 446, RULE_tableOptions_);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3724);
			tableOption_();
			setState(3731);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,433,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3726);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_) {
						{
						setState(3725);
						match(COMMA_);
						}
					}

					setState(3728);
					tableOption_();
					}
					} 
				}
				setState(3733);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,433,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOption_Context extends ParserRuleContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySQLStatementParser.AUTO_INCREMENT, 0); }
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySQLStatementParser.AVG_ROW_LENGTH, 0); }
		public CharacterSet_Context characterSet_() {
			return getRuleContext(CharacterSet_Context.class,0);
		}
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySQLStatementParser.CHECKSUM, 0); }
		public TerminalNode COMMENT() { return getToken(MySQLStatementParser.COMMENT, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySQLStatementParser.COMPRESSION, 0); }
		public TerminalNode CONNECTION() { return getToken(MySQLStatementParser.CONNECTION, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySQLStatementParser.DIRECTORY, 0); }
		public TerminalNode DATA() { return getToken(MySQLStatementParser.DATA, 0); }
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySQLStatementParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySQLStatementParser.ENCRYPTION, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode INSERT_METHOD() { return getToken(MySQLStatementParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(MySQLStatementParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(MySQLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySQLStatementParser.LAST, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySQLStatementParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySQLStatementParser.MAX_ROWS, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySQLStatementParser.MIN_ROWS, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySQLStatementParser.PACK_KEYS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySQLStatementParser.PASSWORD, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySQLStatementParser.ROW_FORMAT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySQLStatementParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(MySQLStatementParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySQLStatementParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySQLStatementParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(MySQLStatementParser.COMPACT, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySQLStatementParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySQLStatementParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySQLStatementParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLStatementParser.TABLESPACE, 0); }
		public TerminalNode STORAGE() { return getToken(MySQLStatementParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySQLStatementParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySQLStatementParser.MEMORY, 0); }
		public TerminalNode UNION() { return getToken(MySQLStatementParser.UNION, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TableOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTableOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOption_Context tableOption_() throws RecognitionException {
		TableOption_Context _localctx = new TableOption_Context(_ctx, getState());
		enterRule(_localctx, 448, RULE_tableOption_);
		int _la;
		try {
			setState(3863);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3734);
				match(AUTO_INCREMENT);
				setState(3736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3735);
					match(EQ_);
					}
				}

				setState(3738);
				match(NUMBER_);
				}
				break;
			case AVG_ROW_LENGTH:
				enterOuterAlt(_localctx, 2);
				{
				setState(3739);
				match(AVG_ROW_LENGTH);
				setState(3741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3740);
					match(EQ_);
					}
				}

				setState(3743);
				match(NUMBER_);
				}
				break;
			case CHAR:
			case CHARACTER:
			case DEFAULT:
			case COLLATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(3744);
					match(DEFAULT);
					}
				}

				setState(3749);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
					{
					setState(3747);
					characterSet_();
					}
					break;
				case COLLATE:
					{
					setState(3748);
					collateClause_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CHECKSUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(3751);
				match(CHECKSUM);
				setState(3753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3752);
					match(EQ_);
					}
				}

				setState(3755);
				match(NUMBER_);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3756);
				match(COMMENT);
				setState(3758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3757);
					match(EQ_);
					}
				}

				setState(3760);
				match(STRING_);
				}
				break;
			case COMPRESSION:
				enterOuterAlt(_localctx, 6);
				{
				setState(3761);
				match(COMPRESSION);
				setState(3763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3762);
					match(EQ_);
					}
				}

				setState(3765);
				match(STRING_);
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 7);
				{
				setState(3766);
				match(CONNECTION);
				setState(3768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3767);
					match(EQ_);
					}
				}

				setState(3770);
				match(STRING_);
				}
				break;
			case INDEX:
			case DATA:
				enterOuterAlt(_localctx, 8);
				{
				setState(3771);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==DATA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3772);
				match(DIRECTORY);
				setState(3774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3773);
					match(EQ_);
					}
				}

				setState(3776);
				match(STRING_);
				}
				break;
			case DELAY_KEY_WRITE:
				enterOuterAlt(_localctx, 9);
				{
				setState(3777);
				match(DELAY_KEY_WRITE);
				setState(3779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3778);
					match(EQ_);
					}
				}

				setState(3781);
				match(NUMBER_);
				}
				break;
			case ENCRYPTION:
				enterOuterAlt(_localctx, 10);
				{
				setState(3782);
				match(ENCRYPTION);
				setState(3784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3783);
					match(EQ_);
					}
				}

				setState(3786);
				match(STRING_);
				}
				break;
			case ENGINE:
				enterOuterAlt(_localctx, 11);
				{
				setState(3787);
				match(ENGINE);
				setState(3789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3788);
					match(EQ_);
					}
				}

				setState(3791);
				ignoredIdentifier_();
				}
				break;
			case INSERT_METHOD:
				enterOuterAlt(_localctx, 12);
				{
				setState(3792);
				match(INSERT_METHOD);
				setState(3794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3793);
					match(EQ_);
					}
				}

				setState(3796);
				_la = _input.LA(1);
				if ( !(((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (FIRST - 198)) | (1L << (LAST - 198)) | (1L << (NO - 198)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 13);
				{
				setState(3797);
				match(KEY_BLOCK_SIZE);
				setState(3799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3798);
					match(EQ_);
					}
				}

				setState(3801);
				match(NUMBER_);
				}
				break;
			case MAX_ROWS:
				enterOuterAlt(_localctx, 14);
				{
				setState(3802);
				match(MAX_ROWS);
				setState(3804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3803);
					match(EQ_);
					}
				}

				setState(3806);
				match(NUMBER_);
				}
				break;
			case MIN_ROWS:
				enterOuterAlt(_localctx, 15);
				{
				setState(3807);
				match(MIN_ROWS);
				setState(3809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3808);
					match(EQ_);
					}
				}

				setState(3811);
				match(NUMBER_);
				}
				break;
			case PACK_KEYS:
				enterOuterAlt(_localctx, 16);
				{
				setState(3812);
				match(PACK_KEYS);
				setState(3814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3813);
					match(EQ_);
					}
				}

				setState(3816);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NUMBER_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 17);
				{
				setState(3817);
				match(PASSWORD);
				setState(3819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3818);
					match(EQ_);
					}
				}

				setState(3821);
				match(STRING_);
				}
				break;
			case ROW_FORMAT:
				enterOuterAlt(_localctx, 18);
				{
				setState(3822);
				match(ROW_FORMAT);
				setState(3824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3823);
					match(EQ_);
					}
				}

				setState(3826);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (COMPACT - 268)) | (1L << (COMPRESSED - 268)) | (1L << (DYNAMIC - 268)) | (1L << (FIXED - 268)) | (1L << (REDUNDANT - 268)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STATS_AUTO_RECALC:
				enterOuterAlt(_localctx, 19);
				{
				setState(3827);
				match(STATS_AUTO_RECALC);
				setState(3829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3828);
					match(EQ_);
					}
				}

				setState(3831);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NUMBER_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STATS_PERSISTENT:
				enterOuterAlt(_localctx, 20);
				{
				setState(3832);
				match(STATS_PERSISTENT);
				setState(3834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3833);
					match(EQ_);
					}
				}

				setState(3836);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NUMBER_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STATS_SAMPLE_PAGES:
				enterOuterAlt(_localctx, 21);
				{
				setState(3837);
				match(STATS_SAMPLE_PAGES);
				setState(3839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3838);
					match(EQ_);
					}
				}

				setState(3841);
				match(NUMBER_);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 22);
				{
				setState(3842);
				match(TABLESPACE);
				setState(3843);
				ignoredIdentifier_();
				setState(3846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(3844);
					match(STORAGE);
					setState(3845);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case UNION:
				enterOuterAlt(_localctx, 23);
				{
				setState(3848);
				match(UNION);
				setState(3850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(3849);
					match(EQ_);
					}
				}

				setState(3852);
				match(LP_);
				setState(3853);
				tableName();
				setState(3858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3854);
					match(COMMA_);
					setState(3855);
					tableName();
					}
					}
					setState(3860);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3861);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(MySQLStatementParser.ADD, 0); }
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode COLUMN() { return getToken(MySQLStatementParser.COLUMN, 0); }
		public FirstOrAfterColumnContext firstOrAfterColumn() {
			return getRuleContext(FirstOrAfterColumnContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public AddColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addColumnSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAddColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddColumnSpecificationContext addColumnSpecification() throws RecognitionException {
		AddColumnSpecificationContext _localctx = new AddColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_addColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3865);
			match(ADD);
			setState(3867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3866);
				match(COLUMN);
				}
			}

			setState(3884);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case WITHOUT:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MEMORY:
			case NONE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
				{
				setState(3869);
				columnDefinition();
				setState(3871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FIRST || _la==AFTER) {
					{
					setState(3870);
					firstOrAfterColumn();
					}
				}

				}
				break;
			case LP_:
				{
				setState(3873);
				match(LP_);
				setState(3874);
				columnDefinition();
				setState(3879);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3875);
					match(COMMA_);
					setState(3876);
					columnDefinition();
					}
					}
					setState(3881);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3882);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstOrAfterColumnContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(MySQLStatementParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySQLStatementParser.AFTER, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public FirstOrAfterColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstOrAfterColumn; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFirstOrAfterColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstOrAfterColumnContext firstOrAfterColumn() throws RecognitionException {
		FirstOrAfterColumnContext _localctx = new FirstOrAfterColumnContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_firstOrAfterColumn);
		try {
			setState(3889);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3886);
				match(FIRST);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3887);
				match(AFTER);
				setState(3888);
				columnName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(MySQLStatementParser.ADD, 0); }
		public IndexDefinition_Context indexDefinition_() {
			return getRuleContext(IndexDefinition_Context.class,0);
		}
		public AddIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addIndexSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAddIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddIndexSpecificationContext addIndexSpecification() throws RecognitionException {
		AddIndexSpecificationContext _localctx = new AddIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_addIndexSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3891);
			match(ADD);
			setState(3892);
			indexDefinition_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddConstraintSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(MySQLStatementParser.ADD, 0); }
		public ConstraintDefinitionContext constraintDefinition() {
			return getRuleContext(ConstraintDefinitionContext.class,0);
		}
		public AddConstraintSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addConstraintSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAddConstraintSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddConstraintSpecificationContext addConstraintSpecification() throws RecognitionException {
		AddConstraintSpecificationContext _localctx = new AddConstraintSpecificationContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_addConstraintSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3894);
			match(ADD);
			setState(3895);
			constraintDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySQLStatementParser.CHANGE, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySQLStatementParser.COLUMN, 0); }
		public FirstOrAfterColumnContext firstOrAfterColumn() {
			return getRuleContext(FirstOrAfterColumnContext.class,0);
		}
		public ChangeColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeColumnSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitChangeColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeColumnSpecificationContext changeColumnSpecification() throws RecognitionException {
		ChangeColumnSpecificationContext _localctx = new ChangeColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_changeColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3897);
			match(CHANGE);
			setState(3899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3898);
				match(COLUMN);
				}
			}

			setState(3901);
			columnName();
			setState(3902);
			columnDefinition();
			setState(3904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FIRST || _la==AFTER) {
				{
				setState(3903);
				firstOrAfterColumn();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModifyColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(MySQLStatementParser.MODIFY, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySQLStatementParser.COLUMN, 0); }
		public FirstOrAfterColumnContext firstOrAfterColumn() {
			return getRuleContext(FirstOrAfterColumnContext.class,0);
		}
		public ModifyColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyColumnSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitModifyColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyColumnSpecificationContext modifyColumnSpecification() throws RecognitionException {
		ModifyColumnSpecificationContext _localctx = new ModifyColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_modifyColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3906);
			match(MODIFY);
			setState(3908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3907);
				match(COLUMN);
				}
			}

			setState(3910);
			columnDefinition();
			setState(3912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FIRST || _la==AFTER) {
				{
				setState(3911);
				firstOrAfterColumn();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySQLStatementParser.COLUMN, 0); }
		public DropColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropColumnSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropColumnSpecificationContext dropColumnSpecification() throws RecognitionException {
		DropColumnSpecificationContext _localctx = new DropColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_dropColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3914);
			match(DROP);
			setState(3916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3915);
				match(COLUMN);
				}
			}

			setState(3918);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public DropIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexSpecificationContext dropIndexSpecification() throws RecognitionException {
		DropIndexSpecificationContext _localctx = new DropIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_dropIndexSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3920);
			match(DROP);
			setState(3921);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3922);
			indexName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPrimaryKeySpecificationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public DropPrimaryKeySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPrimaryKeySpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropPrimaryKeySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPrimaryKeySpecificationContext dropPrimaryKeySpecification() throws RecognitionException {
		DropPrimaryKeySpecificationContext _localctx = new DropPrimaryKeySpecificationContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_dropPrimaryKeySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3924);
			match(DROP);
			setState(3925);
			primaryKey();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySQLStatementParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(MySQLStatementParser.COLUMN, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public RenameColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameColumnSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRenameColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameColumnSpecificationContext renameColumnSpecification() throws RecognitionException {
		RenameColumnSpecificationContext _localctx = new RenameColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_renameColumnSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3927);
			match(RENAME);
			setState(3928);
			match(COLUMN);
			setState(3929);
			columnName();
			setState(3930);
			match(TO);
			setState(3931);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySQLStatementParser.RENAME, 0); }
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public RenameIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameIndexSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRenameIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameIndexSpecificationContext renameIndexSpecification() throws RecognitionException {
		RenameIndexSpecificationContext _localctx = new RenameIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_renameIndexSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3933);
			match(RENAME);
			setState(3934);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3935);
			indexName();
			setState(3936);
			match(TO);
			setState(3937);
			indexName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySQLStatementParser.RENAME, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public RenameTableSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRenameTableSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableSpecificationContext renameTableSpecification() throws RecognitionException {
		RenameTableSpecificationContext _localctx = new RenameTableSpecificationContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_renameTableSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3939);
			match(RENAME);
			setState(3941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==TO) {
				{
				setState(3940);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3943);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitions_Context extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public List<PartitionDefinition_Context> partitionDefinition_() {
			return getRuleContexts(PartitionDefinition_Context.class);
		}
		public PartitionDefinition_Context partitionDefinition_(int i) {
			return getRuleContext(PartitionDefinition_Context.class,i);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public PartitionDefinitions_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPartitionDefinitions_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitions_Context partitionDefinitions_() throws RecognitionException {
		PartitionDefinitions_Context _localctx = new PartitionDefinitions_Context(_ctx, getState());
		enterRule(_localctx, 474, RULE_partitionDefinitions_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			match(LP_);
			setState(3946);
			partitionDefinition_();
			setState(3951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3947);
				match(COMMA_);
				setState(3948);
				partitionDefinition_();
				}
				}
				setState(3953);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3954);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinition_Context extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySQLStatementParser.PARTITION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySQLStatementParser.VALUES, 0); }
		public List<PartitionDefinitionOption_Context> partitionDefinitionOption_() {
			return getRuleContexts(PartitionDefinitionOption_Context.class);
		}
		public PartitionDefinitionOption_Context partitionDefinitionOption_(int i) {
			return getRuleContext(PartitionDefinitionOption_Context.class,i);
		}
		public List<TerminalNode> LP_() { return getTokens(MySQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(MySQLStatementParser.LP_, i);
		}
		public List<SubpartitionDefinition_Context> subpartitionDefinition_() {
			return getRuleContexts(SubpartitionDefinition_Context.class);
		}
		public SubpartitionDefinition_Context subpartitionDefinition_(int i) {
			return getRuleContext(SubpartitionDefinition_Context.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(MySQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(MySQLStatementParser.RP_, i);
		}
		public TerminalNode LESS() { return getToken(MySQLStatementParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySQLStatementParser.THAN, 0); }
		public PartitionLessThanValue_Context partitionLessThanValue_() {
			return getRuleContext(PartitionLessThanValue_Context.class,0);
		}
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public PartitionValueList_Context partitionValueList_() {
			return getRuleContext(PartitionValueList_Context.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public PartitionDefinition_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPartitionDefinition_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinition_Context partitionDefinition_() throws RecognitionException {
		PartitionDefinition_Context _localctx = new PartitionDefinition_Context(_ctx, getState());
		enterRule(_localctx, 476, RULE_partitionDefinition_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3956);
			match(PARTITION);
			setState(3957);
			identifier();
			setState(3969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3958);
				match(VALUES);
				setState(3967);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LESS:
					{
					setState(3959);
					match(LESS);
					setState(3960);
					match(THAN);
					setState(3961);
					partitionLessThanValue_();
					}
					break;
				case IN:
					{
					setState(3962);
					match(IN);
					setState(3963);
					match(LP_);
					setState(3964);
					partitionValueList_();
					setState(3965);
					match(RP_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || _la==TABLESPACE || _la==STORAGE || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & ((1L << (COMMENT - 267)) | (1L << (DATA - 267)) | (1L << (ENGINE - 267)))) != 0) || _la==MAX_ROWS || _la==MIN_ROWS) {
				{
				{
				setState(3971);
				partitionDefinitionOption_();
				}
				}
				setState(3976);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(3977);
				match(LP_);
				setState(3978);
				subpartitionDefinition_();
				setState(3983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3979);
					match(COMMA_);
					setState(3980);
					subpartitionDefinition_();
					}
					}
					setState(3985);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3986);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionLessThanValue_Context extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PartitionValueList_Context partitionValueList_() {
			return getRuleContext(PartitionValueList_Context.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(MySQLStatementParser.MAXVALUE, 0); }
		public PartitionLessThanValue_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionLessThanValue_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPartitionLessThanValue_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionLessThanValue_Context partitionLessThanValue_() throws RecognitionException {
		PartitionLessThanValue_Context _localctx = new PartitionLessThanValue_Context(_ctx, getState());
		enterRule(_localctx, 478, RULE_partitionLessThanValue_);
		try {
			setState(3998);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3990);
				match(LP_);
				setState(3993);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
				case 1:
					{
					setState(3991);
					expr(0);
					}
					break;
				case 2:
					{
					setState(3992);
					partitionValueList_();
					}
					break;
				}
				setState(3995);
				match(RP_);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3997);
				match(MAXVALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValueList_Context extends ParserRuleContext {
		public List<LiteralsContext> literals() {
			return getRuleContexts(LiteralsContext.class);
		}
		public LiteralsContext literals(int i) {
			return getRuleContext(LiteralsContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public PartitionValueList_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueList_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPartitionValueList_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValueList_Context partitionValueList_() throws RecognitionException {
		PartitionValueList_Context _localctx = new PartitionValueList_Context(_ctx, getState());
		enterRule(_localctx, 480, RULE_partitionValueList_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4000);
			literals();
			setState(4005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4001);
				match(COMMA_);
				setState(4002);
				literals();
				}
				}
				setState(4007);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionOption_Context extends ParserRuleContext {
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(MySQLStatementParser.STORAGE, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public TerminalNode COMMENT() { return getToken(MySQLStatementParser.COMMENT, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode DATA() { return getToken(MySQLStatementParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySQLStatementParser.DIRECTORY, 0); }
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySQLStatementParser.MAX_ROWS, 0); }
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySQLStatementParser.MIN_ROWS, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLStatementParser.TABLESPACE, 0); }
		public PartitionDefinitionOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitionOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPartitionDefinitionOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionOption_Context partitionDefinitionOption_() throws RecognitionException {
		PartitionDefinitionOption_Context _localctx = new PartitionDefinitionOption_Context(_ctx, getState());
		enterRule(_localctx, 482, RULE_partitionDefinitionOption_);
		int _la;
		try {
			setState(4048);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORAGE:
			case ENGINE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(4008);
					match(STORAGE);
					}
				}

				setState(4011);
				match(ENGINE);
				setState(4013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(4012);
					match(EQ_);
					}
				}

				setState(4015);
				identifier();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4016);
				match(COMMENT);
				setState(4018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(4017);
					match(EQ_);
					}
				}

				setState(4020);
				match(STRING_);
				}
				break;
			case DATA:
				enterOuterAlt(_localctx, 3);
				{
				setState(4021);
				match(DATA);
				setState(4022);
				match(DIRECTORY);
				setState(4024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(4023);
					match(EQ_);
					}
				}

				setState(4026);
				match(STRING_);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 4);
				{
				setState(4027);
				match(INDEX);
				setState(4028);
				match(DIRECTORY);
				setState(4030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(4029);
					match(EQ_);
					}
				}

				setState(4032);
				match(STRING_);
				}
				break;
			case MAX_ROWS:
				enterOuterAlt(_localctx, 5);
				{
				setState(4033);
				match(MAX_ROWS);
				setState(4035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(4034);
					match(EQ_);
					}
				}

				setState(4037);
				match(NUMBER_);
				}
				break;
			case MIN_ROWS:
				enterOuterAlt(_localctx, 6);
				{
				setState(4038);
				match(MIN_ROWS);
				setState(4040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(4039);
					match(EQ_);
					}
				}

				setState(4042);
				match(NUMBER_);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4043);
				match(TABLESPACE);
				setState(4045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(4044);
					match(EQ_);
					}
				}

				setState(4047);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinition_Context extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(MySQLStatementParser.SUBPARTITION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<PartitionDefinitionOption_Context> partitionDefinitionOption_() {
			return getRuleContexts(PartitionDefinitionOption_Context.class);
		}
		public PartitionDefinitionOption_Context partitionDefinitionOption_(int i) {
			return getRuleContext(PartitionDefinitionOption_Context.class,i);
		}
		public SubpartitionDefinition_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSubpartitionDefinition_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinition_Context subpartitionDefinition_() throws RecognitionException {
		SubpartitionDefinition_Context _localctx = new SubpartitionDefinition_Context(_ctx, getState());
		enterRule(_localctx, 484, RULE_subpartitionDefinition_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4050);
			match(SUBPARTITION);
			setState(4051);
			identifier();
			setState(4055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || _la==TABLESPACE || _la==STORAGE || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & ((1L << (COMMENT - 267)) | (1L << (DATA - 267)) | (1L << (ENGINE - 267)))) != 0) || _la==MAX_ROWS || _la==MIN_ROWS) {
				{
				{
				setState(4052);
				partitionDefinitionOption_();
				}
				}
				setState(4057);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableSpecification_Context extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(MySQLStatementParser.TEMPORARY, 0); }
		public DropTableSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableSpecification_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropTableSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableSpecification_Context dropTableSpecification_() throws RecognitionException {
		DropTableSpecification_Context _localctx = new DropTableSpecification_Context(_ctx, getState());
		enterRule(_localctx, 486, RULE_dropTableSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(4058);
				match(TEMPORARY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableExistClause_Context extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public TableExistClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableExistClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTableExistClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableExistClause_Context tableExistClause_() throws RecognitionException {
		TableExistClause_Context _localctx = new TableExistClause_Context(_ctx, getState());
		enterRule(_localctx, 488, RULE_tableExistClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4063);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4061);
				match(IF);
				setState(4062);
				match(EXISTS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexSpecification_Context extends ParserRuleContext {
		public TerminalNode ONLINE() { return getToken(MySQLStatementParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySQLStatementParser.OFFLINE, 0); }
		public DropIndexSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexSpecification_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropIndexSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexSpecification_Context dropIndexSpecification_() throws RecognitionException {
		DropIndexSpecification_Context _localctx = new DropIndexSpecification_Context(_ctx, getState());
		enterRule(_localctx, 490, RULE_dropIndexSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4065);
			_la = _input.LA(1);
			if ( !(_la==OFFLINE || _la==ONLINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(MySQLStatementParser.DEFINER, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(MySQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitOwnerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4067);
			match(DEFINER);
			setState(4068);
			match(EQ_);
			setState(4075);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUNCATE:
			case POSITION:
			case VIEW:
			case ANY:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MICROSECOND:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case AVG:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case INSTANCE:
			case DO:
			case DEFINER:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case OPEN:
			case NEXT:
			case NAME:
			case TYPE:
			case TABLES:
			case TABLESPACE:
			case COLUMNS:
			case FIELDS:
			case INDEXES:
			case STATUS:
			case MODIFY:
			case VALUE:
			case DUPLICATE:
			case FIRST:
			case LAST:
			case AFTER:
			case OJ:
			case ACCOUNT:
			case USER:
			case ROLE:
			case START:
			case TRANSACTION:
			case WITHOUT:
			case ESCAPE:
			case SUBPARTITION:
			case STORAGE:
			case SUPER:
			case TEMPORARY:
			case THAN:
			case UNBOUNDED:
			case SIGNED:
			case UPGRADE:
			case VALIDATION:
			case ROLLUP:
			case SOUNDS:
			case UNKNOWN:
			case OFF:
			case ALWAYS:
			case COMMITTED:
			case LEVEL:
			case NO:
			case PASSWORD:
			case PRIVILEGES:
			case ACTION:
			case ALGORITHM:
			case AUTOCOMMIT:
			case BTREE:
			case CHAIN:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case COMMENT:
			case COMPACT:
			case COMPRESSED:
			case COMPRESSION:
			case CONNECTION:
			case CONSISTENT:
			case DATA:
			case DISCARD:
			case DISK:
			case ENCRYPTION:
			case END:
			case ENGINE:
			case EVENT:
			case EXCHANGE:
			case EXECUTE:
			case FILE:
			case FIXED:
			case FOLLOWING:
			case GLOBAL:
			case HASH:
			case IMPORT_:
			case LESS:
			case MEMORY:
			case NONE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PERSIST:
			case PRECEDING:
			case PROCESS:
			case PROXY:
			case QUICK:
			case REBUILD:
			case REDUNDANT:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REVERSE:
			case SESSION:
			case SHUTDOWN:
			case SIMPLE:
			case SLAVE:
			case VISIBLE:
			case INVISIBLE:
			case ENFORCED:
			case AGAINST:
			case LANGUAGE:
			case MODE:
			case QUERY:
			case EXTENDED:
			case EXPANSION:
			case VARIANCE:
			case MAX_ROWS:
			case MIN_ROWS:
			case SQL_BIG_RESULT:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case ROW_FORMAT:
			case WEIGHT_STRING:
			case COLUMN_FORMAT:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case PACK_KEYS:
			case PERSIST_ONLY:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case GROUP_CONCAT:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case DELAY_KEY_WRITE:
			case ROTATE:
			case MASTER:
			case BINLOG:
			case ERROR:
			case SCHEDULE:
			case COMPLETION:
			case EVERY:
			case HOST:
			case SOCKET:
			case PORT:
			case SERVER:
			case WRAPPER:
			case OPTIONS:
			case OWNER:
			case RETURNS:
			case CONTAINS:
			case SECURITY:
			case INVOKER:
			case TEMPTABLE:
			case MERGE:
			case UNDEFINED:
			case DATAFILE:
			case FILE_BLOCK_SIZE:
			case EXTENT_SIZE:
			case INITIAL_SIZE:
			case AUTOEXTEND_SIZE:
			case MAX_SIZE:
			case NODEGROUP:
			case WAIT:
			case LOGFILE:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case REDO_BUFFER_SIZE:
			case HANDLER:
			case PREV:
			case ORGANIZATION:
			case DEFINITION:
			case DESCRIPTION:
			case REFERENCE:
			case FOLLOWS:
			case PRECEDES:
			case IMPORT:
			case CONCURRENT:
			case XML:
			case DUMPFILE:
			case SHARE:
			case CODE:
			case CONTEXT:
			case SOURCE:
			case CHANNEL:
			case CLONE:
			case AGGREGATE:
			case INSTALL:
			case COMPONENT:
			case UNINSTALL:
			case RESOURCE:
			case EXPIRE:
			case NEVER:
			case HISTORY:
			case OPTIONAL:
			case REUSE:
			case MAX_QUERIES_PER_HOUR:
			case MAX_UPDATES_PER_HOUR:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case RETAIN:
			case RANDOM:
			case OLD:
			case ISSUER:
			case SUBJECT:
			case CACHE:
			case GENERAL:
			case SLOW:
			case USER_RESOURCES:
			case EXPORT:
			case RELAY:
			case HOSTS:
			case FLUSH:
			case RESET:
			case RESTART:
			case IO_THREAD:
			case SQL_THREAD:
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case SQL_AFTER_MTS_GAPS:
			case UNTIL:
			case DEFAULT_AUTH:
			case PLUGIN_DIR:
			case STOP:
			case IDENTIFIER_:
			case STRING_:
				{
				setState(4069);
				userName();
				}
				break;
			case CURRENT_USER:
				{
				setState(4070);
				match(CURRENT_USER);
				setState(4073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(4071);
					match(LP_);
					setState(4072);
					match(RP_);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpression_Context extends ParserRuleContext {
		public TerminalNode AT_() { return getToken(MySQLStatementParser.AT_, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<TerminalNode> PLUS_() { return getTokens(MySQLStatementParser.PLUS_); }
		public TerminalNode PLUS_(int i) {
			return getToken(MySQLStatementParser.PLUS_, i);
		}
		public List<IntervalExpressionContext> intervalExpression() {
			return getRuleContexts(IntervalExpressionContext.class);
		}
		public IntervalExpressionContext intervalExpression(int i) {
			return getRuleContext(IntervalExpressionContext.class,i);
		}
		public TerminalNode EVERY() { return getToken(MySQLStatementParser.EVERY, 0); }
		public TerminalNode STARTS() { return getToken(MySQLStatementParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(MySQLStatementParser.ENDS, 0); }
		public ScheduleExpression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitScheduleExpression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleExpression_Context scheduleExpression_() throws RecognitionException {
		ScheduleExpression_Context _localctx = new ScheduleExpression_Context(_ctx, getState());
		enterRule(_localctx, 494, RULE_scheduleExpression_);
		int _la;
		try {
			setState(4110);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4077);
				match(AT_);
				setState(4078);
				timestampValue();
				setState(4083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS_) {
					{
					{
					setState(4079);
					match(PLUS_);
					setState(4080);
					intervalExpression();
					}
					}
					setState(4085);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4086);
				match(EVERY);
				setState(4087);
				intervalExpression();
				setState(4097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(4088);
					match(STARTS);
					setState(4089);
					timestampValue();
					setState(4094);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS_) {
						{
						{
						setState(4090);
						match(PLUS_);
						setState(4091);
						intervalExpression();
						}
						}
						setState(4096);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(4099);
					match(ENDS);
					setState(4100);
					timestampValue();
					setState(4105);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS_) {
						{
						{
						setState(4101);
						match(PLUS_);
						setState(4102);
						intervalExpression();
						}
						}
						setState(4107);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_timestampValue);
		try {
			setState(4116);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4112);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4113);
				stringLiterals();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4114);
				numberLiterals();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4115);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public TerminalNode NOT_SUPPORT_() { return getToken(MySQLStatementParser.NOT_SUPPORT_, 0); }
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRoutineBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_routineBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4118);
			match(NOT_SUPPORT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOption_Context extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(MySQLStatementParser.HOST, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode DATABASE() { return getToken(MySQLStatementParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(MySQLStatementParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(MySQLStatementParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(MySQLStatementParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(MySQLStatementParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(MySQLStatementParser.PORT, 0); }
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ServerOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitServerOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOption_Context serverOption_() throws RecognitionException {
		ServerOption_Context _localctx = new ServerOption_Context(_ctx, getState());
		enterRule(_localctx, 500, RULE_serverOption_);
		try {
			setState(4134);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4120);
				match(HOST);
				setState(4121);
				match(STRING_);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4122);
				match(DATABASE);
				setState(4123);
				match(STRING_);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4124);
				match(USER);
				setState(4125);
				match(STRING_);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(4126);
				match(PASSWORD);
				setState(4127);
				match(STRING_);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(4128);
				match(SOCKET);
				setState(4129);
				match(STRING_);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(4130);
				match(OWNER);
				setState(4131);
				match(STRING_);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(4132);
				match(PORT);
				setState(4133);
				numberLiterals();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOption_Context extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(MySQLStatementParser.COMMENT, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySQLStatementParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(MySQLStatementParser.SQL, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(MySQLStatementParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public TerminalNode CONTAINS() { return getToken(MySQLStatementParser.CONTAINS, 0); }
		public TerminalNode NO() { return getToken(MySQLStatementParser.NO, 0); }
		public TerminalNode READS() { return getToken(MySQLStatementParser.READS, 0); }
		public TerminalNode DATA() { return getToken(MySQLStatementParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(MySQLStatementParser.MODIFIES, 0); }
		public TerminalNode SECURITY() { return getToken(MySQLStatementParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(MySQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySQLStatementParser.INVOKER, 0); }
		public RoutineOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRoutineOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOption_Context routineOption_() throws RecognitionException {
		RoutineOption_Context _localctx = new RoutineOption_Context(_ctx, getState());
		enterRule(_localctx, 502, RULE_routineOption_);
		int _la;
		try {
			setState(4159);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4136);
				match(COMMENT);
				setState(4137);
				match(STRING_);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4138);
				match(LANGUAGE);
				setState(4139);
				match(SQL);
				}
				break;
			case NOT:
			case DETERMINISTIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(4141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4140);
					match(NOT);
					}
				}

				setState(4143);
				match(DETERMINISTIC);
				}
				break;
			case NO:
			case CONTAINS:
			case READS:
			case MODIFIES:
				enterOuterAlt(_localctx, 4);
				{
				setState(4154);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(4144);
					match(CONTAINS);
					setState(4145);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(4146);
					match(NO);
					setState(4147);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(4148);
					match(READS);
					setState(4149);
					match(SQL);
					setState(4150);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(4151);
					match(MODIFIES);
					setState(4152);
					match(SQL);
					setState(4153);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4156);
				match(SQL);
				setState(4157);
				match(SECURITY);
				setState(4158);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameter_Context extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(MySQLStatementParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(MySQLStatementParser.INOUT, 0); }
		public ProcedureParameter_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitProcedureParameter_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameter_Context procedureParameter_() throws RecognitionException {
		ProcedureParameter_Context _localctx = new ProcedureParameter_Context(_ctx, getState());
		enterRule(_localctx, 504, RULE_procedureParameter_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4161);
			_la = _input.LA(1);
			if ( !(_la==IN || _la==OUT || _la==INOUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4162);
			identifier();
			setState(4163);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteral_Context extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySQLStatementParser.FILESIZE_LITERAL, 0); }
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public FileSizeLiteral_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFileSizeLiteral_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteral_Context fileSizeLiteral_() throws RecognitionException {
		FileSizeLiteral_Context _localctx = new FileSizeLiteral_Context(_ctx, getState());
		enterRule(_localctx, 506, RULE_fileSizeLiteral_);
		try {
			setState(4167);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4165);
				match(FILESIZE_LITERAL);
				}
				break;
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4166);
				numberLiterals();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySQLStatementParser.TRANSACTION, 0); }
		public Scope_Context scope_() {
			return getRuleContext(Scope_Context.class,0);
		}
		public SetTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionContext setTransaction() throws RecognitionException {
		SetTransactionContext _localctx = new SetTransactionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_setTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4169);
			match(SET);
			setState(4171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_ || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (GLOBAL - 295)) | (1L << (PERSIST - 295)) | (1L << (SESSION - 295)))) != 0) || _la==PERSIST_ONLY) {
				{
				setState(4170);
				scope_();
				}
			}

			setState(4173);
			match(TRANSACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutoCommitContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySQLStatementParser.AUTOCOMMIT, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public AutoCommitValueContext autoCommitValue() {
			return getRuleContext(AutoCommitValueContext.class,0);
		}
		public Scope_Context scope_() {
			return getRuleContext(Scope_Context.class,0);
		}
		public SetAutoCommitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutoCommit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSetAutoCommit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutoCommitContext setAutoCommit() throws RecognitionException {
		SetAutoCommitContext _localctx = new SetAutoCommitContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_setAutoCommit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4175);
			match(SET);
			setState(4177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_ || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (GLOBAL - 295)) | (1L << (PERSIST - 295)) | (1L << (SESSION - 295)))) != 0) || _la==PERSIST_ONLY) {
				{
				setState(4176);
				scope_();
				}
			}

			setState(4179);
			match(AUTOCOMMIT);
			setState(4180);
			match(EQ_);
			setState(4181);
			autoCommitValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scope_Context extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(MySQLStatementParser.GLOBAL, 0); }
		public TerminalNode PERSIST() { return getToken(MySQLStatementParser.PERSIST, 0); }
		public TerminalNode PERSIST_ONLY() { return getToken(MySQLStatementParser.PERSIST_ONLY, 0); }
		public TerminalNode SESSION() { return getToken(MySQLStatementParser.SESSION, 0); }
		public List<TerminalNode> AT_() { return getTokens(MySQLStatementParser.AT_); }
		public TerminalNode AT_(int i) {
			return getToken(MySQLStatementParser.AT_, i);
		}
		public TerminalNode DOT_() { return getToken(MySQLStatementParser.DOT_, 0); }
		public Scope_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scope_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitScope_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scope_Context scope_() throws RecognitionException {
		Scope_Context _localctx = new Scope_Context(_ctx, getState());
		enterRule(_localctx, 512, RULE_scope_);
		int _la;
		try {
			setState(4188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case PERSIST:
			case SESSION:
			case PERSIST_ONLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4183);
				_la = _input.LA(1);
				if ( !(((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (GLOBAL - 295)) | (1L << (PERSIST - 295)) | (1L << (SESSION - 295)))) != 0) || _la==PERSIST_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case AT_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4184);
				match(AT_);
				setState(4185);
				match(AT_);
				setState(4186);
				_la = _input.LA(1);
				if ( !(((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (GLOBAL - 295)) | (1L << (PERSIST - 295)) | (1L << (SESSION - 295)))) != 0) || _la==PERSIST_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4187);
				match(DOT_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AutoCommitValueContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode ON() { return getToken(MySQLStatementParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MySQLStatementParser.OFF, 0); }
		public AutoCommitValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_autoCommitValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAutoCommitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AutoCommitValueContext autoCommitValue() throws RecognitionException {
		AutoCommitValueContext _localctx = new AutoCommitValueContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_autoCommitValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4190);
			_la = _input.LA(1);
			if ( !(_la==ON || _la==OFF || _la==NUMBER_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginTransactionContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySQLStatementParser.BEGIN, 0); }
		public TerminalNode START() { return getToken(MySQLStatementParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySQLStatementParser.TRANSACTION, 0); }
		public BeginTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitBeginTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginTransactionContext beginTransaction() throws RecognitionException {
		BeginTransactionContext _localctx = new BeginTransactionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_beginTransaction);
		try {
			setState(4195);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4192);
				match(BEGIN);
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(4193);
				match(START);
				setState(4194);
				match(TRANSACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(MySQLStatementParser.COMMIT, 0); }
		public CommitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCommit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitContext commit() throws RecognitionException {
		CommitContext _localctx = new CommitContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_commit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4197);
			match(COMMIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(MySQLStatementParser.ROLLBACK, 0); }
		public RollbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRollback(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackContext rollback() throws RecognitionException {
		RollbackContext _localctx = new RollbackContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_rollback);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4199);
			match(ROLLBACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(MySQLStatementParser.SAVEPOINT, 0); }
		public SavepointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSavepoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointContext savepoint() throws RecognitionException {
		SavepointContext _localctx = new SavepointContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_savepoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4201);
			match(SAVEPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(MySQLStatementParser.GRANT, 0); }
		public ProxyClause_Context proxyClause_() {
			return getRuleContext(ProxyClause_Context.class,0);
		}
		public PrivilegeClauseContext privilegeClause() {
			return getRuleContext(PrivilegeClauseContext.class,0);
		}
		public RoleClause_Context roleClause_() {
			return getRuleContext(RoleClause_Context.class,0);
		}
		public GrantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitGrant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantContext grant() throws RecognitionException {
		GrantContext _localctx = new GrantContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_grant);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4203);
			match(GRANT);
			setState(4207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				setState(4204);
				proxyClause_();
				}
				break;
			case 2:
				{
				setState(4205);
				privilegeClause();
				}
				break;
			case 3:
				{
				setState(4206);
				roleClause_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(MySQLStatementParser.REVOKE, 0); }
		public ProxyClause_Context proxyClause_() {
			return getRuleContext(ProxyClause_Context.class,0);
		}
		public PrivilegeClauseContext privilegeClause() {
			return getRuleContext(PrivilegeClauseContext.class,0);
		}
		public AllClause_Context allClause_() {
			return getRuleContext(AllClause_Context.class,0);
		}
		public RoleClause_Context roleClause_() {
			return getRuleContext(RoleClause_Context.class,0);
		}
		public RevokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeContext revoke() throws RecognitionException {
		RevokeContext _localctx = new RevokeContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_revoke);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4209);
			match(REVOKE);
			setState(4214);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				setState(4210);
				proxyClause_();
				}
				break;
			case 2:
				{
				setState(4211);
				privilegeClause();
				}
				break;
			case 3:
				{
				setState(4212);
				allClause_();
				}
				break;
			case 4:
				{
				setState(4213);
				roleClause_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProxyClause_Context extends ParserRuleContext {
		public TerminalNode PROXY() { return getToken(MySQLStatementParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySQLStatementParser.ON, 0); }
		public UserOrRoleContext userOrRole() {
			return getRuleContext(UserOrRoleContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public UserOrRoles_Context userOrRoles_() {
			return getRuleContext(UserOrRoles_Context.class,0);
		}
		public WithGrantOption_Context withGrantOption_() {
			return getRuleContext(WithGrantOption_Context.class,0);
		}
		public ProxyClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proxyClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitProxyClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProxyClause_Context proxyClause_() throws RecognitionException {
		ProxyClause_Context _localctx = new ProxyClause_Context(_ctx, getState());
		enterRule(_localctx, 528, RULE_proxyClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4216);
			match(PROXY);
			setState(4217);
			match(ON);
			setState(4218);
			userOrRole();
			setState(4219);
			match(TO);
			setState(4220);
			userOrRoles_();
			setState(4222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4221);
				withGrantOption_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeClauseContext extends ParserRuleContext {
		public Privileges_Context privileges_() {
			return getRuleContext(Privileges_Context.class,0);
		}
		public TerminalNode ON() { return getToken(MySQLStatementParser.ON, 0); }
		public OnObjectClauseContext onObjectClause() {
			return getRuleContext(OnObjectClauseContext.class,0);
		}
		public UserOrRoles_Context userOrRoles_() {
			return getRuleContext(UserOrRoles_Context.class,0);
		}
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public WithGrantOption_Context withGrantOption_() {
			return getRuleContext(WithGrantOption_Context.class,0);
		}
		public GrantOption_Context grantOption_() {
			return getRuleContext(GrantOption_Context.class,0);
		}
		public PrivilegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPrivilegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeClauseContext privilegeClause() throws RecognitionException {
		PrivilegeClauseContext _localctx = new PrivilegeClauseContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_privilegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4224);
			privileges_();
			setState(4225);
			match(ON);
			setState(4226);
			onObjectClause();
			setState(4227);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4228);
			userOrRoles_();
			setState(4230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4229);
				withGrantOption_();
				}
			}

			setState(4233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4232);
				grantOption_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleClause_Context extends ParserRuleContext {
		public Roles_Context roles_() {
			return getRuleContext(Roles_Context.class,0);
		}
		public UserOrRoles_Context userOrRoles_() {
			return getRuleContext(UserOrRoles_Context.class,0);
		}
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public WithGrantOption_Context withGrantOption_() {
			return getRuleContext(WithGrantOption_Context.class,0);
		}
		public RoleClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRoleClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleClause_Context roleClause_() throws RecognitionException {
		RoleClause_Context _localctx = new RoleClause_Context(_ctx, getState());
		enterRule(_localctx, 532, RULE_roleClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4235);
			roles_();
			setState(4236);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4237);
			userOrRoles_();
			setState(4239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4238);
				withGrantOption_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllClause_Context extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public TerminalNode GRANT() { return getToken(MySQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySQLStatementParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public UserOrRoles_Context userOrRoles_() {
			return getRuleContext(UserOrRoles_Context.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(MySQLStatementParser.PRIVILEGES, 0); }
		public AllClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAllClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllClause_Context allClause_() throws RecognitionException {
		AllClause_Context _localctx = new AllClause_Context(_ctx, getState());
		enterRule(_localctx, 534, RULE_allClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4241);
			match(ALL);
			setState(4243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIVILEGES) {
				{
				setState(4242);
				match(PRIVILEGES);
				}
			}

			setState(4245);
			match(COMMA_);
			setState(4246);
			match(GRANT);
			setState(4247);
			match(OPTION);
			setState(4248);
			match(FROM);
			setState(4249);
			userOrRoles_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privileges_Context extends ParserRuleContext {
		public List<PrivilegeType_Context> privilegeType_() {
			return getRuleContexts(PrivilegeType_Context.class);
		}
		public PrivilegeType_Context privilegeType_(int i) {
			return getRuleContext(PrivilegeType_Context.class,i);
		}
		public List<ColumnNamesContext> columnNames() {
			return getRuleContexts(ColumnNamesContext.class);
		}
		public ColumnNamesContext columnNames(int i) {
			return getRuleContext(ColumnNamesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public Privileges_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPrivileges_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privileges_Context privileges_() throws RecognitionException {
		Privileges_Context _localctx = new Privileges_Context(_ctx, getState());
		enterRule(_localctx, 536, RULE_privileges_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4251);
			privilegeType_();
			setState(4253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (LP_ - 28)) | (1L << (TRUNCATE - 28)) | (1L << (POSITION - 28)) | (1L << (VIEW - 28)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (ANY - 110)) | (1L << (OFFSET - 110)) | (1L << (BEGIN - 110)) | (1L << (COMMIT - 110)) | (1L << (ROLLBACK - 110)) | (1L << (SAVEPOINT - 110)) | (1L << (BOOLEAN - 110)) | (1L << (DATE - 110)) | (1L << (TIME - 110)) | (1L << (TIMESTAMP - 110)) | (1L << (YEAR - 110)) | (1L << (QUARTER - 110)) | (1L << (MONTH - 110)) | (1L << (WEEK - 110)) | (1L << (DAY - 110)) | (1L << (HOUR - 110)) | (1L << (MINUTE - 110)) | (1L << (SECOND - 110)) | (1L << (MICROSECOND - 110)) | (1L << (MAX - 110)) | (1L << (MIN - 110)) | (1L << (SUM - 110)) | (1L << (COUNT - 110)) | (1L << (AVG - 110)) | (1L << (CURRENT - 110)) | (1L << (ENABLE - 110)) | (1L << (DISABLE - 110)) | (1L << (INSTANCE - 110)) | (1L << (DO - 110)) | (1L << (DEFINER - 110)) | (1L << (CASCADED - 110)) | (1L << (LOCAL - 110)) | (1L << (CLOSE - 110)) | (1L << (OPEN - 110)) | (1L << (NEXT - 110)) | (1L << (NAME - 110)) | (1L << (TYPE - 110)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
				{
				setState(4252);
				columnNames();
				}
			}

			setState(4262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4255);
				match(COMMA_);
				setState(4256);
				privilegeType_();
				setState(4258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (LP_ - 28)) | (1L << (TRUNCATE - 28)) | (1L << (POSITION - 28)) | (1L << (VIEW - 28)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (ANY - 110)) | (1L << (OFFSET - 110)) | (1L << (BEGIN - 110)) | (1L << (COMMIT - 110)) | (1L << (ROLLBACK - 110)) | (1L << (SAVEPOINT - 110)) | (1L << (BOOLEAN - 110)) | (1L << (DATE - 110)) | (1L << (TIME - 110)) | (1L << (TIMESTAMP - 110)) | (1L << (YEAR - 110)) | (1L << (QUARTER - 110)) | (1L << (MONTH - 110)) | (1L << (WEEK - 110)) | (1L << (DAY - 110)) | (1L << (HOUR - 110)) | (1L << (MINUTE - 110)) | (1L << (SECOND - 110)) | (1L << (MICROSECOND - 110)) | (1L << (MAX - 110)) | (1L << (MIN - 110)) | (1L << (SUM - 110)) | (1L << (COUNT - 110)) | (1L << (AVG - 110)) | (1L << (CURRENT - 110)) | (1L << (ENABLE - 110)) | (1L << (DISABLE - 110)) | (1L << (INSTANCE - 110)) | (1L << (DO - 110)) | (1L << (DEFINER - 110)) | (1L << (CASCADED - 110)) | (1L << (LOCAL - 110)) | (1L << (CLOSE - 110)) | (1L << (OPEN - 110)) | (1L << (NEXT - 110)) | (1L << (NAME - 110)) | (1L << (TYPE - 110)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
					{
					setState(4257);
					columnNames();
					}
				}

				}
				}
				setState(4264);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeType_Context extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(MySQLStatementParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(MySQLStatementParser.TABLES, 0); }
		public TerminalNode USER() { return getToken(MySQLStatementParser.USER, 0); }
		public TerminalNode VIEW() { return getToken(MySQLStatementParser.VIEW, 0); }
		public TerminalNode DELETE() { return getToken(MySQLStatementParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySQLStatementParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(MySQLStatementParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySQLStatementParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(MySQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySQLStatementParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(MySQLStatementParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(MySQLStatementParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(MySQLStatementParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(MySQLStatementParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(MySQLStatementParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(MySQLStatementParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(MySQLStatementParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(MySQLStatementParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLStatementParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(MySQLStatementParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(MySQLStatementParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySQLStatementParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySQLStatementParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(MySQLStatementParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(MySQLStatementParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(MySQLStatementParser.USAGE, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySQLStatementParser.AUDIT_ADMIN, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySQLStatementParser.BINLOG_ADMIN, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySQLStatementParser.CONNECTION_ADMIN, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySQLStatementParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySQLStatementParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySQLStatementParser.FIREWALL_USER, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySQLStatementParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySQLStatementParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySQLStatementParser.ROLE_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySQLStatementParser.SET_USER_ID, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySQLStatementParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySQLStatementParser.VERSION_TOKEN_ADMIN, 0); }
		public PrivilegeType_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeType_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPrivilegeType_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeType_Context privilegeType_() throws RecognitionException {
		PrivilegeType_Context _localctx = new PrivilegeType_Context(_ctx, getState());
		enterRule(_localctx, 538, RULE_privilegeType_);
		int _la;
		try {
			setState(4326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4265);
				match(ALL);
				setState(4267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
				case 1:
					{
					setState(4266);
					match(PRIVILEGES);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4269);
				match(ALTER);
				setState(4271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4270);
					match(ROUTINE);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4273);
				match(CREATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4274);
				match(CREATE);
				setState(4275);
				match(ROUTINE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4276);
				match(CREATE);
				setState(4277);
				match(TABLESPACE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4278);
				match(CREATE);
				setState(4279);
				match(TEMPORARY);
				setState(4280);
				match(TABLES);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4281);
				match(CREATE);
				setState(4282);
				match(USER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4283);
				match(CREATE);
				setState(4284);
				match(VIEW);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4285);
				match(DELETE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4286);
				match(DROP);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4287);
				match(EVENT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4288);
				match(EXECUTE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4289);
				match(FILE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4290);
				match(GRANT);
				setState(4291);
				match(OPTION);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4292);
				match(INDEX);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4293);
				match(INSERT);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4294);
				match(LOCK);
				setState(4295);
				match(TABLES);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4296);
				match(PROCESS);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4297);
				match(PROXY);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4298);
				match(REFERENCES);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4299);
				match(RELOAD);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4300);
				match(REPLICATION);
				setState(4301);
				match(CLIENT);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4302);
				match(REPLICATION);
				setState(4303);
				match(SLAVE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4304);
				match(SELECT);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(4305);
				match(SHOW);
				setState(4306);
				match(DATABASES);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(4307);
				match(SHOW);
				setState(4308);
				match(VIEW);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(4309);
				match(SHUTDOWN);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(4310);
				match(SUPER);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(4311);
				match(TRIGGER);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(4312);
				match(UPDATE);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(4313);
				match(USAGE);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(4314);
				match(AUDIT_ADMIN);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(4315);
				match(BINLOG_ADMIN);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(4316);
				match(CONNECTION_ADMIN);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(4317);
				match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(4318);
				match(FIREWALL_ADMIN);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(4319);
				match(FIREWALL_USER);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(4320);
				match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(4321);
				match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(4322);
				match(ROLE_ADMIN);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(4323);
				match(SET_USER_ID);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(4324);
				match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(4325);
				match(VERSION_TOKEN_ADMIN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnObjectClauseContext extends ParserRuleContext {
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public ObjectType_Context objectType_() {
			return getRuleContext(ObjectType_Context.class,0);
		}
		public OnObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onObjectClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitOnObjectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnObjectClauseContext onObjectClause() throws RecognitionException {
		OnObjectClauseContext _localctx = new OnObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_onObjectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (TABLE - 57)) | (1L << (FUNCTION - 57)) | (1L << (PROCEDURE - 57)))) != 0)) {
				{
				setState(4328);
				objectType_();
				}
			}

			setState(4331);
			privilegeLevel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjectType_Context extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLStatementParser.PROCEDURE, 0); }
		public ObjectType_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectType_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitObjectType_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectType_Context objectType_() throws RecognitionException {
		ObjectType_Context _localctx = new ObjectType_Context(_ctx, getState());
		enterRule(_localctx, 542, RULE_objectType_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4333);
			_la = _input.LA(1);
			if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (TABLE - 57)) | (1L << (FUNCTION - 57)) | (1L << (PROCEDURE - 57)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public TerminalNode ASTERISK_() { return getToken(MySQLStatementParser.ASTERISK_, 0); }
		public TerminalNode DOT_ASTERISK_() { return getToken(MySQLStatementParser.DOT_ASTERISK_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPrivilegeLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_privilegeLevel);
		try {
			setState(4342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4335);
				match(ASTERISK_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4336);
				match(ASTERISK_);
				setState(4337);
				match(DOT_ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4338);
				identifier();
				setState(4339);
				match(DOT_ASTERISK_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4341);
				tableName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySQLStatementParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySQLStatementParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public List<UserAuthOption_Context> userAuthOption_() {
			return getRuleContexts(UserAuthOption_Context.class);
		}
		public UserAuthOption_Context userAuthOption_(int i) {
			return getRuleContext(UserAuthOption_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySQLStatementParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public List<ResourceOption_Context> resourceOption_() {
			return getRuleContexts(ResourceOption_Context.class);
		}
		public ResourceOption_Context resourceOption_(int i) {
			return getRuleContext(ResourceOption_Context.class,i);
		}
		public List<PasswordOption_Context> passwordOption_() {
			return getRuleContexts(PasswordOption_Context.class);
		}
		public PasswordOption_Context passwordOption_(int i) {
			return getRuleContext(PasswordOption_Context.class,i);
		}
		public List<LockOption_Context> lockOption_() {
			return getRuleContexts(LockOption_Context.class);
		}
		public LockOption_Context lockOption_(int i) {
			return getRuleContext(LockOption_Context.class,i);
		}
		public TerminalNode NONE() { return getToken(MySQLStatementParser.NONE, 0); }
		public List<TlsOption_Context> tlsOption_() {
			return getRuleContexts(TlsOption_Context.class);
		}
		public TlsOption_Context tlsOption_(int i) {
			return getRuleContext(TlsOption_Context.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySQLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySQLStatementParser.AND, i);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_createUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4344);
			match(CREATE);
			setState(4345);
			match(USER);
			setState(4349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4346);
				match(IF);
				setState(4347);
				match(NOT);
				setState(4348);
				match(EXISTS);
				}
			}

			setState(4351);
			userName();
			setState(4353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISCARD || _la==IDENTIFIED) {
				{
				setState(4352);
				userAuthOption_();
				}
			}

			setState(4362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4355);
				match(COMMA_);
				setState(4356);
				userName();
				setState(4358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISCARD || _la==IDENTIFIED) {
					{
					setState(4357);
					userAuthOption_();
					}
				}

				}
				}
				setState(4364);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4365);
			match(DEFAULT);
			setState(4366);
			match(ROLE);
			setState(4367);
			roleName();
			setState(4372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4368);
				match(COMMA_);
				setState(4369);
				roleName();
				}
				}
				setState(4374);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4375);
				match(REQUIRE);
				setState(4387);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4376);
					match(NONE);
					}
					break;
				case CIPHER:
				case SSL:
				case X509:
				case ISSUER:
				case SUBJECT:
					{
					setState(4377);
					tlsOption_();
					setState(4384);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AND || _la==CIPHER || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (SSL - 507)) | (1L << (X509 - 507)) | (1L << (ISSUER - 507)) | (1L << (SUBJECT - 507)))) != 0)) {
						{
						{
						setState(4379);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(4378);
							match(AND);
							}
						}

						setState(4381);
						tlsOption_();
						}
						}
						setState(4386);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4391);
				match(WITH);
				setState(4392);
				resourceOption_();
				setState(4396);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (MAX_QUERIES_PER_HOUR - 531)) | (1L << (MAX_UPDATES_PER_HOUR - 531)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 531)) | (1L << (MAX_USER_CONNECTIONS - 531)))) != 0)) {
					{
					{
					setState(4393);
					resourceOption_();
					}
					}
					setState(4398);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4405);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ACCOUNT || _la==PASSWORD) {
				{
				setState(4403);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(4401);
					passwordOption_();
					}
					break;
				case ACCOUNT:
					{
					setState(4402);
					lockOption_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4407);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public List<TerminalNode> USER() { return getTokens(MySQLStatementParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(MySQLStatementParser.USER, i);
		}
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public List<UserAuthOption_Context> userAuthOption_() {
			return getRuleContexts(UserAuthOption_Context.class);
		}
		public UserAuthOption_Context userAuthOption_(int i) {
			return getRuleContext(UserAuthOption_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySQLStatementParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public List<ResourceOption_Context> resourceOption_() {
			return getRuleContexts(ResourceOption_Context.class);
		}
		public ResourceOption_Context resourceOption_(int i) {
			return getRuleContext(ResourceOption_Context.class,i);
		}
		public List<PasswordOption_Context> passwordOption_() {
			return getRuleContexts(PasswordOption_Context.class);
		}
		public PasswordOption_Context passwordOption_(int i) {
			return getRuleContext(PasswordOption_Context.class,i);
		}
		public List<LockOption_Context> lockOption_() {
			return getRuleContexts(LockOption_Context.class);
		}
		public LockOption_Context lockOption_(int i) {
			return getRuleContext(LockOption_Context.class,i);
		}
		public TerminalNode NONE() { return getToken(MySQLStatementParser.NONE, 0); }
		public List<TlsOption_Context> tlsOption_() {
			return getRuleContexts(TlsOption_Context.class);
		}
		public TlsOption_Context tlsOption_(int i) {
			return getRuleContext(TlsOption_Context.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySQLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySQLStatementParser.AND, i);
		}
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public UserFuncAuthOption_Context userFuncAuthOption_() {
			return getRuleContext(UserFuncAuthOption_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySQLStatementParser.ROLE, 0); }
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_alterUser);
		int _la;
		try {
			setState(4492);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4408);
				match(ALTER);
				setState(4409);
				match(USER);
				setState(4412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4410);
					match(IF);
					setState(4411);
					match(EXISTS);
					}
				}

				setState(4414);
				userName();
				setState(4416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISCARD || _la==IDENTIFIED) {
					{
					setState(4415);
					userAuthOption_();
					}
				}

				setState(4425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4418);
					match(COMMA_);
					setState(4419);
					userName();
					setState(4421);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DISCARD || _la==IDENTIFIED) {
						{
						setState(4420);
						userAuthOption_();
						}
					}

					}
					}
					setState(4427);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4428);
					match(REQUIRE);
					setState(4440);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4429);
						match(NONE);
						}
						break;
					case CIPHER:
					case SSL:
					case X509:
					case ISSUER:
					case SUBJECT:
						{
						setState(4430);
						tlsOption_();
						setState(4437);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==CIPHER || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (SSL - 507)) | (1L << (X509 - 507)) | (1L << (ISSUER - 507)) | (1L << (SUBJECT - 507)))) != 0)) {
							{
							{
							setState(4432);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4431);
								match(AND);
								}
							}

							setState(4434);
							tlsOption_();
							}
							}
							setState(4439);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4444);
					match(WITH);
					setState(4445);
					resourceOption_();
					setState(4449);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (MAX_QUERIES_PER_HOUR - 531)) | (1L << (MAX_UPDATES_PER_HOUR - 531)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 531)) | (1L << (MAX_USER_CONNECTIONS - 531)))) != 0)) {
						{
						{
						setState(4446);
						resourceOption_();
						}
						}
						setState(4451);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4456);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4454);
						passwordOption_();
						}
						break;
					case ACCOUNT:
						{
						setState(4455);
						lockOption_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4460);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4461);
				match(ALTER);
				setState(4462);
				match(USER);
				setState(4465);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4463);
					match(IF);
					setState(4464);
					match(EXISTS);
					}
				}

				setState(4467);
				match(USER);
				setState(4468);
				match(LP_);
				setState(4469);
				match(RP_);
				setState(4470);
				userFuncAuthOption_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4471);
				match(ALTER);
				setState(4472);
				match(USER);
				setState(4475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4473);
					match(IF);
					setState(4474);
					match(EXISTS);
					}
				}

				setState(4477);
				userName();
				setState(4478);
				match(DEFAULT);
				setState(4479);
				match(ROLE);
				setState(4490);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4480);
					match(NONE);
					}
					break;
				case ALL:
					{
					setState(4481);
					match(ALL);
					}
					break;
				case IDENTIFIER_:
				case STRING_:
					{
					setState(4482);
					roleName();
					setState(4487);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(4483);
						match(COMMA_);
						setState(4484);
						roleName();
						}
						}
						setState(4489);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode USER() { return getToken(MySQLStatementParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4494);
			match(DROP);
			setState(4495);
			match(USER);
			setState(4498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4496);
				match(IF);
				setState(4497);
				match(EXISTS);
				}
			}

			setState(4500);
			userName();
			setState(4505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4501);
				match(COMMA_);
				setState(4502);
				userName();
				}
				}
				setState(4507);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(MySQLStatementParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_createRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4508);
			match(CREATE);
			setState(4509);
			match(ROLE);
			setState(4513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4510);
				match(IF);
				setState(4511);
				match(NOT);
				setState(4512);
				match(EXISTS);
				}
			}

			setState(4515);
			roleName();
			setState(4520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4516);
				match(COMMA_);
				setState(4517);
				roleName();
				}
				}
				setState(4522);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(MySQLStatementParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_dropRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4523);
			match(DROP);
			setState(4524);
			match(ROLE);
			setState(4527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4525);
				match(IF);
				setState(4526);
				match(EXISTS);
				}
			}

			setState(4529);
			roleName();
			setState(4534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4530);
				match(COMMA_);
				setState(4531);
				roleName();
				}
				}
				setState(4536);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySQLStatementParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(MySQLStatementParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> TO() { return getTokens(MySQLStatementParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MySQLStatementParser.TO, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4537);
			match(RENAME);
			setState(4538);
			match(USER);
			setState(4539);
			userName();
			setState(4540);
			match(TO);
			setState(4541);
			userName();
			setState(4549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4542);
				match(COMMA_);
				setState(4543);
				userName();
				setState(4544);
				match(TO);
				setState(4545);
				userName();
				}
				}
				setState(4551);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetDefaultRoleContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySQLStatementParser.ROLE, 0); }
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySQLStatementParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public SetDefaultRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setDefaultRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSetDefaultRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetDefaultRoleContext setDefaultRole() throws RecognitionException {
		SetDefaultRoleContext _localctx = new SetDefaultRoleContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_setDefaultRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4552);
			match(SET);
			setState(4553);
			match(DEFAULT);
			setState(4554);
			match(ROLE);
			setState(4565);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(4555);
				match(NONE);
				}
				break;
			case ALL:
				{
				setState(4556);
				match(ALL);
				}
				break;
			case IDENTIFIER_:
			case STRING_:
				{
				setState(4557);
				roleName();
				setState(4562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4558);
					match(COMMA_);
					setState(4559);
					roleName();
					}
					}
					setState(4564);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4567);
			match(TO);
			setState(4568);
			userName();
			setState(4573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4569);
				match(COMMA_);
				setState(4570);
				userName();
				}
				}
				setState(4575);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRoleContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public TerminalNode ROLE() { return getToken(MySQLStatementParser.ROLE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySQLStatementParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public TerminalNode EXCEPT() { return getToken(MySQLStatementParser.EXCEPT, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public SetRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSetRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRoleContext setRole() throws RecognitionException {
		SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_setRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4576);
			match(SET);
			setState(4577);
			match(ROLE);
			setState(4599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
			case 1:
				{
				setState(4578);
				match(DEFAULT);
				}
				break;
			case 2:
				{
				setState(4579);
				match(NONE);
				}
				break;
			case 3:
				{
				setState(4580);
				match(ALL);
				}
				break;
			case 4:
				{
				setState(4581);
				match(ALL);
				setState(4582);
				match(EXCEPT);
				setState(4583);
				roleName();
				setState(4588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4584);
					match(COMMA_);
					setState(4585);
					roleName();
					}
					}
					setState(4590);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				{
				setState(4591);
				roleName();
				setState(4596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(4592);
					match(COMMA_);
					setState(4593);
					roleName();
					}
					}
					setState(4598);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public List<TerminalNode> PASSWORD() { return getTokens(MySQLStatementParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(MySQLStatementParser.PASSWORD, i);
		}
		public AuthOption_Context authOption_() {
			return getRuleContext(AuthOption_Context.class,0);
		}
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(MySQLStatementParser.REPLACE, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode RETAIN() { return getToken(MySQLStatementParser.RETAIN, 0); }
		public TerminalNode CURRENT() { return getToken(MySQLStatementParser.CURRENT, 0); }
		public SetPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPassword; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetPasswordContext setPassword() throws RecognitionException {
		SetPasswordContext _localctx = new SetPasswordContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_setPassword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4601);
			match(SET);
			setState(4602);
			match(PASSWORD);
			setState(4605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4603);
				match(FOR);
				setState(4604);
				userName();
				}
			}

			setState(4607);
			authOption_();
			setState(4610);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPLACE) {
				{
				setState(4608);
				match(REPLACE);
				setState(4609);
				match(STRING_);
				}
			}

			setState(4615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETAIN) {
				{
				setState(4612);
				match(RETAIN);
				setState(4613);
				match(CURRENT);
				setState(4614);
				match(PASSWORD);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthOption_Context extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public TerminalNode RANDOM() { return getToken(MySQLStatementParser.RANDOM, 0); }
		public AuthOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAuthOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthOption_Context authOption_() throws RecognitionException {
		AuthOption_Context _localctx = new AuthOption_Context(_ctx, getState());
		enterRule(_localctx, 564, RULE_authOption_);
		try {
			setState(4621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQ_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4617);
				match(EQ_);
				setState(4618);
				stringLiterals();
				}
				break;
			case TO:
				enterOuterAlt(_localctx, 2);
				{
				setState(4619);
				match(TO);
				setState(4620);
				match(RANDOM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithGrantOption_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(MySQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySQLStatementParser.OPTION, 0); }
		public WithGrantOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withGrantOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitWithGrantOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithGrantOption_Context withGrantOption_() throws RecognitionException {
		WithGrantOption_Context _localctx = new WithGrantOption_Context(_ctx, getState());
		enterRule(_localctx, 566, RULE_withGrantOption_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4623);
			match(WITH);
			setState(4624);
			match(GRANT);
			setState(4625);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserOrRoles_Context extends ParserRuleContext {
		public List<UserOrRoleContext> userOrRole() {
			return getRuleContexts(UserOrRoleContext.class);
		}
		public UserOrRoleContext userOrRole(int i) {
			return getRuleContext(UserOrRoleContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public UserOrRoles_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOrRoles_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUserOrRoles_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserOrRoles_Context userOrRoles_() throws RecognitionException {
		UserOrRoles_Context _localctx = new UserOrRoles_Context(_ctx, getState());
		enterRule(_localctx, 568, RULE_userOrRoles_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4627);
			userOrRole();
			setState(4632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4628);
				match(COMMA_);
				setState(4629);
				userOrRole();
				}
				}
				setState(4634);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Roles_Context extends ParserRuleContext {
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public Roles_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roles_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRoles_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Roles_Context roles_() throws RecognitionException {
		Roles_Context _localctx = new Roles_Context(_ctx, getState());
		enterRule(_localctx, 570, RULE_roles_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4635);
			roleName();
			setState(4640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4636);
				match(COMMA_);
				setState(4637);
				roleName();
				}
				}
				setState(4642);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOption_Context extends ParserRuleContext {
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public TerminalNode ROLE() { return getToken(MySQLStatementParser.ROLE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySQLStatementParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public TerminalNode EXCEPT() { return getToken(MySQLStatementParser.EXCEPT, 0); }
		public Roles_Context roles_() {
			return getRuleContext(Roles_Context.class,0);
		}
		public GrantOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitGrantOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantOption_Context grantOption_() throws RecognitionException {
		GrantOption_Context _localctx = new GrantOption_Context(_ctx, getState());
		enterRule(_localctx, 572, RULE_grantOption_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4643);
			match(AS);
			setState(4644);
			userName();
			setState(4654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				{
				setState(4645);
				match(WITH);
				setState(4646);
				match(ROLE);
				setState(4647);
				match(DEFAULT);
				}
				break;
			case 2:
				{
				setState(4648);
				match(NONE);
				}
				break;
			case 3:
				{
				setState(4649);
				match(ALL);
				}
				break;
			case 4:
				{
				setState(4650);
				match(ALL);
				setState(4651);
				match(EXCEPT);
				setState(4652);
				roles_();
				}
				break;
			case 5:
				{
				setState(4653);
				roles_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOption_Context extends ParserRuleContext {
		public IdentifiedBy_Context identifiedBy_() {
			return getRuleContext(IdentifiedBy_Context.class,0);
		}
		public IdentifiedWith_Context identifiedWith_() {
			return getRuleContext(IdentifiedWith_Context.class,0);
		}
		public TerminalNode DISCARD() { return getToken(MySQLStatementParser.DISCARD, 0); }
		public TerminalNode OLD() { return getToken(MySQLStatementParser.OLD, 0); }
		public TerminalNode PASSWORD() { return getToken(MySQLStatementParser.PASSWORD, 0); }
		public UserAuthOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUserAuthOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOption_Context userAuthOption_() throws RecognitionException {
		UserAuthOption_Context _localctx = new UserAuthOption_Context(_ctx, getState());
		enterRule(_localctx, 574, RULE_userAuthOption_);
		try {
			setState(4661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4656);
				identifiedBy_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4657);
				identifiedWith_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4658);
				match(DISCARD);
				setState(4659);
				match(OLD);
				setState(4660);
				match(PASSWORD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifiedBy_Context extends ParserRuleContext {
		public TerminalNode IDENTIFIED() { return getToken(MySQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public List<TerminalNode> STRING_() { return getTokens(MySQLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(MySQLStatementParser.STRING_, i);
		}
		public TerminalNode RANDOM() { return getToken(MySQLStatementParser.RANDOM, 0); }
		public List<TerminalNode> PASSWORD() { return getTokens(MySQLStatementParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(MySQLStatementParser.PASSWORD, i);
		}
		public TerminalNode REPLACE() { return getToken(MySQLStatementParser.REPLACE, 0); }
		public TerminalNode RETAIN() { return getToken(MySQLStatementParser.RETAIN, 0); }
		public TerminalNode CURRENT() { return getToken(MySQLStatementParser.CURRENT, 0); }
		public IdentifiedBy_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifiedBy_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIdentifiedBy_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifiedBy_Context identifiedBy_() throws RecognitionException {
		IdentifiedBy_Context _localctx = new IdentifiedBy_Context(_ctx, getState());
		enterRule(_localctx, 576, RULE_identifiedBy_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4663);
			match(IDENTIFIED);
			setState(4664);
			match(BY);
			setState(4668);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				{
				setState(4665);
				match(STRING_);
				}
				break;
			case RANDOM:
				{
				setState(4666);
				match(RANDOM);
				setState(4667);
				match(PASSWORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPLACE) {
				{
				setState(4670);
				match(REPLACE);
				setState(4671);
				match(STRING_);
				}
			}

			setState(4677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETAIN) {
				{
				setState(4674);
				match(RETAIN);
				setState(4675);
				match(CURRENT);
				setState(4676);
				match(PASSWORD);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifiedWith_Context extends ParserRuleContext {
		public TerminalNode IDENTIFIED() { return getToken(MySQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public PluginNameContext pluginName() {
			return getRuleContext(PluginNameContext.class,0);
		}
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public TerminalNode AS() { return getToken(MySQLStatementParser.AS, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode RANDOM() { return getToken(MySQLStatementParser.RANDOM, 0); }
		public List<TerminalNode> PASSWORD() { return getTokens(MySQLStatementParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(MySQLStatementParser.PASSWORD, i);
		}
		public TerminalNode REPLACE() { return getToken(MySQLStatementParser.REPLACE, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public TerminalNode RETAIN() { return getToken(MySQLStatementParser.RETAIN, 0); }
		public TerminalNode CURRENT() { return getToken(MySQLStatementParser.CURRENT, 0); }
		public IdentifiedWith_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifiedWith_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitIdentifiedWith_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifiedWith_Context identifiedWith_() throws RecognitionException {
		IdentifiedWith_Context _localctx = new IdentifiedWith_Context(_ctx, getState());
		enterRule(_localctx, 578, RULE_identifiedWith_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4679);
			match(IDENTIFIED);
			setState(4680);
			match(WITH);
			setState(4681);
			pluginName();
			setState(4682);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==BY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4686);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				{
				setState(4683);
				match(STRING_);
				}
				break;
			case RANDOM:
				{
				setState(4684);
				match(RANDOM);
				setState(4685);
				match(PASSWORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPLACE) {
				{
				setState(4688);
				match(REPLACE);
				setState(4689);
				stringLiterals();
				}
			}

			setState(4695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETAIN) {
				{
				setState(4692);
				match(RETAIN);
				setState(4693);
				match(CURRENT);
				setState(4694);
				match(PASSWORD);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockOption_Context extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySQLStatementParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(MySQLStatementParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(MySQLStatementParser.UNLOCK, 0); }
		public LockOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLockOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockOption_Context lockOption_() throws RecognitionException {
		LockOption_Context _localctx = new LockOption_Context(_ctx, getState());
		enterRule(_localctx, 580, RULE_lockOption_);
		try {
			setState(4701);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4697);
				match(ACCOUNT);
				setState(4698);
				match(LOCK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4699);
				match(ACCOUNT);
				setState(4700);
				match(UNLOCK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordOption_Context extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(MySQLStatementParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(MySQLStatementParser.EXPIRE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(MySQLStatementParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(MySQLStatementParser.INTERVAL, 0); }
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode DAY() { return getToken(MySQLStatementParser.DAY, 0); }
		public TerminalNode HISTORY() { return getToken(MySQLStatementParser.HISTORY, 0); }
		public TerminalNode REUSE() { return getToken(MySQLStatementParser.REUSE, 0); }
		public TerminalNode REQUIRE() { return getToken(MySQLStatementParser.REQUIRE, 0); }
		public TerminalNode CURRENT() { return getToken(MySQLStatementParser.CURRENT, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySQLStatementParser.OPTIONAL, 0); }
		public PasswordOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPasswordOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordOption_Context passwordOption_() throws RecognitionException {
		PasswordOption_Context _localctx = new PasswordOption_Context(_ctx, getState());
		enterRule(_localctx, 582, RULE_passwordOption_);
		int _la;
		try {
			setState(4727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4703);
				match(PASSWORD);
				setState(4704);
				match(EXPIRE);
				setState(4710);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(4705);
					match(DEFAULT);
					}
					break;
				case NEVER:
					{
					setState(4706);
					match(NEVER);
					}
					break;
				case INTERVAL:
					{
					setState(4707);
					match(INTERVAL);
					setState(4708);
					match(NUMBER_);
					setState(4709);
					match(DAY);
					}
					break;
				case EOF:
				case SEMI_:
				case ACCOUNT:
				case PASSWORD:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4712);
				match(PASSWORD);
				setState(4713);
				match(HISTORY);
				setState(4714);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NUMBER_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4715);
				match(PASSWORD);
				setState(4716);
				match(REUSE);
				setState(4717);
				match(INTERVAL);
				setState(4721);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(4718);
					match(DEFAULT);
					}
					break;
				case NUMBER_:
					{
					setState(4719);
					match(NUMBER_);
					setState(4720);
					match(DAY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4723);
				match(PASSWORD);
				setState(4724);
				match(REQUIRE);
				setState(4725);
				match(CURRENT);
				setState(4726);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==OPTIONAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceOption_Context extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySQLStatementParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySQLStatementParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySQLStatementParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySQLStatementParser.MAX_USER_CONNECTIONS, 0); }
		public ResourceOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitResourceOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceOption_Context resourceOption_() throws RecognitionException {
		ResourceOption_Context _localctx = new ResourceOption_Context(_ctx, getState());
		enterRule(_localctx, 584, RULE_resourceOption_);
		try {
			setState(4737);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4729);
				match(MAX_QUERIES_PER_HOUR);
				setState(4730);
				match(NUMBER_);
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4731);
				match(MAX_UPDATES_PER_HOUR);
				setState(4732);
				match(NUMBER_);
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4733);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(4734);
				match(NUMBER_);
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4735);
				match(MAX_USER_CONNECTIONS);
				setState(4736);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOption_Context extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(MySQLStatementParser.SSL, 0); }
		public TerminalNode X509() { return getToken(MySQLStatementParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(MySQLStatementParser.CIPHER, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode ISSUER() { return getToken(MySQLStatementParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(MySQLStatementParser.SUBJECT, 0); }
		public TlsOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTlsOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOption_Context tlsOption_() throws RecognitionException {
		TlsOption_Context _localctx = new TlsOption_Context(_ctx, getState());
		enterRule(_localctx, 586, RULE_tlsOption_);
		try {
			setState(4747);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4739);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4740);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4741);
				match(CIPHER);
				setState(4742);
				match(STRING_);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4743);
				match(ISSUER);
				setState(4744);
				match(STRING_);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4745);
				match(SUBJECT);
				setState(4746);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserFuncAuthOption_Context extends ParserRuleContext {
		public IdentifiedBy_Context identifiedBy_() {
			return getRuleContext(IdentifiedBy_Context.class,0);
		}
		public TerminalNode DISCARD() { return getToken(MySQLStatementParser.DISCARD, 0); }
		public TerminalNode OLD() { return getToken(MySQLStatementParser.OLD, 0); }
		public TerminalNode PASSWORD() { return getToken(MySQLStatementParser.PASSWORD, 0); }
		public UserFuncAuthOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userFuncAuthOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUserFuncAuthOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserFuncAuthOption_Context userFuncAuthOption_() throws RecognitionException {
		UserFuncAuthOption_Context _localctx = new UserFuncAuthOption_Context(_ctx, getState());
		enterRule(_localctx, 588, RULE_userFuncAuthOption_);
		try {
			setState(4753);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIED:
				enterOuterAlt(_localctx, 1);
				{
				setState(4749);
				identifiedBy_();
				}
				break;
			case DISCARD:
				enterOuterAlt(_localctx, 2);
				{
				setState(4750);
				match(DISCARD);
				setState(4751);
				match(OLD);
				setState(4752);
				match(PASSWORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(MySQLStatementParser.USE, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public UseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseContext use() throws RecognitionException {
		UseContext _localctx = new UseContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_use);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4755);
			match(USE);
			setState(4756);
			schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode DESC() { return getToken(MySQLStatementParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySQLStatementParser.DESCRIBE, 0); }
		public DescContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_desc; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDesc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescContext desc() throws RecognitionException {
		DescContext _localctx = new DescContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4758);
			_la = _input.LA(1);
			if ( !(_la==DESC || _la==DESCRIBE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4759);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowDatabasesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(MySQLStatementParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(MySQLStatementParser.SCHEMAS, 0); }
		public ShowLikeContext showLike() {
			return getRuleContext(ShowLikeContext.class,0);
		}
		public ShowWhereClause_Context showWhereClause_() {
			return getRuleContext(ShowWhereClause_Context.class,0);
		}
		public ShowDatabasesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showDatabases; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowDatabases(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowDatabasesContext showDatabases() throws RecognitionException {
		ShowDatabasesContext _localctx = new ShowDatabasesContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_showDatabases);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4761);
			match(SHOW);
			setState(4762);
			_la = _input.LA(1);
			if ( !(_la==DATABASES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4765);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				{
				setState(4763);
				showLike();
				}
				break;
			case WHERE:
				{
				setState(4764);
				showWhereClause_();
				}
				break;
			case EOF:
			case SEMI_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowTablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode TABLES() { return getToken(MySQLStatementParser.TABLES, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLStatementParser.EXTENDED, 0); }
		public TerminalNode FULL() { return getToken(MySQLStatementParser.FULL, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowLikeContext showLike() {
			return getRuleContext(ShowLikeContext.class,0);
		}
		public ShowWhereClause_Context showWhereClause_() {
			return getRuleContext(ShowWhereClause_Context.class,0);
		}
		public ShowTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTables; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowTablesContext showTables() throws RecognitionException {
		ShowTablesContext _localctx = new ShowTablesContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_showTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4767);
			match(SHOW);
			setState(4769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4768);
				match(EXTENDED);
				}
			}

			setState(4772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULL) {
				{
				setState(4771);
				match(FULL);
				}
			}

			setState(4774);
			match(TABLES);
			setState(4776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(4775);
				fromSchema();
				}
			}

			setState(4780);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				{
				setState(4778);
				showLike();
				}
				break;
			case WHERE:
				{
				setState(4779);
				showWhereClause_();
				}
				break;
			case EOF:
			case SEMI_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowTableStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(MySQLStatementParser.STATUS, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowLikeContext showLike() {
			return getRuleContext(ShowLikeContext.class,0);
		}
		public ShowWhereClause_Context showWhereClause_() {
			return getRuleContext(ShowWhereClause_Context.class,0);
		}
		public ShowTableStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTableStatus; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowTableStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowTableStatusContext showTableStatus() throws RecognitionException {
		ShowTableStatusContext _localctx = new ShowTableStatusContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_showTableStatus);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4782);
			match(SHOW);
			setState(4783);
			match(TABLE);
			setState(4784);
			match(STATUS);
			setState(4786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(4785);
				fromSchema();
				}
			}

			setState(4790);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				{
				setState(4788);
				showLike();
				}
				break;
			case WHERE:
				{
				setState(4789);
				showWhereClause_();
				}
				break;
			case EOF:
			case SEMI_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowColumnsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public FromTableContext fromTable() {
			return getRuleContext(FromTableContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(MySQLStatementParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(MySQLStatementParser.FIELDS, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLStatementParser.EXTENDED, 0); }
		public TerminalNode FULL() { return getToken(MySQLStatementParser.FULL, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowColumnLike_Context showColumnLike_() {
			return getRuleContext(ShowColumnLike_Context.class,0);
		}
		public ShowWhereClause_Context showWhereClause_() {
			return getRuleContext(ShowWhereClause_Context.class,0);
		}
		public ShowColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showColumns; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowColumnsContext showColumns() throws RecognitionException {
		ShowColumnsContext _localctx = new ShowColumnsContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_showColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4792);
			match(SHOW);
			setState(4794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4793);
				match(EXTENDED);
				}
			}

			setState(4797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULL) {
				{
				setState(4796);
				match(FULL);
				}
			}

			setState(4799);
			_la = _input.LA(1);
			if ( !(_la==COLUMNS || _la==FIELDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4800);
			fromTable();
			setState(4802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(4801);
				fromSchema();
				}
			}

			setState(4806);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				{
				setState(4804);
				showColumnLike_();
				}
				break;
			case WHERE:
				{
				setState(4805);
				showWhereClause_();
				}
				break;
			case EOF:
			case SEMI_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowIndexContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public FromTableContext fromTable() {
			return getRuleContext(FromTableContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(MySQLStatementParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(MySQLStatementParser.KEYS, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLStatementParser.EXTENDED, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowWhereClause_Context showWhereClause_() {
			return getRuleContext(ShowWhereClause_Context.class,0);
		}
		public ShowIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowIndexContext showIndex() throws RecognitionException {
		ShowIndexContext _localctx = new ShowIndexContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_showIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4808);
			match(SHOW);
			setState(4810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4809);
				match(EXTENDED);
				}
			}

			setState(4812);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==INDEXES || _la==KEYS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4813);
			fromTable();
			setState(4815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(4814);
				fromSchema();
				}
			}

			setState(4818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4817);
				showWhereClause_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateTableContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ShowCreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateTableContext showCreateTable() throws RecognitionException {
		ShowCreateTableContext _localctx = new ShowCreateTableContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_showCreateTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4820);
			match(SHOW);
			setState(4821);
			match(CREATE);
			setState(4822);
			match(TABLE);
			setState(4823);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowOtherContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public ShowOtherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showOther; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowOther(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowOtherContext showOther() throws RecognitionException {
		ShowOtherContext _localctx = new ShowOtherContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_showOther);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4825);
			match(SHOW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromSchemaContext extends ParserRuleContext {
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public FromSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromSchema; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFromSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromSchemaContext fromSchema() throws RecognitionException {
		FromSchemaContext _localctx = new FromSchemaContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_fromSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4827);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4828);
			schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromTableContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public FromTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFromTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromTableContext fromTable() throws RecognitionException {
		FromTableContext _localctx = new FromTableContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_fromTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4830);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4831);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowLikeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySQLStatementParser.LIKE, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public ShowLikeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showLike; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowLike(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowLikeContext showLike() throws RecognitionException {
		ShowLikeContext _localctx = new ShowLikeContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_showLike);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4833);
			match(LIKE);
			setState(4834);
			stringLiterals();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowColumnLike_Context extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySQLStatementParser.LIKE, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public ShowColumnLike_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showColumnLike_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowColumnLike_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowColumnLike_Context showColumnLike_() throws RecognitionException {
		ShowColumnLike_Context _localctx = new ShowColumnLike_Context(_ctx, getState());
		enterRule(_localctx, 614, RULE_showColumnLike_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4836);
			match(LIKE);
			setState(4837);
			stringLiterals();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowWhereClause_Context extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(MySQLStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ShowWhereClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showWhereClause_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowWhereClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowWhereClause_Context showWhereClause_() throws RecognitionException {
		ShowWhereClause_Context _localctx = new ShowWhereClause_Context(_ctx, getState());
		enterRule(_localctx, 616, RULE_showWhereClause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4839);
			match(WHERE);
			setState(4840);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public ShowLikeContext showLike() {
			return getRuleContext(ShowLikeContext.class,0);
		}
		public ShowWhereClause_Context showWhereClause_() {
			return getRuleContext(ShowWhereClause_Context.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_showFilter);
		try {
			setState(4844);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4842);
				showLike();
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4843);
				showWhereClause_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(MySQLStatementParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(MySQLStatementParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(MySQLStatementParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(MySQLStatementParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(MySQLStatementParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(MySQLStatementParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(MySQLStatementParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(MySQLStatementParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(MySQLStatementParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(MySQLStatementParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(MySQLStatementParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_showProfileType);
		try {
			setState(4858);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4846);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4847);
				match(BLOCK);
				setState(4848);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4849);
				match(CONTEXT);
				setState(4850);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(4851);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(4852);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(4853);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4854);
				match(PAGE);
				setState(4855);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4856);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(4857);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetVariableContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public SetVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setVariable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetVariableContext setVariable() throws RecognitionException {
		SetVariableContext _localctx = new SetVariableContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_setVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4860);
			match(SET);
			setState(4862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (DOT_ - 17)) | (1L << (AT_ - 17)) | (1L << (TRUNCATE - 17)) | (1L << (POSITION - 17)) | (1L << (VIEW - 17)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (ANY - 110)) | (1L << (OFFSET - 110)) | (1L << (BEGIN - 110)) | (1L << (COMMIT - 110)) | (1L << (ROLLBACK - 110)) | (1L << (SAVEPOINT - 110)) | (1L << (BOOLEAN - 110)) | (1L << (DATE - 110)) | (1L << (TIME - 110)) | (1L << (TIMESTAMP - 110)) | (1L << (YEAR - 110)) | (1L << (QUARTER - 110)) | (1L << (MONTH - 110)) | (1L << (WEEK - 110)) | (1L << (DAY - 110)) | (1L << (HOUR - 110)) | (1L << (MINUTE - 110)) | (1L << (SECOND - 110)) | (1L << (MICROSECOND - 110)) | (1L << (MAX - 110)) | (1L << (MIN - 110)) | (1L << (SUM - 110)) | (1L << (COUNT - 110)) | (1L << (AVG - 110)) | (1L << (CURRENT - 110)) | (1L << (ENABLE - 110)) | (1L << (DISABLE - 110)) | (1L << (INSTANCE - 110)) | (1L << (DO - 110)) | (1L << (DEFINER - 110)) | (1L << (CASCADED - 110)) | (1L << (LOCAL - 110)) | (1L << (CLOSE - 110)) | (1L << (OPEN - 110)) | (1L << (NEXT - 110)) | (1L << (NAME - 110)) | (1L << (TYPE - 110)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0)) {
				{
				setState(4861);
				variable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowBinaryLogsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(MySQLStatementParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySQLStatementParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySQLStatementParser.MASTER, 0); }
		public ShowBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showBinaryLogs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowBinaryLogsContext showBinaryLogs() throws RecognitionException {
		ShowBinaryLogsContext _localctx = new ShowBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_showBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4864);
			match(SHOW);
			setState(4865);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4866);
			match(LOGS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowBinlogEventsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode BINLOG() { return getToken(MySQLStatementParser.BINLOG, 0); }
		public TerminalNode EVENTS() { return getToken(MySQLStatementParser.EVENTS, 0); }
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public TerminalNode DEFINER() { return getToken(MySQLStatementParser.DEFINER, 0); }
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public TerminalNode LIMIT() { return getToken(MySQLStatementParser.LIMIT, 0); }
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public ShowBinlogEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showBinlogEvents; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowBinlogEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowBinlogEventsContext showBinlogEvents() throws RecognitionException {
		ShowBinlogEventsContext _localctx = new ShowBinlogEventsContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_showBinlogEvents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4868);
			match(SHOW);
			setState(4869);
			match(BINLOG);
			setState(4870);
			match(EVENTS);
			setState(4873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(4871);
				match(IN);
				setState(4872);
				match(DEFINER);
				}
			}

			setState(4877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4875);
				match(FROM);
				setState(4876);
				match(NUMBER_);
				}
			}

			setState(4885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(4879);
				match(LIMIT);
				setState(4882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
				case 1:
					{
					setState(4880);
					match(NUMBER_);
					setState(4881);
					match(COMMA_);
					}
					break;
				}
				setState(4884);
				match(NUMBER_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCharacterSetContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode CHARACTER() { return getToken(MySQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowCharacterSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCharacterSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowCharacterSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCharacterSetContext showCharacterSet() throws RecognitionException {
		ShowCharacterSetContext _localctx = new ShowCharacterSetContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_showCharacterSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4887);
			match(SHOW);
			setState(4888);
			match(CHARACTER);
			setState(4889);
			match(SET);
			setState(4891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE || _la==LIKE) {
				{
				setState(4890);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCollationContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode COLLATION() { return getToken(MySQLStatementParser.COLLATION, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCollation; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCollationContext showCollation() throws RecognitionException {
		ShowCollationContext _localctx = new ShowCollationContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_showCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4893);
			match(SHOW);
			setState(4894);
			match(COLLATION);
			setState(4896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE || _la==LIKE) {
				{
				setState(4895);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateDatabaseContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySQLStatementParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySQLStatementParser.SCHEMA, 0); }
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public ShowCreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateDatabase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateDatabaseContext showCreateDatabase() throws RecognitionException {
		ShowCreateDatabaseContext _localctx = new ShowCreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_showCreateDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4898);
			match(SHOW);
			setState(4899);
			match(CREATE);
			setState(4900);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==DATABASE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4901);
				match(IF);
				setState(4902);
				match(NOT);
				setState(4903);
				match(EXISTS);
				}
			}

			setState(4906);
			schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateEventContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MySQLStatementParser.EVENT, 0); }
		public EventNameContext eventName() {
			return getRuleContext(EventNameContext.class,0);
		}
		public ShowCreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateEventContext showCreateEvent() throws RecognitionException {
		ShowCreateEventContext _localctx = new ShowCreateEventContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_showCreateEvent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4908);
			match(SHOW);
			setState(4909);
			match(CREATE);
			setState(4910);
			match(EVENT);
			setState(4911);
			eventName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateFunctionContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLStatementParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public ShowCreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateFunctionContext showCreateFunction() throws RecognitionException {
		ShowCreateFunctionContext _localctx = new ShowCreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_showCreateFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4913);
			match(SHOW);
			setState(4914);
			match(CREATE);
			setState(4915);
			match(FUNCTION);
			setState(4916);
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateProcedureContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLStatementParser.PROCEDURE, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public ShowCreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateProcedure; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateProcedureContext showCreateProcedure() throws RecognitionException {
		ShowCreateProcedureContext _localctx = new ShowCreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_showCreateProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4918);
			match(SHOW);
			setState(4919);
			match(CREATE);
			setState(4920);
			match(PROCEDURE);
			setState(4921);
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateTriggerContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySQLStatementParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public ShowCreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateTrigger; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateTriggerContext showCreateTrigger() throws RecognitionException {
		ShowCreateTriggerContext _localctx = new ShowCreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_showCreateTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4923);
			match(SHOW);
			setState(4924);
			match(CREATE);
			setState(4925);
			match(TRIGGER);
			setState(4926);
			triggerName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateUserContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySQLStatementParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateUserContext showCreateUser() throws RecognitionException {
		ShowCreateUserContext _localctx = new ShowCreateUserContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_showCreateUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4928);
			match(SHOW);
			setState(4929);
			match(CREATE);
			setState(4930);
			match(USER);
			setState(4931);
			userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateViewContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MySQLStatementParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public ShowCreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateView; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateViewContext showCreateView() throws RecognitionException {
		ShowCreateViewContext _localctx = new ShowCreateViewContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_showCreateView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			match(SHOW);
			setState(4934);
			match(CREATE);
			setState(4935);
			match(VIEW);
			setState(4936);
			viewName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowEngineContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(MySQLStatementParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(MySQLStatementParser.MUTEX, 0); }
		public ShowEngineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEngine; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowEngineContext showEngine() throws RecognitionException {
		ShowEngineContext _localctx = new ShowEngineContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_showEngine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4938);
			match(SHOW);
			setState(4939);
			match(ENGINE);
			setState(4940);
			engineName();
			setState(4941);
			_la = _input.LA(1);
			if ( !(_la==STATUS || _la==MUTEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowEnginesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode ENGINES() { return getToken(MySQLStatementParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(MySQLStatementParser.STORAGE, 0); }
		public ShowEnginesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEngines; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowEngines(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowEnginesContext showEngines() throws RecognitionException {
		ShowEnginesContext _localctx = new ShowEnginesContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_showEngines);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4943);
			match(SHOW);
			setState(4945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORAGE) {
				{
				setState(4944);
				match(STORAGE);
				}
			}

			setState(4947);
			match(ENGINES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowErrorsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(MySQLStatementParser.ERRORS, 0); }
		public TerminalNode COUNT() { return getToken(MySQLStatementParser.COUNT, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode ASTERISK_() { return getToken(MySQLStatementParser.ASTERISK_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode LIMIT() { return getToken(MySQLStatementParser.LIMIT, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public ShowErrorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showErrors; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowErrorsContext showErrors() throws RecognitionException {
		ShowErrorsContext _localctx = new ShowErrorsContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_showErrors);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4949);
			match(SHOW);
			setState(4964);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ERRORS:
				{
				{
				setState(4950);
				match(ERRORS);
				setState(4957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(4951);
					match(LIMIT);
					setState(4954);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
					case 1:
						{
						setState(4952);
						match(NUMBER_);
						setState(4953);
						match(COMMA_);
						}
						break;
					}
					setState(4956);
					match(NUMBER_);
					}
				}

				}
				}
				break;
			case COUNT:
				{
				{
				setState(4959);
				match(COUNT);
				setState(4960);
				match(LP_);
				setState(4961);
				match(ASTERISK_);
				setState(4962);
				match(RP_);
				setState(4963);
				match(ERRORS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowEventsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(MySQLStatementParser.EVENTS, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEvents; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowEventsContext showEvents() throws RecognitionException {
		ShowEventsContext _localctx = new ShowEventsContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_showEvents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4966);
			match(SHOW);
			setState(4967);
			match(EVENTS);
			setState(4969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(4968);
				fromSchema();
				}
			}

			setState(4972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE || _la==LIKE) {
				{
				setState(4971);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFunctionCodeContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLStatementParser.FUNCTION, 0); }
		public TerminalNode CODE() { return getToken(MySQLStatementParser.CODE, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public ShowFunctionCodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFunctionCode; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowFunctionCode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFunctionCodeContext showFunctionCode() throws RecognitionException {
		ShowFunctionCodeContext _localctx = new ShowFunctionCodeContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_showFunctionCode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4974);
			match(SHOW);
			setState(4975);
			match(FUNCTION);
			setState(4976);
			match(CODE);
			setState(4977);
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFunctionStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLStatementParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(MySQLStatementParser.STATUS, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowFunctionStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFunctionStatus; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowFunctionStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFunctionStatusContext showFunctionStatus() throws RecognitionException {
		ShowFunctionStatusContext _localctx = new ShowFunctionStatusContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_showFunctionStatus);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4979);
			match(SHOW);
			setState(4980);
			match(FUNCTION);
			setState(4981);
			match(STATUS);
			setState(4983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE || _la==LIKE) {
				{
				setState(4982);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGrantContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(MySQLStatementParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public TerminalNode USING() { return getToken(MySQLStatementParser.USING, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public ShowGrantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGrant; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowGrant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGrantContext showGrant() throws RecognitionException {
		ShowGrantContext _localctx = new ShowGrantContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_showGrant);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4985);
			match(SHOW);
			setState(4986);
			match(GRANTS);
			{
			setState(4987);
			match(FOR);
			setState(4990);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
			case 1:
				{
				setState(4988);
				userName();
				}
				break;
			case 2:
				{
				setState(4989);
				roleName();
				}
				break;
			}
			setState(5000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4992);
				match(USING);
				setState(4993);
				roleName();
				setState(4996); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4994);
					match(COMMA_);
					setState(4995);
					roleName();
					}
					}
					setState(4998); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA_ );
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowMasterStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode MASTER() { return getToken(MySQLStatementParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(MySQLStatementParser.STATUS, 0); }
		public ShowMasterStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showMasterStatus; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowMasterStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowMasterStatusContext showMasterStatus() throws RecognitionException {
		ShowMasterStatusContext _localctx = new ShowMasterStatusContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_showMasterStatus);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5002);
			match(SHOW);
			setState(5003);
			match(MASTER);
			setState(5004);
			match(STATUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowOpenTablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(MySQLStatementParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(MySQLStatementParser.TABLES, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowOpenTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showOpenTables; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowOpenTablesContext showOpenTables() throws RecognitionException {
		ShowOpenTablesContext _localctx = new ShowOpenTablesContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_showOpenTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5006);
			match(SHOW);
			setState(5007);
			match(OPEN);
			setState(5008);
			match(TABLES);
			setState(5010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(5009);
				fromSchema();
				}
			}

			setState(5013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE || _la==LIKE) {
				{
				setState(5012);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowPluginsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode PLUGINS() { return getToken(MySQLStatementParser.PLUGINS, 0); }
		public ShowPluginsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showPlugins; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowPlugins(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowPluginsContext showPlugins() throws RecognitionException {
		ShowPluginsContext _localctx = new ShowPluginsContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_showPlugins);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5015);
			match(SHOW);
			setState(5016);
			match(PLUGINS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowPrivilegesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySQLStatementParser.PRIVILEGES, 0); }
		public ShowPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showPrivileges; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowPrivilegesContext showPrivileges() throws RecognitionException {
		ShowPrivilegesContext _localctx = new ShowPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_showPrivileges);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5018);
			match(SHOW);
			setState(5019);
			match(PRIVILEGES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProcedureCodeContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLStatementParser.PROCEDURE, 0); }
		public TerminalNode CODE() { return getToken(MySQLStatementParser.CODE, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public ShowProcedureCodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProcedureCode; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowProcedureCode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProcedureCodeContext showProcedureCode() throws RecognitionException {
		ShowProcedureCodeContext _localctx = new ShowProcedureCodeContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_showProcedureCode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5021);
			match(SHOW);
			setState(5022);
			match(PROCEDURE);
			setState(5023);
			match(CODE);
			setState(5024);
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProcedureStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLStatementParser.PROCEDURE, 0); }
		public TerminalNode STATUS() { return getToken(MySQLStatementParser.STATUS, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowProcedureStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProcedureStatus; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowProcedureStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProcedureStatusContext showProcedureStatus() throws RecognitionException {
		ShowProcedureStatusContext _localctx = new ShowProcedureStatusContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_showProcedureStatus);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5026);
			match(SHOW);
			setState(5027);
			match(PROCEDURE);
			setState(5028);
			match(STATUS);
			setState(5029);
			showFilter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProcesslistContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySQLStatementParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(MySQLStatementParser.FULL, 0); }
		public ShowProcesslistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProcesslist; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowProcesslist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProcesslistContext showProcesslist() throws RecognitionException {
		ShowProcesslistContext _localctx = new ShowProcesslistContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_showProcesslist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5031);
			match(SHOW);
			setState(5033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULL) {
				{
				setState(5032);
				match(FULL);
				}
			}

			setState(5035);
			match(PROCESSLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(MySQLStatementParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(MySQLStatementParser.QUERY, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public TerminalNode LIMIT() { return getToken(MySQLStatementParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(MySQLStatementParser.OFFSET, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public ShowProfileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfile; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileContext showProfile() throws RecognitionException {
		ShowProfileContext _localctx = new ShowProfileContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_showProfile);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5037);
			match(SHOW);
			setState(5038);
			match(PROFILE);
			setState(5047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==MEMORY || ((((_la - 491)) & ~0x3f) == 0 && ((1L << (_la - 491)) & ((1L << (BLOCK - 491)) | (1L << (CONTEXT - 491)) | (1L << (CPU - 491)) | (1L << (IPC - 491)) | (1L << (PAGE - 491)) | (1L << (SOURCE - 491)) | (1L << (SWAPS - 491)))) != 0)) {
				{
				setState(5039);
				showProfileType();
				setState(5044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5040);
					match(COMMA_);
					setState(5041);
					showProfileType();
					}
					}
					setState(5046);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5049);
				match(FOR);
				setState(5050);
				match(QUERY);
				setState(5051);
				match(NUMBER_);
				}
			}

			setState(5058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(5054);
				match(LIMIT);
				setState(5055);
				match(NUMBER_);
				{
				setState(5056);
				match(OFFSET);
				setState(5057);
				match(NUMBER_);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfilesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode PROFILES() { return getToken(MySQLStatementParser.PROFILES, 0); }
		public ShowProfilesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfiles; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowProfiles(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfilesContext showProfiles() throws RecognitionException {
		ShowProfilesContext _localctx = new ShowProfilesContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_showProfiles);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5060);
			match(SHOW);
			setState(5061);
			match(PROFILES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowRelaylogEventContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySQLStatementParser.RELAYLOG, 0); }
		public TerminalNode EVENTS() { return getToken(MySQLStatementParser.EVENTS, 0); }
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySQLStatementParser.CHANNEL, 0); }
		public ChannelNameContext channelName() {
			return getRuleContext(ChannelNameContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySQLStatementParser.LIMIT, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public LogNameContext logName() {
			return getRuleContext(LogNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public ShowRelaylogEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showRelaylogEvent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowRelaylogEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowRelaylogEventContext showRelaylogEvent() throws RecognitionException {
		ShowRelaylogEventContext _localctx = new ShowRelaylogEventContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_showRelaylogEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5063);
			match(SHOW);
			setState(5064);
			match(RELAYLOG);
			setState(5065);
			match(EVENTS);
			setState(5068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(5066);
				match(IN);
				setState(5067);
				logName();
				}
			}

			setState(5072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5070);
				match(FROM);
				setState(5071);
				match(NUMBER_);
				}
			}

			{
			setState(5074);
			match(LIMIT);
			setState(5077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
			case 1:
				{
				setState(5075);
				match(NUMBER_);
				setState(5076);
				match(COMMA_);
				}
				break;
			}
			setState(5079);
			match(NUMBER_);
			}
			setState(5081);
			match(FOR);
			setState(5082);
			match(CHANNEL);
			setState(5083);
			channelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSlavehostContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLStatementParser.SLAVE, 0); }
		public TerminalNode HOST() { return getToken(MySQLStatementParser.HOST, 0); }
		public ShowSlavehostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSlavehost; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowSlavehost(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSlavehostContext showSlavehost() throws RecognitionException {
		ShowSlavehostContext _localctx = new ShowSlavehostContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_showSlavehost);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5085);
			match(SHOW);
			setState(5086);
			match(SLAVE);
			setState(5087);
			match(HOST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSlaveStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLStatementParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(MySQLStatementParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySQLStatementParser.CHANNEL, 0); }
		public ChannelNameContext channelName() {
			return getRuleContext(ChannelNameContext.class,0);
		}
		public ShowSlaveStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSlaveStatus; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSlaveStatusContext showSlaveStatus() throws RecognitionException {
		ShowSlaveStatusContext _localctx = new ShowSlaveStatusContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_showSlaveStatus);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5089);
			match(SHOW);
			setState(5090);
			match(SLAVE);
			setState(5091);
			match(STATUS);
			{
			setState(5092);
			match(FOR);
			setState(5093);
			match(CHANNEL);
			setState(5094);
			channelName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode STATUS() { return getToken(MySQLStatementParser.STATUS, 0); }
		public TerminalNode GLOBAL() { return getToken(MySQLStatementParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySQLStatementParser.SESSION, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatus; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatusContext showStatus() throws RecognitionException {
		ShowStatusContext _localctx = new ShowStatusContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_showStatus);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5096);
			match(SHOW);
			setState(5097);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL || _la==SESSION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5098);
			match(STATUS);
			setState(5100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE || _la==LIKE) {
				{
				setState(5099);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowTrriggersContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode TRIGGER() { return getToken(MySQLStatementParser.TRIGGER, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowTrriggersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTrriggers; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowTrriggers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowTrriggersContext showTrriggers() throws RecognitionException {
		ShowTrriggersContext _localctx = new ShowTrriggersContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_showTrriggers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5102);
			match(SHOW);
			setState(5103);
			match(TRIGGER);
			setState(5105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(5104);
				fromSchema();
				}
			}

			setState(5108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE || _la==LIKE) {
				{
				setState(5107);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowVariablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode VARIABLES() { return getToken(MySQLStatementParser.VARIABLES, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(MySQLStatementParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySQLStatementParser.SESSION, 0); }
		public ShowVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showVariables; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowVariablesContext showVariables() throws RecognitionException {
		ShowVariablesContext _localctx = new ShowVariablesContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_showVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5110);
			match(SHOW);
			setState(5112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(5111);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5114);
			match(VARIABLES);
			setState(5115);
			showFilter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowWarningsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(MySQLStatementParser.SHOW, 0); }
		public TerminalNode WARNINGS() { return getToken(MySQLStatementParser.WARNINGS, 0); }
		public TerminalNode COUNT() { return getToken(MySQLStatementParser.COUNT, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public TerminalNode ASTERISK_() { return getToken(MySQLStatementParser.ASTERISK_, 0); }
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public TerminalNode LIMIT() { return getToken(MySQLStatementParser.LIMIT, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public ShowWarningsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showWarnings; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShowWarnings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowWarningsContext showWarnings() throws RecognitionException {
		ShowWarningsContext _localctx = new ShowWarningsContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_showWarnings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5117);
			match(SHOW);
			setState(5132);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WARNINGS:
				{
				{
				setState(5118);
				match(WARNINGS);
				setState(5125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5119);
					match(LIMIT);
					setState(5122);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
					case 1:
						{
						setState(5120);
						match(NUMBER_);
						setState(5121);
						match(COMMA_);
						}
						break;
					}
					setState(5124);
					match(NUMBER_);
					}
				}

				}
				}
				break;
			case COUNT:
				{
				{
				setState(5127);
				match(COUNT);
				setState(5128);
				match(LP_);
				setState(5129);
				match(ASTERISK_);
				setState(5130);
				match(RP_);
				setState(5131);
				match(WARNINGS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetCharacterContext extends ParserRuleContext {
		public List<TerminalNode> SET() { return getTokens(MySQLStatementParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySQLStatementParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySQLStatementParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(MySQLStatementParser.CHARSET, 0); }
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public SetCharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setCharacter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSetCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetCharacterContext setCharacter() throws RecognitionException {
		SetCharacterContext _localctx = new SetCharacterContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_setCharacter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5134);
			match(SET);
			setState(5138);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				{
				setState(5135);
				match(CHARACTER);
				setState(5136);
				match(SET);
				}
				break;
			case CHARSET:
				{
				setState(5137);
				match(CHARSET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_:
				{
				setState(5140);
				characterSetName_();
				}
				break;
			case DEFAULT:
				{
				setState(5141);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetNameContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(MySQLStatementParser.NAMES, 0); }
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySQLStatementParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySQLStatementParser.COLLATE, 0); }
		public CollationName_Context collationName_() {
			return getRuleContext(CollationName_Context.class,0);
		}
		public SetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetNameContext setName() throws RecognitionException {
		SetNameContext _localctx = new SetNameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_setName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5144);
			match(SET);
			setState(5145);
			match(NAMES);
			setState(5152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_:
				{
				setState(5146);
				characterSetName_();
				setState(5149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(5147);
					match(COLLATE);
					setState(5148);
					collationName_();
					}
				}

				}
				break;
			case DEFAULT:
				{
				setState(5151);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneContext extends ParserRuleContext {
		public TerminalNode CLONE() { return getToken(MySQLStatementParser.CLONE, 0); }
		public CloneAction_Context cloneAction_() {
			return getRuleContext(CloneAction_Context.class,0);
		}
		public CloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clone; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitClone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneContext clone() throws RecognitionException {
		CloneContext _localctx = new CloneContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_clone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5154);
			match(CLONE);
			setState(5155);
			cloneAction_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneAction_Context extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(MySQLStatementParser.LOCAL, 0); }
		public TerminalNode DATA() { return getToken(MySQLStatementParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySQLStatementParser.DIRECTORY, 0); }
		public CloneDirContext cloneDir() {
			return getRuleContext(CloneDirContext.class,0);
		}
		public TerminalNode SEMI_() { return getToken(MySQLStatementParser.SEMI_, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public TerminalNode INSTANCE() { return getToken(MySQLStatementParser.INSTANCE, 0); }
		public TerminalNode FROM() { return getToken(MySQLStatementParser.FROM, 0); }
		public CloneInstanceContext cloneInstance() {
			return getRuleContext(CloneInstanceContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySQLStatementParser.BY, 0); }
		public TerminalNode STRING_() { return getToken(MySQLStatementParser.STRING_, 0); }
		public TerminalNode REQUIRE() { return getToken(MySQLStatementParser.REQUIRE, 0); }
		public TerminalNode SSL() { return getToken(MySQLStatementParser.SSL, 0); }
		public TerminalNode NO() { return getToken(MySQLStatementParser.NO, 0); }
		public CloneAction_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneAction_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCloneAction_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneAction_Context cloneAction_() throws RecognitionException {
		CloneAction_Context _localctx = new CloneAction_Context(_ctx, getState());
		enterRule(_localctx, 698, RULE_cloneAction_);
		int _la;
		try {
			setState(5185);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5157);
				match(LOCAL);
				setState(5158);
				match(DATA);
				setState(5159);
				match(DIRECTORY);
				setState(5161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(5160);
					match(EQ_);
					}
				}

				setState(5163);
				cloneDir();
				setState(5164);
				match(SEMI_);
				}
				break;
			case INSTANCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5166);
				match(INSTANCE);
				setState(5167);
				match(FROM);
				setState(5168);
				cloneInstance();
				setState(5169);
				match(IDENTIFIED);
				setState(5170);
				match(BY);
				setState(5171);
				match(STRING_);
				setState(5176);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA) {
					{
					setState(5172);
					match(DATA);
					setState(5173);
					match(DIRECTORY);
					setState(5174);
					match(EQ_);
					setState(5175);
					cloneDir();
					}
				}

				setState(5183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(5178);
					match(REQUIRE);
					setState(5180);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(5179);
						match(NO);
						}
					}

					setState(5182);
					match(SSL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySQLStatementParser.AGGREGATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLStatementParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(MySQLStatementParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(MySQLStatementParser.SONAME, 0); }
		public ShardLibraryNameContext shardLibraryName() {
			return getRuleContext(ShardLibraryNameContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MySQLStatementParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(MySQLStatementParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(MySQLStatementParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MySQLStatementParser.DECIMAL, 0); }
		public CreateUdfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdf; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateUdf(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfContext createUdf() throws RecognitionException {
		CreateUdfContext _localctx = new CreateUdfContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_createUdf);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5187);
			match(CREATE);
			setState(5188);
			match(AGGREGATE);
			setState(5189);
			match(FUNCTION);
			setState(5190);
			functionName();
			setState(5191);
			match(RETURNS);
			setState(5192);
			_la = _input.LA(1);
			if ( !(((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (INTEGER - 168)) | (1L << (REAL - 168)) | (1L << (DECIMAL - 168)))) != 0) || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5193);
			match(SONAME);
			setState(5194);
			shardLibraryName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallComponentContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(MySQLStatementParser.INSTALL, 0); }
		public TerminalNode COMPONENT() { return getToken(MySQLStatementParser.COMPONENT, 0); }
		public List<ComponentNameContext> componentName() {
			return getRuleContexts(ComponentNameContext.class);
		}
		public ComponentNameContext componentName(int i) {
			return getRuleContext(ComponentNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public InstallComponentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installComponent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitInstallComponent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallComponentContext installComponent() throws RecognitionException {
		InstallComponentContext _localctx = new InstallComponentContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_installComponent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5196);
			match(INSTALL);
			setState(5197);
			match(COMPONENT);
			setState(5198);
			componentName();
			setState(5203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5199);
				match(COMMA_);
				setState(5200);
				componentName();
				}
				}
				setState(5205);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(MySQLStatementParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySQLStatementParser.PLUGIN, 0); }
		public PluginNameContext pluginName() {
			return getRuleContext(PluginNameContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(MySQLStatementParser.SONAME, 0); }
		public ShardLibraryNameContext shardLibraryName() {
			return getRuleContext(ShardLibraryNameContext.class,0);
		}
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5206);
			match(INSTALL);
			setState(5207);
			match(PLUGIN);
			setState(5208);
			pluginName();
			setState(5209);
			match(SONAME);
			setState(5210);
			shardLibraryName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallComponentContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(MySQLStatementParser.UNINSTALL, 0); }
		public TerminalNode COMPONENT() { return getToken(MySQLStatementParser.COMPONENT, 0); }
		public List<ComponentNameContext> componentName() {
			return getRuleContexts(ComponentNameContext.class);
		}
		public ComponentNameContext componentName(int i) {
			return getRuleContext(ComponentNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public UninstallComponentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallComponent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUninstallComponent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallComponentContext uninstallComponent() throws RecognitionException {
		UninstallComponentContext _localctx = new UninstallComponentContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_uninstallComponent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5212);
			match(UNINSTALL);
			setState(5213);
			match(COMPONENT);
			setState(5214);
			componentName();
			setState(5219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5215);
				match(COMMA_);
				setState(5216);
				componentName();
				}
				}
				setState(5221);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(MySQLStatementParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySQLStatementParser.PLUGIN, 0); }
		public PluginNameContext pluginName() {
			return getRuleContext(PluginNameContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5222);
			match(UNINSTALL);
			setState(5223);
			match(PLUGIN);
			setState(5224);
			pluginName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(MySQLStatementParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(MySQLStatementParser.UPDATE, 0); }
		public TerminalNode HISTOGRAM() { return getToken(MySQLStatementParser.HISTOGRAM, 0); }
		public TerminalNode ON() { return getToken(MySQLStatementParser.ON, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLStatementParser.LOCAL, 0); }
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode BUCKETS() { return getToken(MySQLStatementParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5226);
			match(ANALYZE);
			setState(5228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==NO_WRITE_TO_BINLOG) {
				{
				setState(5227);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==NO_WRITE_TO_BINLOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5230);
			match(TABLE);
			setState(5247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				{
				setState(5231);
				tableNames();
				}
				break;
			case 2:
				{
				setState(5232);
				tableName();
				setState(5233);
				match(UPDATE);
				setState(5234);
				match(HISTOGRAM);
				setState(5235);
				match(ON);
				setState(5236);
				columnNames();
				{
				setState(5237);
				match(WITH);
				setState(5238);
				match(NUMBER_);
				setState(5239);
				match(BUCKETS);
				}
				}
				break;
			case 3:
				{
				setState(5241);
				tableName();
				setState(5242);
				match(DROP);
				setState(5243);
				match(HISTOGRAM);
				setState(5244);
				match(ON);
				setState(5245);
				columnNames();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(MySQLStatementParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public CheckTableOption_Context checkTableOption_() {
			return getRuleContext(CheckTableOption_Context.class,0);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_checkTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5249);
			match(CHECK);
			setState(5250);
			match(TABLE);
			setState(5251);
			tableNames();
			setState(5252);
			checkTableOption_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOption_Context extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(MySQLStatementParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(MySQLStatementParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(MySQLStatementParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(MySQLStatementParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLStatementParser.EXTENDED, 0); }
		public TerminalNode CHANGE() { return getToken(MySQLStatementParser.CHANGE, 0); }
		public CheckTableOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCheckTableOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOption_Context checkTableOption_() throws RecognitionException {
		CheckTableOption_Context _localctx = new CheckTableOption_Context(_ctx, getState());
		enterRule(_localctx, 714, RULE_checkTableOption_);
		try {
			setState(5261);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5254);
				match(FOR);
				setState(5255);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5256);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(5257);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(5258);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5259);
				match(EXTENDED);
				}
				break;
			case CHANGE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5260);
				match(CHANGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public TerminalNode CHECKSUM() { return getToken(MySQLStatementParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySQLStatementParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLStatementParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5263);
			match(CHECKSUM);
			setState(5264);
			match(TABLE);
			setState(5265);
			tableNames();
			setState(5266);
			_la = _input.LA(1);
			if ( !(_la==QUICK || _la==EXTENDED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public TerminalNode OPTIMIZE() { return getToken(MySQLStatementParser.OPTIMIZE, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLStatementParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5268);
			match(OPTIMIZE);
			setState(5270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==NO_WRITE_TO_BINLOG) {
				{
				setState(5269);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==NO_WRITE_TO_BINLOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5272);
			match(TABLE);
			setState(5273);
			tableNames();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public TerminalNode REPAIR() { return getToken(MySQLStatementParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(MySQLStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySQLStatementParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLStatementParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(MySQLStatementParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLStatementParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5275);
			match(REPAIR);
			setState(5277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==NO_WRITE_TO_BINLOG) {
				{
				setState(5276);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==NO_WRITE_TO_BINLOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5279);
			match(TABLE);
			setState(5280);
			tableNames();
			setState(5282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(5281);
				match(QUICK);
				}
			}

			setState(5285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(5284);
				match(EXTENDED);
				}
			}

			setState(5288);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(5287);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterResourceGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLStatementParser.ALTER, 0); }
		public TerminalNode RESOURCE() { return getToken(MySQLStatementParser.RESOURCE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLStatementParser.GROUP, 0); }
		public GroupNameContext groupName() {
			return getRuleContext(GroupNameContext.class,0);
		}
		public TerminalNode VCPU() { return getToken(MySQLStatementParser.VCPU, 0); }
		public List<VcpuSpec_Context> vcpuSpec_() {
			return getRuleContexts(VcpuSpec_Context.class);
		}
		public VcpuSpec_Context vcpuSpec_(int i) {
			return getRuleContext(VcpuSpec_Context.class,i);
		}
		public TerminalNode THREAD_PRIORITY() { return getToken(MySQLStatementParser.THREAD_PRIORITY, 0); }
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode ENABLE() { return getToken(MySQLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySQLStatementParser.DISABLE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode FORCE() { return getToken(MySQLStatementParser.FORCE, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterResourceGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitAlterResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterResourceGroupContext alterResourceGroup() throws RecognitionException {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_alterResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5290);
			match(ALTER);
			setState(5291);
			match(RESOURCE);
			setState(5292);
			match(GROUP);
			setState(5293);
			groupName();
			setState(5306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU) {
				{
				setState(5294);
				match(VCPU);
				setState(5296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(5295);
					match(EQ_);
					}
				}

				setState(5298);
				vcpuSpec_();
				setState(5303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5299);
					match(COMMA_);
					setState(5300);
					vcpuSpec_();
					}
					}
					setState(5305);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY) {
				{
				setState(5308);
				match(THREAD_PRIORITY);
				setState(5310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(5309);
					match(EQ_);
					}
				}

				setState(5312);
				match(NUMBER_);
				}
			}

			setState(5320);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
				{
				setState(5315);
				match(ENABLE);
				}
				break;
			case DISABLE:
				{
				setState(5316);
				match(DISABLE);
				setState(5318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(5317);
					match(FORCE);
					}
				}

				}
				break;
			case EOF:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VcpuSpec_Context extends ParserRuleContext {
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public TerminalNode MINUS_() { return getToken(MySQLStatementParser.MINUS_, 0); }
		public VcpuSpec_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vcpuSpec_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitVcpuSpec_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VcpuSpec_Context vcpuSpec_() throws RecognitionException {
		VcpuSpec_Context _localctx = new VcpuSpec_Context(_ctx, getState());
		enterRule(_localctx, 724, RULE_vcpuSpec_);
		try {
			setState(5326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5322);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5323);
				match(NUMBER_);
				setState(5324);
				match(MINUS_);
				setState(5325);
				match(NUMBER_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateResourceGroupContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLStatementParser.CREATE, 0); }
		public TerminalNode RESOURCE() { return getToken(MySQLStatementParser.RESOURCE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLStatementParser.GROUP, 0); }
		public GroupNameContext groupName() {
			return getRuleContext(GroupNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(MySQLStatementParser.TYPE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public TerminalNode SYSTEM() { return getToken(MySQLStatementParser.SYSTEM, 0); }
		public TerminalNode USER() { return getToken(MySQLStatementParser.USER, 0); }
		public TerminalNode VCPU() { return getToken(MySQLStatementParser.VCPU, 0); }
		public List<VcpuSpec_Context> vcpuSpec_() {
			return getRuleContexts(VcpuSpec_Context.class);
		}
		public VcpuSpec_Context vcpuSpec_(int i) {
			return getRuleContext(VcpuSpec_Context.class,i);
		}
		public TerminalNode THREAD_PRIORITY() { return getToken(MySQLStatementParser.THREAD_PRIORITY, 0); }
		public TerminalNode NUMBER_() { return getToken(MySQLStatementParser.NUMBER_, 0); }
		public TerminalNode ENABLE() { return getToken(MySQLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySQLStatementParser.DISABLE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createResourceGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCreateResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateResourceGroupContext createResourceGroup() throws RecognitionException {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_createResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5328);
			match(CREATE);
			setState(5329);
			match(RESOURCE);
			setState(5330);
			match(GROUP);
			setState(5331);
			groupName();
			setState(5332);
			match(TYPE);
			setState(5333);
			match(EQ_);
			setState(5334);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU) {
				{
				setState(5335);
				match(VCPU);
				setState(5337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(5336);
					match(EQ_);
					}
				}

				setState(5339);
				vcpuSpec_();
				setState(5344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5340);
					match(COMMA_);
					setState(5341);
					vcpuSpec_();
					}
					}
					setState(5346);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY) {
				{
				setState(5349);
				match(THREAD_PRIORITY);
				setState(5351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(5350);
					match(EQ_);
					}
				}

				setState(5353);
				match(NUMBER_);
				}
			}

			setState(5357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENABLE || _la==DISABLE) {
				{
				setState(5356);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropResourceGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLStatementParser.DROP, 0); }
		public TerminalNode RESOURCE() { return getToken(MySQLStatementParser.RESOURCE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLStatementParser.GROUP, 0); }
		public GroupNameContext groupName() {
			return getRuleContext(GroupNameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(MySQLStatementParser.FORCE, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropResourceGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitDropResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropResourceGroupContext dropResourceGroup() throws RecognitionException {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_dropResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5359);
			match(DROP);
			setState(5360);
			match(RESOURCE);
			setState(5361);
			match(GROUP);
			setState(5362);
			groupName();
			setState(5364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(5363);
				match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResourceGroupContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLStatementParser.SET, 0); }
		public TerminalNode RESOURCE() { return getToken(MySQLStatementParser.RESOURCE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLStatementParser.GROUP, 0); }
		public GroupNameContext groupName() {
			return getRuleContext(GroupNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResourceGroup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitSetResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResourceGroupContext setResourceGroup() throws RecognitionException {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_setResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5366);
			match(SET);
			setState(5367);
			match(RESOURCE);
			setState(5368);
			match(GROUP);
			setState(5369);
			groupName();
			setState(5379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5370);
				match(FOR);
				setState(5371);
				match(NUMBER_);
				setState(5376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5372);
					match(COMMA_);
					setState(5373);
					match(NUMBER_);
					}
					}
					setState(5378);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(MySQLStatementParser.BINLOG, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public BinlogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlog; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitBinlog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogContext binlog() throws RecognitionException {
		BinlogContext _localctx = new BinlogContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_binlog);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5381);
			match(BINLOG);
			setState(5382);
			stringLiterals();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexContext extends ParserRuleContext {
		public TerminalNode CACHE() { return getToken(MySQLStatementParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode IN() { return getToken(MySQLStatementParser.IN, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public List<TableIndexListContext> tableIndexList() {
			return getRuleContexts(TableIndexListContext.class);
		}
		public TableIndexListContext tableIndexList(int i) {
			return getRuleContext(TableIndexListContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySQLStatementParser.PARTITION, 0); }
		public TerminalNode LP_() { return getToken(MySQLStatementParser.LP_, 0); }
		public PartitionListContext partitionList() {
			return getRuleContext(PartitionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(MySQLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public CacheIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndex; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitCacheIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexContext cacheIndex() throws RecognitionException {
		CacheIndexContext _localctx = new CacheIndexContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_cacheIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5384);
			match(CACHE);
			setState(5385);
			match(INDEX);
			setState(5400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(5386);
				tableIndexList();
				setState(5391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5387);
					match(COMMA_);
					setState(5388);
					tableIndexList();
					}
					}
					setState(5393);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(5394);
				tableName();
				setState(5395);
				match(PARTITION);
				setState(5396);
				match(LP_);
				setState(5397);
				partitionList();
				setState(5398);
				match(RP_);
				}
				break;
			}
			setState(5402);
			match(IN);
			setState(5403);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexListContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySQLStatementParser.PARTITION, 0); }
		public List<TerminalNode> LP_() { return getTokens(MySQLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(MySQLStatementParser.LP_, i);
		}
		public PartitionListContext partitionList() {
			return getRuleContext(PartitionListContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(MySQLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(MySQLStatementParser.RP_, i);
		}
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySQLStatementParser.KEY, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TableIndexListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTableIndexList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexListContext tableIndexList() throws RecognitionException {
		TableIndexListContext _localctx = new TableIndexListContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_tableIndexList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5405);
			tableName();
			setState(5411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5406);
				match(PARTITION);
				setState(5407);
				match(LP_);
				setState(5408);
				partitionList();
				setState(5409);
				match(RP_);
				}
			}

			setState(5425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY) {
				{
				setState(5413);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5414);
				match(LP_);
				setState(5415);
				indexName();
				setState(5420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5416);
					match(COMMA_);
					setState(5417);
					indexName();
					}
					}
					setState(5422);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5423);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionListContext extends ParserRuleContext {
		public List<PartitionNameContext> partitionName() {
			return getRuleContexts(PartitionNameContext.class);
		}
		public PartitionNameContext partitionName(int i) {
			return getRuleContext(PartitionNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode ALL() { return getToken(MySQLStatementParser.ALL, 0); }
		public PartitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionList; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitPartitionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionListContext partitionList() throws RecognitionException {
		PartitionListContext _localctx = new PartitionListContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_partitionList);
		int _la;
		try {
			setState(5436);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5427);
				partitionName();
				setState(5432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5428);
					match(COMMA_);
					setState(5429);
					partitionName();
					}
					}
					setState(5434);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5435);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushContext extends ParserRuleContext {
		public TerminalNode FLUSH() { return getToken(MySQLStatementParser.FLUSH, 0); }
		public List<FlushOption_Context> flushOption_() {
			return getRuleContexts(FlushOption_Context.class);
		}
		public FlushOption_Context flushOption_(int i) {
			return getRuleContext(FlushOption_Context.class,i);
		}
		public TablesOption_Context tablesOption_() {
			return getRuleContext(TablesOption_Context.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLStatementParser.LOCAL, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public FlushContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flush; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFlush(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushContext flush() throws RecognitionException {
		FlushContext _localctx = new FlushContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_flush);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5438);
			match(FLUSH);
			setState(5440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==NO_WRITE_TO_BINLOG) {
				{
				setState(5439);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==NO_WRITE_TO_BINLOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5451);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STATUS:
			case BINARY:
			case PRIVILEGES:
			case ENGINE:
			case ERROR:
			case LOGS:
			case GENERAL:
			case OPTIMIZER_COSTS:
			case SLOW:
			case USER_RESOURCES:
			case RELAY:
			case HOSTS:
				{
				setState(5442);
				flushOption_();
				setState(5447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5443);
					match(COMMA_);
					setState(5444);
					flushOption_();
					}
					}
					setState(5449);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case TABLES:
				{
				setState(5450);
				tablesOption_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOption_Context extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySQLStatementParser.BINARY, 0); }
		public TerminalNode LOGS() { return getToken(MySQLStatementParser.LOGS, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLStatementParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(MySQLStatementParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(MySQLStatementParser.GENERAL, 0); }
		public TerminalNode HOSTS() { return getToken(MySQLStatementParser.HOSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySQLStatementParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode RELAY() { return getToken(MySQLStatementParser.RELAY, 0); }
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySQLStatementParser.CHANNEL, 0); }
		public ChannelNameContext channelName() {
			return getRuleContext(ChannelNameContext.class,0);
		}
		public TerminalNode SLOW() { return getToken(MySQLStatementParser.SLOW, 0); }
		public TerminalNode STATUS() { return getToken(MySQLStatementParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySQLStatementParser.USER_RESOURCES, 0); }
		public FlushOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitFlushOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOption_Context flushOption_() throws RecognitionException {
		FlushOption_Context _localctx = new FlushOption_Context(_ctx, getState());
		enterRule(_localctx, 742, RULE_flushOption_);
		int _la;
		try {
			setState(5476);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5453);
				match(BINARY);
				setState(5454);
				match(LOGS);
				}
				break;
			case ENGINE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5455);
				match(ENGINE);
				setState(5456);
				match(LOGS);
				}
				break;
			case ERROR:
				enterOuterAlt(_localctx, 3);
				{
				setState(5457);
				match(ERROR);
				setState(5458);
				match(LOGS);
				}
				break;
			case GENERAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5459);
				match(GENERAL);
				setState(5460);
				match(LOGS);
				}
				break;
			case HOSTS:
				enterOuterAlt(_localctx, 5);
				{
				setState(5461);
				match(HOSTS);
				}
				break;
			case LOGS:
				enterOuterAlt(_localctx, 6);
				{
				setState(5462);
				match(LOGS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5463);
				match(PRIVILEGES);
				}
				break;
			case OPTIMIZER_COSTS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5464);
				match(OPTIMIZER_COSTS);
				}
				break;
			case RELAY:
				enterOuterAlt(_localctx, 9);
				{
				setState(5465);
				match(RELAY);
				setState(5466);
				match(LOGS);
				setState(5470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5467);
					match(FOR);
					setState(5468);
					match(CHANNEL);
					setState(5469);
					channelName();
					}
				}

				}
				break;
			case SLOW:
				enterOuterAlt(_localctx, 10);
				{
				setState(5472);
				match(SLOW);
				setState(5473);
				match(LOGS);
				}
				break;
			case STATUS:
				enterOuterAlt(_localctx, 11);
				{
				setState(5474);
				match(STATUS);
				}
				break;
			case USER_RESOURCES:
				enterOuterAlt(_localctx, 12);
				{
				setState(5475);
				match(USER_RESOURCES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesOption_Context extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySQLStatementParser.TABLES, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public TerminalNode WITH() { return getToken(MySQLStatementParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySQLStatementParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySQLStatementParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(MySQLStatementParser.EXPORT, 0); }
		public TablesOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitTablesOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesOption_Context tablesOption_() throws RecognitionException {
		TablesOption_Context _localctx = new TablesOption_Context(_ctx, getState());
		enterRule(_localctx, 744, RULE_tablesOption_);
		int _la;
		try {
			setState(5517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5478);
				match(TABLES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5479);
				match(TABLES);
				setState(5480);
				tableName();
				setState(5485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5481);
					match(COMMA_);
					setState(5482);
					tableName();
					}
					}
					setState(5487);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5488);
				match(TABLES);
				setState(5489);
				match(WITH);
				setState(5490);
				match(READ);
				setState(5491);
				match(LOCK);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5492);
				match(TABLES);
				setState(5493);
				tableName();
				setState(5498);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5494);
					match(COMMA_);
					setState(5495);
					tableName();
					}
					}
					setState(5500);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5501);
				match(WITH);
				setState(5502);
				match(READ);
				setState(5503);
				match(LOCK);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5505);
				match(TABLES);
				setState(5506);
				tableName();
				setState(5511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(5507);
					match(COMMA_);
					setState(5508);
					tableName();
					}
					}
					setState(5513);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5514);
				match(FOR);
				setState(5515);
				match(EXPORT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillContext extends ParserRuleContext {
		public TerminalNode KILL() { return getToken(MySQLStatementParser.KILL, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(MySQLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(MySQLStatementParser.NUMBER_, i);
		}
		public TerminalNode CONNECTION() { return getToken(MySQLStatementParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(MySQLStatementParser.QUERY, 0); }
		public KillContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitKill(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillContext kill() throws RecognitionException {
		KillContext _localctx = new KillContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_kill);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5519);
			match(KILL);
			setState(5521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(5520);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5524); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5523);
				match(NUMBER_);
				}
				}
				setState(5526); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NUMBER_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexInfoContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(MySQLStatementParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(MySQLStatementParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(MySQLStatementParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(MySQLStatementParser.CACHE, 0); }
		public List<TableIndexListContext> tableIndexList() {
			return getRuleContexts(TableIndexListContext.class);
		}
		public TableIndexListContext tableIndexList(int i) {
			return getRuleContext(TableIndexListContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public LoadIndexInfoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexInfo; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitLoadIndexInfo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexInfoContext loadIndexInfo() throws RecognitionException {
		LoadIndexInfoContext _localctx = new LoadIndexInfoContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_loadIndexInfo);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5528);
			match(LOAD);
			setState(5529);
			match(INDEX);
			setState(5530);
			match(INTO);
			setState(5531);
			match(CACHE);
			setState(5532);
			tableIndexList();
			setState(5537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5533);
				match(COMMA_);
				setState(5534);
				tableIndexList();
				}
				}
				setState(5539);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySQLStatementParser.RESET, 0); }
		public List<ResetOption_Context> resetOption_() {
			return getRuleContexts(ResetOption_Context.class);
		}
		public ResetOption_Context resetOption_(int i) {
			return getRuleContext(ResetOption_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(MySQLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(MySQLStatementParser.COMMA_, i);
		}
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_resetStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5540);
			match(RESET);
			setState(5541);
			resetOption_();
			setState(5546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5542);
				match(COMMA_);
				setState(5543);
				resetOption_();
				}
				}
				setState(5548);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetOption_Context extends ParserRuleContext {
		public TerminalNode MASTER() { return getToken(MySQLStatementParser.MASTER, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLStatementParser.SLAVE, 0); }
		public TerminalNode QUERY() { return getToken(MySQLStatementParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySQLStatementParser.CACHE, 0); }
		public ResetOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitResetOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetOption_Context resetOption_() throws RecognitionException {
		ResetOption_Context _localctx = new ResetOption_Context(_ctx, getState());
		enterRule(_localctx, 752, RULE_resetOption_);
		try {
			setState(5553);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5549);
				match(MASTER);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5550);
				match(SLAVE);
				}
				break;
			case QUERY:
				enterOuterAlt(_localctx, 3);
				{
				setState(5551);
				match(QUERY);
				setState(5552);
				match(CACHE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetPersistContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySQLStatementParser.RESET, 0); }
		public TerminalNode PERSIST() { return getToken(MySQLStatementParser.PERSIST, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(MySQLStatementParser.IDENTIFIER_, 0); }
		public TerminalNode IF() { return getToken(MySQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLStatementParser.EXISTS, 0); }
		public ResetPersistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetPersist; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitResetPersist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetPersistContext resetPersist() throws RecognitionException {
		ResetPersistContext _localctx = new ResetPersistContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_resetPersist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5555);
			match(RESET);
			setState(5556);
			match(PERSIST);
			{
			setState(5559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5557);
				match(IF);
				setState(5558);
				match(EXISTS);
				}
			}

			setState(5561);
			match(IDENTIFIER_);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(MySQLStatementParser.RESTART, 0); }
		public RestartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restart; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitRestart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestartContext restart() throws RecognitionException {
		RestartContext _localctx = new RestartContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_restart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5563);
			match(RESTART);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(MySQLStatementParser.SHUTDOWN, 0); }
		public ShutdownContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdown; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitShutdown(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownContext shutdown() throws RecognitionException {
		ShutdownContext _localctx = new ShutdownContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_shutdown);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5565);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterToContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySQLStatementParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(MySQLStatementParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySQLStatementParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySQLStatementParser.CHANNEL, 0); }
		public List<IgnoredIdentifiers_Context> ignoredIdentifiers_() {
			return getRuleContexts(IgnoredIdentifiers_Context.class);
		}
		public IgnoredIdentifiers_Context ignoredIdentifiers_(int i) {
			return getRuleContext(IgnoredIdentifiers_Context.class,i);
		}
		public ChangeMasterToContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMasterTo; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitChangeMasterTo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterToContext changeMasterTo() throws RecognitionException {
		ChangeMasterToContext _localctx = new ChangeMasterToContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_changeMasterTo);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5567);
			match(CHANGE);
			setState(5568);
			match(MASTER);
			setState(5569);
			match(TO);
			setState(5576); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5570);
				identifier();
				setState(5571);
				match(EQ_);
				setState(5574);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
				case 1:
					{
					setState(5572);
					identifier();
					}
					break;
				case 2:
					{
					setState(5573);
					ignoredIdentifiers_();
					}
					break;
				}
				}
				}
				setState(5578); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (TRUNCATE - 51)) | (1L << (POSITION - 51)) | (1L << (VIEW - 51)) | (1L << (ANY - 51)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (OFFSET - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (BOOLEAN - 119)) | (1L << (DATE - 119)) | (1L << (TIME - 119)) | (1L << (TIMESTAMP - 119)) | (1L << (YEAR - 119)) | (1L << (QUARTER - 119)) | (1L << (MONTH - 119)) | (1L << (WEEK - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (MICROSECOND - 119)) | (1L << (MAX - 119)) | (1L << (MIN - 119)) | (1L << (SUM - 119)) | (1L << (COUNT - 119)) | (1L << (AVG - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (INSTANCE - 119)) | (1L << (DO - 119)) | (1L << (DEFINER - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (OPEN - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (TYPE - 119)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (TABLES - 187)) | (1L << (TABLESPACE - 187)) | (1L << (COLUMNS - 187)) | (1L << (FIELDS - 187)) | (1L << (INDEXES - 187)) | (1L << (STATUS - 187)) | (1L << (MODIFY - 187)) | (1L << (VALUE - 187)) | (1L << (DUPLICATE - 187)) | (1L << (FIRST - 187)) | (1L << (LAST - 187)) | (1L << (AFTER - 187)) | (1L << (OJ - 187)) | (1L << (ACCOUNT - 187)) | (1L << (USER - 187)) | (1L << (ROLE - 187)) | (1L << (START - 187)) | (1L << (TRANSACTION - 187)) | (1L << (WITHOUT - 187)) | (1L << (ESCAPE - 187)) | (1L << (SUBPARTITION - 187)) | (1L << (STORAGE - 187)) | (1L << (SUPER - 187)) | (1L << (TEMPORARY - 187)) | (1L << (THAN - 187)) | (1L << (UNBOUNDED - 187)) | (1L << (SIGNED - 187)) | (1L << (UPGRADE - 187)) | (1L << (VALIDATION - 187)) | (1L << (ROLLUP - 187)) | (1L << (SOUNDS - 187)) | (1L << (UNKNOWN - 187)) | (1L << (OFF - 187)) | (1L << (ALWAYS - 187)) | (1L << (COMMITTED - 187)) | (1L << (LEVEL - 187)) | (1L << (NO - 187)) | (1L << (PASSWORD - 187)) | (1L << (PRIVILEGES - 187)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACTION - 252)) | (1L << (ALGORITHM - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (BTREE - 252)) | (1L << (CHAIN - 252)) | (1L << (CHARSET - 252)) | (1L << (CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (COALESCE - 252)) | (1L << (COMMENT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (DATA - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (ENCRYPTION - 252)) | (1L << (END - 252)) | (1L << (ENGINE - 252)) | (1L << (EVENT - 252)) | (1L << (EXCHANGE - 252)) | (1L << (EXECUTE - 252)) | (1L << (FILE - 252)) | (1L << (FIXED - 252)) | (1L << (FOLLOWING - 252)) | (1L << (GLOBAL - 252)) | (1L << (HASH - 252)) | (1L << (IMPORT_ - 252)) | (1L << (LESS - 252)) | (1L << (MEMORY - 252)) | (1L << (NONE - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (PARTITIONING - 316)) | (1L << (PERSIST - 316)) | (1L << (PRECEDING - 316)) | (1L << (PROCESS - 316)) | (1L << (PROXY - 316)) | (1L << (QUICK - 316)) | (1L << (REBUILD - 316)) | (1L << (REDUNDANT - 316)) | (1L << (RELOAD - 316)) | (1L << (REMOVE - 316)) | (1L << (REORGANIZE - 316)) | (1L << (REPAIR - 316)) | (1L << (REVERSE - 316)) | (1L << (SESSION - 316)) | (1L << (SHUTDOWN - 316)) | (1L << (SIMPLE - 316)) | (1L << (SLAVE - 316)) | (1L << (VISIBLE - 316)) | (1L << (INVISIBLE - 316)) | (1L << (ENFORCED - 316)) | (1L << (AGAINST - 316)) | (1L << (LANGUAGE - 316)) | (1L << (MODE - 316)) | (1L << (QUERY - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXPANSION - 316)) | (1L << (VARIANCE - 316)) | (1L << (MAX_ROWS - 316)) | (1L << (MIN_ROWS - 316)) | (1L << (SQL_BIG_RESULT - 316)) | (1L << (SQL_BUFFER_RESULT - 316)) | (1L << (SQL_CACHE - 316)) | (1L << (SQL_NO_CACHE - 316)) | (1L << (STATS_AUTO_RECALC - 316)) | (1L << (STATS_PERSISTENT - 316)) | (1L << (STATS_SAMPLE_PAGES - 316)) | (1L << (ROW_FORMAT - 316)) | (1L << (WEIGHT_STRING - 316)) | (1L << (COLUMN_FORMAT - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PERSIST_ONLY - 380)) | (1L << (BIT_AND - 380)) | (1L << (BIT_OR - 380)) | (1L << (BIT_XOR - 380)) | (1L << (GROUP_CONCAT - 380)) | (1L << (JSON_ARRAYAGG - 380)) | (1L << (JSON_OBJECTAGG - 380)) | (1L << (STD - 380)) | (1L << (STDDEV - 380)) | (1L << (STDDEV_POP - 380)) | (1L << (STDDEV_SAMP - 380)) | (1L << (VAR_POP - 380)) | (1L << (VAR_SAMP - 380)) | (1L << (AUTO_INCREMENT - 380)) | (1L << (AVG_ROW_LENGTH - 380)) | (1L << (DELAY_KEY_WRITE - 380)) | (1L << (ROTATE - 380)) | (1L << (MASTER - 380)) | (1L << (BINLOG - 380)) | (1L << (ERROR - 380)) | (1L << (SCHEDULE - 380)) | (1L << (COMPLETION - 380)) | (1L << (EVERY - 380)) | (1L << (HOST - 380)) | (1L << (SOCKET - 380)) | (1L << (PORT - 380)) | (1L << (SERVER - 380)) | (1L << (WRAPPER - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (RETURNS - 380)) | (1L << (CONTAINS - 380)) | (1L << (SECURITY - 380)) | (1L << (INVOKER - 380)) | (1L << (TEMPTABLE - 380)) | (1L << (MERGE - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (UNDEFINED - 444)) | (1L << (DATAFILE - 444)) | (1L << (FILE_BLOCK_SIZE - 444)) | (1L << (EXTENT_SIZE - 444)) | (1L << (INITIAL_SIZE - 444)) | (1L << (AUTOEXTEND_SIZE - 444)) | (1L << (MAX_SIZE - 444)) | (1L << (NODEGROUP - 444)) | (1L << (WAIT - 444)) | (1L << (LOGFILE - 444)) | (1L << (UNDOFILE - 444)) | (1L << (UNDO_BUFFER_SIZE - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (HANDLER - 444)) | (1L << (PREV - 444)) | (1L << (ORGANIZATION - 444)) | (1L << (DEFINITION - 444)) | (1L << (DESCRIPTION - 444)) | (1L << (REFERENCE - 444)) | (1L << (FOLLOWS - 444)) | (1L << (PRECEDES - 444)) | (1L << (IMPORT - 444)) | (1L << (CONCURRENT - 444)) | (1L << (XML - 444)) | (1L << (DUMPFILE - 444)) | (1L << (SHARE - 444)) | (1L << (CODE - 444)) | (1L << (CONTEXT - 444)) | (1L << (SOURCE - 444)) | (1L << (CHANNEL - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (CLONE - 508)) | (1L << (AGGREGATE - 508)) | (1L << (INSTALL - 508)) | (1L << (COMPONENT - 508)) | (1L << (UNINSTALL - 508)) | (1L << (RESOURCE - 508)) | (1L << (EXPIRE - 508)) | (1L << (NEVER - 508)) | (1L << (HISTORY - 508)) | (1L << (OPTIONAL - 508)) | (1L << (REUSE - 508)) | (1L << (MAX_QUERIES_PER_HOUR - 508)) | (1L << (MAX_UPDATES_PER_HOUR - 508)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 508)) | (1L << (MAX_USER_CONNECTIONS - 508)) | (1L << (RETAIN - 508)) | (1L << (RANDOM - 508)) | (1L << (OLD - 508)) | (1L << (ISSUER - 508)) | (1L << (SUBJECT - 508)) | (1L << (CACHE - 508)) | (1L << (GENERAL - 508)) | (1L << (SLOW - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (EXPORT - 508)) | (1L << (RELAY - 508)) | (1L << (HOSTS - 508)) | (1L << (FLUSH - 508)) | (1L << (RESET - 508)) | (1L << (RESTART - 508)))) != 0) || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (IO_THREAD - 688)) | (1L << (SQL_THREAD - 688)) | (1L << (SQL_BEFORE_GTIDS - 688)) | (1L << (SQL_AFTER_GTIDS - 688)) | (1L << (MASTER_LOG_FILE - 688)) | (1L << (MASTER_LOG_POS - 688)) | (1L << (RELAY_LOG_FILE - 688)) | (1L << (RELAY_LOG_POS - 688)) | (1L << (SQL_AFTER_MTS_GAPS - 688)) | (1L << (UNTIL - 688)) | (1L << (DEFAULT_AUTH - 688)) | (1L << (PLUGIN_DIR - 688)) | (1L << (STOP - 688)) | (1L << (IDENTIFIER_ - 688)))) != 0) );
			setState(5583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5580);
				match(FOR);
				setState(5581);
				match(CHANNEL);
				setState(5582);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySQLStatementParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLStatementParser.SLAVE, 0); }
		public ThreadTypes_Context threadTypes_() {
			return getRuleContext(ThreadTypes_Context.class,0);
		}
		public List<UtilOption_Context> utilOption_() {
			return getRuleContexts(UtilOption_Context.class);
		}
		public UtilOption_Context utilOption_(int i) {
			return getRuleContext(UtilOption_Context.class,i);
		}
		public List<ConnectionOptions_Context> connectionOptions_() {
			return getRuleContexts(ConnectionOptions_Context.class);
		}
		public ConnectionOptions_Context connectionOptions_(int i) {
			return getRuleContext(ConnectionOptions_Context.class,i);
		}
		public List<ChannelOption_Context> channelOption_() {
			return getRuleContexts(ChannelOption_Context.class);
		}
		public ChannelOption_Context channelOption_(int i) {
			return getRuleContext(ChannelOption_Context.class,i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5585);
			match(START);
			setState(5586);
			match(SLAVE);
			setState(5587);
			threadTypes_();
			setState(5591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==UNTIL) {
				{
				{
				setState(5588);
				utilOption_();
				}
				}
				setState(5593);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USER || _la==PASSWORD || _la==DEFAULT_AUTH || _la==PLUGIN_DIR) {
				{
				{
				setState(5594);
				connectionOptions_();
				}
				}
				setState(5599);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR) {
				{
				{
				setState(5600);
				channelOption_();
				}
				}
				setState(5605);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySQLStatementParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLStatementParser.SLAVE, 0); }
		public ThreadTypes_Context threadTypes_() {
			return getRuleContext(ThreadTypes_Context.class,0);
		}
		public List<ChannelOption_Context> channelOption_() {
			return getRuleContexts(ChannelOption_Context.class);
		}
		public ChannelOption_Context channelOption_(int i) {
			return getRuleContext(ChannelOption_Context.class,i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5606);
			match(STOP);
			setState(5607);
			match(SLAVE);
			setState(5608);
			threadTypes_();
			setState(5612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR) {
				{
				{
				setState(5609);
				channelOption_();
				}
				}
				setState(5614);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypes_Context extends ParserRuleContext {
		public List<ThreadType_Context> threadType_() {
			return getRuleContexts(ThreadType_Context.class);
		}
		public ThreadType_Context threadType_(int i) {
			return getRuleContext(ThreadType_Context.class,i);
		}
		public ThreadTypes_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadTypes_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitThreadTypes_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypes_Context threadTypes_() throws RecognitionException {
		ThreadTypes_Context _localctx = new ThreadTypes_Context(_ctx, getState());
		enterRule(_localctx, 766, RULE_threadTypes_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				{
				setState(5615);
				threadType_();
				}
				}
				setState(5620);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadType_Context extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(MySQLStatementParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySQLStatementParser.SQL_THREAD, 0); }
		public ThreadType_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitThreadType_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadType_Context threadType_() throws RecognitionException {
		ThreadType_Context _localctx = new ThreadType_Context(_ctx, getState());
		enterRule(_localctx, 768, RULE_threadType_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5621);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilOption_Context extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(MySQLStatementParser.UNTIL, 0); }
		public List<TerminalNode> EQ_() { return getTokens(MySQLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(MySQLStatementParser.EQ_, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySQLStatementParser.MASTER_LOG_FILE, 0); }
		public TerminalNode COMMA_() { return getToken(MySQLStatementParser.COMMA_, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySQLStatementParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySQLStatementParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySQLStatementParser.RELAY_LOG_POS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySQLStatementParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySQLStatementParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySQLStatementParser.SQL_AFTER_GTIDS, 0); }
		public UtilOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitUtilOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilOption_Context utilOption_() throws RecognitionException {
		UtilOption_Context _localctx = new UtilOption_Context(_ctx, getState());
		enterRule(_localctx, 770, RULE_utilOption_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5623);
			match(UNTIL);
			setState(5644);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_BEFORE_GTIDS:
			case SQL_AFTER_GTIDS:
				{
				setState(5624);
				_la = _input.LA(1);
				if ( !(_la==SQL_BEFORE_GTIDS || _la==SQL_AFTER_GTIDS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5625);
				match(EQ_);
				setState(5626);
				identifier();
				}
				break;
			case MASTER_LOG_FILE:
				{
				setState(5627);
				match(MASTER_LOG_FILE);
				setState(5628);
				match(EQ_);
				setState(5629);
				identifier();
				setState(5630);
				match(COMMA_);
				setState(5631);
				match(MASTER_LOG_POS);
				setState(5632);
				match(EQ_);
				setState(5633);
				identifier();
				}
				break;
			case RELAY_LOG_FILE:
				{
				setState(5635);
				match(RELAY_LOG_FILE);
				setState(5636);
				match(EQ_);
				setState(5637);
				identifier();
				setState(5638);
				match(COMMA_);
				setState(5639);
				match(RELAY_LOG_POS);
				setState(5640);
				match(EQ_);
				setState(5641);
				identifier();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				{
				setState(5643);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptions_Context extends ParserRuleContext {
		public TerminalNode USER() { return getToken(MySQLStatementParser.USER, 0); }
		public TerminalNode EQ_() { return getToken(MySQLStatementParser.EQ_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PASSWORD() { return getToken(MySQLStatementParser.PASSWORD, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySQLStatementParser.DEFAULT_AUTH, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySQLStatementParser.PLUGIN_DIR, 0); }
		public ConnectionOptions_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOptions_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitConnectionOptions_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptions_Context connectionOptions_() throws RecognitionException {
		ConnectionOptions_Context _localctx = new ConnectionOptions_Context(_ctx, getState());
		enterRule(_localctx, 772, RULE_connectionOptions_);
		try {
			setState(5658);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5646);
				match(USER);
				setState(5647);
				match(EQ_);
				setState(5648);
				identifier();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(5649);
				match(PASSWORD);
				setState(5650);
				match(EQ_);
				setState(5651);
				identifier();
				}
				break;
			case DEFAULT_AUTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(5652);
				match(DEFAULT_AUTH);
				setState(5653);
				match(EQ_);
				setState(5654);
				identifier();
				}
				break;
			case PLUGIN_DIR:
				enterOuterAlt(_localctx, 4);
				{
				setState(5655);
				match(PLUGIN_DIR);
				setState(5656);
				match(EQ_);
				setState(5657);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOption_Context extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySQLStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySQLStatementParser.CHANNEL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ChannelOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLStatementVisitor ) return ((MySQLStatementVisitor<? extends T>)visitor).visitChannelOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOption_Context channelOption_() throws RecognitionException {
		ChannelOption_Context _localctx = new ChannelOption_Context(_ctx, getState());
		enterRule(_localctx, 774, RULE_channelOption_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5660);
			match(FOR);
			setState(5661);
			match(CHANNEL);
			setState(5662);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 111:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 114:
			return booleanPrimary_sempred((BooleanPrimaryContext)_localctx, predIndex);
		case 117:
			return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 118:
			return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 5);
		case 1:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean booleanPrimary_sempred(BooleanPrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 5);
		case 3:
			return precpred(_ctx, 4);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 15);
		case 7:
			return precpred(_ctx, 14);
		case 8:
			return precpred(_ctx, 13);
		case 9:
			return precpred(_ctx, 12);
		case 10:
			return precpred(_ctx, 11);
		case 11:
			return precpred(_ctx, 10);
		case 12:
			return precpred(_ctx, 9);
		case 13:
			return precpred(_ctx, 8);
		case 14:
			return precpred(_ctx, 7);
		case 15:
			return precpred(_ctx, 6);
		case 16:
			return precpred(_ctx, 5);
		case 17:
			return precpred(_ctx, 4);
		case 18:
			return precpred(_ctx, 3);
		case 19:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return precpred(_ctx, 8);
		case 21:
			return precpred(_ctx, 10);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02c8\u1623\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3"+
		"\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2"+
		"\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u0338\n\2\3\2\5\2\u033b\n"+
		"\2\3\3\3\3\3\3\5\3\u0340\n\3\3\3\3\3\5\3\u0344\n\3\3\3\3\3\3\3\5\3\u0349"+
		"\n\3\3\3\5\3\u034c\n\3\3\4\5\4\u034f\n\4\3\4\5\4\u0352\n\4\3\5\5\5\u0355"+
		"\n\5\3\5\3\5\3\5\3\5\7\5\u035b\n\5\f\5\16\5\u035e\13\5\3\6\5\6\u0361\n"+
		"\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u036c\n\7\f\7\16\7\u036f\13"+
		"\7\3\b\3\b\5\b\u0373\n\b\3\b\5\b\u0376\n\b\3\b\3\b\5\b\u037a\n\b\3\b\3"+
		"\b\3\b\5\b\u037f\n\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\5\n\u0388\n\n\3\n\5\n"+
		"\u038b\n\n\3\n\5\n\u038e\n\n\3\13\5\13\u0391\n\13\3\13\5\13\u0394\n\13"+
		"\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\7\r\u039e\n\r\f\r\16\r\u03a1\13\r\3\16"+
		"\3\16\3\16\3\16\7\16\u03a7\n\16\f\16\16\16\u03aa\13\16\3\16\3\16\3\16"+
		"\3\16\5\16\u03b0\n\16\3\17\3\17\3\17\5\17\u03b5\n\17\3\20\3\20\3\20\3"+
		"\21\3\21\3\21\3\21\5\21\u03be\n\21\3\21\5\21\u03c1\n\21\3\22\5\22\u03c4"+
		"\n\22\3\22\5\22\u03c7\n\22\3\22\5\22\u03ca\n\22\3\23\3\23\3\23\5\23\u03cf"+
		"\n\23\3\23\5\23\u03d2\n\23\3\23\5\23\u03d5\n\23\3\24\3\24\3\24\3\24\3"+
		"\24\3\24\3\24\3\24\3\24\5\24\u03e0\n\24\3\25\3\25\5\25\u03e4\n\25\3\25"+
		"\3\25\3\25\5\25\u03e9\n\25\7\25\u03eb\n\25\f\25\16\25\u03ee\13\25\3\26"+
		"\5\26\u03f1\n\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u03fb\n"+
		"\27\f\27\16\27\u03fe\13\27\3\27\3\27\5\27\u0402\n\27\3\30\3\30\3\30\3"+
		"\30\5\30\u0408\n\30\3\31\3\31\3\31\3\31\5\31\u040e\n\31\3\32\3\32\3\32"+
		"\3\32\5\32\u0414\n\32\3\32\5\32\u0417\n\32\3\33\3\33\3\33\3\33\3\33\3"+
		"\33\3\33\3\33\3\33\3\33\5\33\u0423\n\33\3\33\3\33\5\33\u0427\n\33\3\33"+
		"\3\33\5\33\u042b\n\33\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0433\n\34\3"+
		"\34\3\34\5\34\u0437\n\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\5\36\u0443\n\36\3\37\3\37\3\37\5\37\u0448\n\37\3\37\5\37\u044b\n"+
		"\37\3\37\3\37\3\37\5\37\u0450\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\7\37\u045a\n\37\f\37\16\37\u045d\13\37\3\37\3\37\5\37\u0461\n\37"+
		"\3\37\3\37\3\37\5\37\u0466\n\37\3\37\3\37\6\37\u046a\n\37\r\37\16\37\u046b"+
		"\5\37\u046e\n\37\3\37\3\37\6\37\u0472\n\37\r\37\16\37\u0473\5\37\u0476"+
		"\n\37\3\37\3\37\3\37\3\37\5\37\u047c\n\37\3\37\3\37\3\37\3\37\7\37\u0482"+
		"\n\37\f\37\16\37\u0485\13\37\3\37\3\37\5\37\u0489\n\37\3\37\5\37\u048c"+
		"\n\37\3 \3 \3 \5 \u0491\n \3 \5 \u0494\n \3 \3 \3 \5 \u0499\n \3 \3 \3"+
		" \3 \3 \3 \5 \u04a1\n \3 \3 \3 \3 \3 \3 \5 \u04a9\n \3 \3 \3 \3 \5 \u04af"+
		"\n \3 \3 \3 \3 \7 \u04b5\n \f \16 \u04b8\13 \3 \3 \5 \u04bc\n \3 \5 \u04bf"+
		"\n \3!\3!\5!\u04c3\n!\3!\3!\3!\7!\u04c8\n!\f!\16!\u04cb\13!\3\"\3\"\5"+
		"\"\u04cf\n\"\3\"\3\"\3\"\3#\3#\3#\5#\u04d7\n#\3#\7#\u04da\n#\f#\16#\u04dd"+
		"\13#\3$\3$\7$\u04e1\n$\f$\16$\u04e4\13$\3$\3$\5$\u04e8\n$\3$\5$\u04eb"+
		"\n$\3$\5$\u04ee\n$\3$\5$\u04f1\n$\3$\5$\u04f4\n$\3$\5$\u04f7\n$\3$\5$"+
		"\u04fa\n$\3$\5$\u04fd\n$\3$\5$\u0500\n$\3%\3%\3%\3%\3%\3%\3%\3%\5%\u050a"+
		"\n%\3&\3&\3\'\3\'\5\'\u0510\n\'\3\'\3\'\7\'\u0514\n\'\f\'\16\'\u0517\13"+
		"\'\3(\3(\5(\u051b\n(\3(\5(\u051e\n(\3(\5(\u0521\n(\3(\5(\u0524\n(\3)\3"+
		")\5)\u0528\n)\3*\3*\3+\3+\3+\3,\3,\3,\3-\3-\3-\7-\u0535\n-\f-\16-\u0538"+
		"\13-\3.\3.\3.\3.\3.\3.\5.\u0540\n.\3/\3/\7/\u0544\n/\f/\16/\u0547\13/"+
		"\3\60\3\60\5\60\u054b\n\60\3\60\5\60\u054e\n\60\3\60\5\60\u0551\n\60\3"+
		"\60\5\60\u0554\n\60\3\60\3\60\5\60\u0558\n\60\3\60\3\60\5\60\u055c\n\60"+
		"\3\60\3\60\3\60\3\60\5\60\u0562\n\60\3\61\3\61\3\61\3\61\3\61\7\61\u0569"+
		"\n\61\f\61\16\61\u056c\13\61\3\61\3\61\3\62\3\62\3\62\7\62\u0573\n\62"+
		"\f\62\16\62\u0576\13\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0580"+
		"\n\63\5\63\u0582\n\63\3\63\3\63\3\63\3\63\7\63\u0588\n\63\f\63\16\63\u058b"+
		"\13\63\3\63\3\63\3\64\5\64\u0590\n\64\3\64\3\64\5\64\u0594\n\64\3\64\3"+
		"\64\5\64\u0598\n\64\3\64\3\64\5\64\u059c\n\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\5\64\u05a6\n\64\3\64\3\64\5\64\u05aa\n\64\3\65\3\65\3"+
		"\65\3\65\5\65\u05b0\n\65\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\7\67"+
		"\u05ba\n\67\f\67\16\67\u05bd\13\67\3\67\3\67\5\67\u05c1\n\67\38\38\38"+
		"\39\39\39\39\59\u05ca\n9\39\39\39\39\39\59\u05d1\n9\3:\3:\5:\u05d5\n:"+
		"\3;\3;\5;\u05d9\n;\3<\3<\3<\3<\7<\u05df\n<\f<\16<\u05e2\13<\3=\3=\3=\3"+
		"=\3=\3=\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\5?\u05f4\n?\3@\3@\3@\3@\5@\u05fa"+
		"\n@\3@\3@\3@\3@\3@\3@\5@\u0602\n@\3A\3A\3A\3A\7A\u0608\nA\fA\16A\u060b"+
		"\13A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0616\nA\3A\3A\6A\u061a\nA\rA\16A\u061b"+
		"\5A\u061e\nA\3A\3A\6A\u0622\nA\rA\16A\u0623\5A\u0626\nA\5A\u0628\nA\3"+
		"B\3B\3B\3B\3B\3B\5B\u0630\nB\3C\3C\3D\3D\3D\3D\3D\3D\3D\5D\u063b\nD\3"+
		"E\5E\u063e\nE\3E\3E\5E\u0642\nE\3F\5F\u0645\nF\3F\3F\3G\3G\3G\3G\3G\3"+
		"G\3G\5G\u0650\nG\3H\5H\u0653\nH\3H\3H\5H\u0657\nH\3I\5I\u065a\nI\3I\3"+
		"I\5I\u065e\nI\3J\3J\3K\3K\3L\3L\3M\3M\3N\3N\5N\u066a\nN\3O\3O\3P\5P\u066f"+
		"\nP\3P\5P\u0672\nP\3P\5P\u0675\nP\3P\5P\u0678\nP\3P\3P\3Q\3Q\3R\3R\3R"+
		"\5R\u0681\nR\3R\3R\3S\3S\3S\5S\u0688\nS\3S\3S\3T\3T\3U\3U\3U\3U\3U\5U"+
		"\u0693\nU\3V\3V\3V\3V\3V\3V\5V\u069b\nV\3W\3W\5W\u069f\nW\3X\3X\5X\u06a3"+
		"\nX\3Y\3Y\3Y\3Y\5Y\u06a9\nY\3Y\5Y\u06ac\nY\3Z\3Z\3Z\3Z\5Z\u06b2\nZ\3Z"+
		"\5Z\u06b5\nZ\3[\3[\3\\\3\\\3]\5]\u06bc\n]\3]\3]\3]\7]\u06c1\n]\f]\16]"+
		"\u06c4\13]\3]\5]\u06c7\n]\3^\5^\u06ca\n^\3^\3^\3^\7^\u06cf\n^\f^\16^\u06d2"+
		"\13^\3^\5^\u06d5\n^\3_\3_\3`\3`\3a\3a\3b\3b\3c\3c\3d\3d\3e\3e\3e\3e\3"+
		"e\3e\3f\3f\3g\3g\3h\3h\3i\3i\3i\3i\3i\5i\u06f4\ni\3j\3j\3k\3k\3l\3l\3"+
		"m\3m\5m\u06fe\nm\3n\3n\3o\3o\3p\3p\3p\3q\3q\3q\3q\3q\3q\3q\3q\3q\5q\u0710"+
		"\nq\3q\3q\3q\3q\3q\3q\3q\7q\u0719\nq\fq\16q\u071c\13q\3r\3r\3s\3s\3t\3"+
		"t\3t\3t\3t\3t\5t\u0728\nt\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\7t\u0737"+
		"\nt\ft\16t\u073a\13t\3u\3u\3v\3v\5v\u0740\nv\3v\3v\3v\3v\3v\5v\u0747\n"+
		"v\3v\3v\3v\3v\3v\7v\u074e\nv\fv\16v\u0751\13v\3v\3v\3v\3v\5v\u0757\nv"+
		"\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\5v\u0765\nv\3v\3v\3v\3v\5v\u076b"+
		"\nv\3v\3v\5v\u076f\nv\3v\3v\3v\3v\5v\u0775\nv\3w\3w\3w\3w\3w\3w\3w\3w"+
		"\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w"+
		"\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\7w\u07a4\nw\fw\16w\u07a7\13"+
		"w\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u07b2\nx\3x\3x\3x\3x\7x\u07b8\nx\fx\16"+
		"x\u07bb\13x\3x\3x\3x\5x\u07c0\nx\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u07cb\n"+
		"x\3x\3x\3x\3x\3x\3x\3x\5x\u07d4\nx\7x\u07d6\nx\fx\16x\u07d9\13x\3y\3y"+
		"\3y\5y\u07de\ny\3z\3z\3z\5z\u07e3\nz\3z\3z\3z\7z\u07e8\nz\fz\16z\u07eb"+
		"\13z\3z\5z\u07ee\nz\3z\3z\5z\u07f2\nz\3{\3{\3|\3|\3}\3}\3}\3}\3}\3}\5"+
		"}\u07fe\n}\3~\5~\u0801\n~\3~\5~\u0804\n~\3~\5~\u0807\n~\3~\5~\u080a\n"+
		"~\3\177\3\177\3\177\3\177\3\177\7\177\u0811\n\177\f\177\16\177\u0814\13"+
		"\177\3\u0080\3\u0080\3\u0080\5\u0080\u0819\n\u0080\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\5\u0081\u0827\n\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\5\u0084\u083b\n\u0084\3\u0085\3\u0085\3\u0085"+
		"\5\u0085\u0840\n\u0085\3\u0085\3\u0085\3\u0085\7\u0085\u0845\n\u0085\f"+
		"\u0085\16\u0085\u0848\13\u0085\3\u0085\5\u0085\u084b\n\u0085\3\u0085\5"+
		"\u0085\u084e\n\u0085\3\u0085\3\u0085\5\u0085\u0852\n\u0085\3\u0085\3\u0085"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\7\u0086\u085b\n\u0086\f\u0086"+
		"\16\u0086\u085e\13\u0086\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\5\u0088\u0878\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a"+
		"\u0888\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\5\u008a\u0893\n\u008a\3\u008a\3\u008a\5\u008a\u0897\n"+
		"\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\7\u008c\u08a5\n\u008c\f\u008c\16\u008c"+
		"\u08a8\13\u008c\3\u008c\3\u008c\5\u008c\u08ac\n\u008c\3\u008c\3\u008c"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\5\u008f\u08c2\n\u008f\3\u008f\5\u008f\u08c5\n\u008f\3\u008f\3\u008f\3"+
		"\u0090\3\u0090\3\u0090\3\u0090\7\u0090\u08cd\n\u0090\f\u0090\16\u0090"+
		"\u08d0\13\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u08d5\n\u0090\3\u0091"+
		"\3\u0091\5\u0091\u08d9\n\u0091\3\u0091\5\u0091\u08dc\n\u0091\3\u0092\3"+
		"\u0092\3\u0092\3\u0092\3\u0092\7\u0092\u08e3\n\u0092\f\u0092\16\u0092"+
		"\u08e6\13\u0092\3\u0092\5\u0092\u08e9\n\u0092\3\u0092\3\u0092\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\5\u0093\u0977\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\5\u0094\u097e\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\5\u0095\u0991\n\u0095\3\u0096\3\u0096\5\u0096"+
		"\u0995\n\u0096\3\u0096\6\u0096\u0998\n\u0096\r\u0096\16\u0096\u0999\3"+
		"\u0096\5\u0096\u099d\n\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3"+
		"\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\7\u009b\u09b4"+
		"\n\u009b\f\u009b\16\u009b\u09b7\13\u009b\3\u009c\3\u009c\3\u009c\5\u009c"+
		"\u09bc\n\u009c\3\u009c\5\u009c\u09bf\n\u009c\3\u009d\3\u009d\5\u009d\u09c3"+
		"\n\u009d\3\u009d\5\u009d\u09c6\n\u009d\3\u009d\5\u009d\u09c9\n\u009d\3"+
		"\u009d\5\u009d\u09cc\n\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u09d1\n\u009d"+
		"\3\u009d\5\u009d\u09d4\n\u009d\5\u009d\u09d6\n\u009d\3\u009e\5\u009e\u09d9"+
		"\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\5\u009e\u0a07\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0a0d\n"+
		"\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0a15\n"+
		"\u00a0\f\u00a0\16\u00a0\u0a18\13\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u0a1f\n\u00a1\3\u00a1\3\u00a1\3\u00a2\3\u00a2\5\u00a2"+
		"\u0a25\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u0a29\n\u00a2\3\u00a3\3\u00a3\3"+
		"\u00a3\5\u00a3\u0a2e\n\u00a3\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0a33\n\u00a4"+
		"\f\u00a4\16\u00a4\u0a36\13\u00a4\3\u00a5\3\u00a5\5\u00a5\u0a3a\n\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0a41\n\u00a5\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0a47\n\u00a6\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0a52\n\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0a57\n\u00a8\3\u00a8\3\u00a8\5\u00a8"+
		"\u0a5b\n\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0a60\n\u00a8\3\u00a8\7"+
		"\u00a8\u0a63\n\u00a8\f\u00a8\16\u00a8\u0a66\13\u00a8\3\u00a9\3\u00a9\5"+
		"\u00a9\u0a6a\n\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3"+
		"\u00aa\5\u00aa\u0a73\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0a79"+
		"\n\u00aa\3\u00aa\3\u00aa\5\u00aa\u0a7d\n\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\5\u00aa\u0a82\n\u00aa\3\u00aa\7\u00aa\u0a85\n\u00aa\f\u00aa\16\u00aa"+
		"\u0a88\13\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0a8f"+
		"\n\u00ab\3\u00ab\3\u00ab\7\u00ab\u0a93\n\u00ab\f\u00ab\16\u00ab\u0a96"+
		"\13\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\7\u00ac\u0a9c\n\u00ac\f\u00ac"+
		"\16\u00ac\u0a9f\13\u00ac\3\u00ad\5\u00ad\u0aa2\n\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\5\u00ad\u0aa7\n\u00ad\3\u00ad\5\u00ad\u0aaa\n\u00ad\3\u00ad\3"+
		"\u00ad\5\u00ad\u0aae\n\u00ad\3\u00ad\3\u00ad\5\u00ad\u0ab2\n\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0ab9\n\u00ad\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\5\u00ae\u0abf\n\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0ad5"+
		"\n\u00b0\5\u00b0\u0ad7\n\u00b0\3\u00b1\3\u00b1\5\u00b1\u0adb\n\u00b1\3"+
		"\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0ae1\n\u00b1\3\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0aea\n\u00b1\3\u00b1\5"+
		"\u00b1\u0aed\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0af4"+
		"\n\u00b1\3\u00b1\3\u00b1\5\u00b1\u0af8\n\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b2\3\u00b2\5\u00b2\u0aff\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\5\u00b2\u0b06\n\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0b0b\n"+
		"\u00b2\3\u00b2\5\u00b2\u0b0e\n\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0b13"+
		"\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0b1a\n\u00b2"+
		"\3\u00b2\3\u00b2\5\u00b2\u0b1e\n\u00b2\3\u00b2\3\u00b2\5\u00b2\u0b22\n"+
		"\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0b28\n\u00b3\3\u00b3\3"+
		"\u00b3\3\u00b4\3\u00b4\5\u00b4\u0b2e\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\5\u00b4\u0b36\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b4\7\u00b4\u0b3c\n\u00b4\f\u00b4\16\u00b4\u0b3f\13\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\7\u00b4\u0b45\n\u00b4\f\u00b4\16\u00b4\u0b48\13"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\7\u00b5\u0b50\n"+
		"\u00b5\f\u00b5\16\u00b5\u0b53\13\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\5\u00b7\u0b5e\n\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0b64\n\u00b7\3\u00b7\3\u00b7\7\u00b7"+
		"\u0b68\n\u00b7\f\u00b7\16\u00b7\u0b6b\13\u00b7\3\u00b7\3\u00b7\7\u00b7"+
		"\u0b6f\n\u00b7\f\u00b7\16\u00b7\u0b72\13\u00b7\3\u00b7\3\u00b7\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\7\u00b8\u0b7a\n\u00b8\f\u00b8\16\u00b8\u0b7d"+
		"\13\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0b83\n\u00b9\3\u00b9"+
		"\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\7\u00ba\u0b93\n\u00ba\f\u00ba\16\u00ba"+
		"\u0b96\13\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u0ba2\n\u00bb\f\u00bb\16\u00bb\u0ba5"+
		"\13\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0bad"+
		"\n\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0bb4\n\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0bb9\n\u00bd\3\u00bd\5\u00bd\u0bbc\n"+
		"\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0bc1\n\u00bd\3\u00bd\3\u00bd\3"+
		"\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd\u0bc9\n\u00bd\f\u00bd\16\u00bd"+
		"\u0bcc\13\u00bd\3\u00bd\3\u00bd\5\u00bd\u0bd0\n\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\5\u00bd\u0bd6\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u0bda\n"+
		"\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0be0\n\u00be\3\u00be\5"+
		"\u00be\u0be3\n\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0be8\n\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0bf0\n\u00be\f\u00be"+
		"\16\u00be\u0bf3\13\u00be\3\u00be\3\u00be\5\u00be\u0bf7\n\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\5\u00be\u0bfd\n\u00be\3\u00be\3\u00be\5\u00be"+
		"\u0c01\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0c07\n\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\7\u00bf\u0c0c\n\u00bf\f\u00bf\16\u00bf\u0c0f\13"+
		"\u00bf\3\u00bf\5\u00bf\u0c12\n\u00bf\3\u00c0\3\u00c0\5\u00c0\u0c16\n\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0"+
		"\u0c20\n\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0c25\n\u00c0\3\u00c0\3"+
		"\u00c0\5\u00c0\u0c29\n\u00c0\3\u00c0\5\u00c0\u0c2c\n\u00c0\3\u00c1\3\u00c1"+
		"\5\u00c1\u0c30\n\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0c3d\n\u00c1\3\u00c1"+
		"\5\u00c1\u0c40\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u0c44\n\u00c1\3\u00c1\5"+
		"\u00c1\u0c47\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u0c4b\n\u00c1\3\u00c1\5\u00c1"+
		"\u0c4e\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u0c52\n\u00c1\3\u00c1\5\u00c1\u0c55"+
		"\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u0c59\n\u00c1\3\u00c1\5\u00c1\u0c5c\n"+
		"\u00c1\3\u00c1\5\u00c1\u0c5f\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u0c63\n\u00c1"+
		"\3\u00c1\5\u00c1\u0c66\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u0c6a\n\u00c1\3"+
		"\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\5\u00c2\u0c77\n\u00c2\3\u00c2\5\u00c2\u0c7a\n\u00c2\3"+
		"\u00c2\3\u00c2\5\u00c2\u0c7e\n\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3"+
		"\u00c3\3\u00c3\3\u00c3\5\u00c3\u0c87\n\u00c3\3\u00c3\5\u00c3\u0c8a\n\u00c3"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\5\u00c4\u0c95\n\u00c4\3\u00c4\5\u00c4\u0c98\n\u00c4\3\u00c4\3\u00c4\5"+
		"\u00c4\u0c9c\n\u00c4\3\u00c4\5\u00c4\u0c9f\n\u00c4\3\u00c4\3\u00c4\5\u00c4"+
		"\u0ca3\n\u00c4\3\u00c4\5\u00c4\u0ca6\n\u00c4\3\u00c4\3\u00c4\5\u00c4\u0caa"+
		"\n\u00c4\3\u00c4\5\u00c4\u0cad\n\u00c4\3\u00c4\5\u00c4\u0cb0\n\u00c4\3"+
		"\u00c4\3\u00c4\5\u00c4\u0cb4\n\u00c4\3\u00c4\5\u00c4\u0cb7\n\u00c4\3\u00c4"+
		"\3\u00c4\5\u00c4\u0cbb\n\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0cc8\n\u00c5"+
		"\3\u00c5\5\u00c5\u0ccb\n\u00c5\3\u00c5\5\u00c5\u0cce\n\u00c5\3\u00c5\3"+
		"\u00c5\5\u00c5\u0cd2\n\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\5\u00c7\u0ce0\n"+
		"\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\5\u00c7\u0cec\n\u00c7\3\u00c7\3\u00c7\3\u00c8\3\u00c8"+
		"\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0cf5\n\u00c9\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\7\u00ca\u0cfb\n\u00ca\f\u00ca\16\u00ca\u0cfe\13\u00ca\3\u00ca"+
		"\3\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0d06\n\u00cb\3\u00cc"+
		"\3\u00cc\3\u00cc\7\u00cc\u0d0b\n\u00cc\f\u00cc\16\u00cc\u0d0e\13\u00cc"+
		"\3\u00cc\7\u00cc\u0d11\n\u00cc\f\u00cc\16\u00cc\u0d14\13\u00cc\5\u00cc"+
		"\u0d16\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0d1d\n"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0d23\n\u00cd\3\u00ce\3"+
		"\u00ce\3\u00ce\5\u00ce\u0d28\n\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0d2d"+
		"\n\u00ce\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0d32\n\u00cf\3\u00cf\5\u00cf"+
		"\u0d35\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf"+
		"\u0d3d\n\u00cf\3\u00d0\3\u00d0\5\u00d0\u0d41\n\u00d0\5\u00d0\u0d43\n\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0d48\n\u00d0\3\u00d0\5\u00d0\u0d4b\n"+
		"\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\5\u00d1\u0d56\n\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u0d5b\n"+
		"\u00d1\f\u00d1\16\u00d1\u0d5e\13\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u0d68\n\u00d2\3\u00d3\5\u00d3"+
		"\u0d6b\n\u00d3\3\u00d3\5\u00d3\u0d6e\n\u00d3\3\u00d3\5\u00d3\u0d71\n\u00d3"+
		"\3\u00d3\5\u00d3\u0d74\n\u00d3\3\u00d3\3\u00d3\7\u00d3\u0d78\n\u00d3\f"+
		"\u00d3\16\u00d3\u0d7b\13\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\7\u00d5\u0d84\n\u00d5\f\u00d5\16\u00d5\u0d87\13\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0d8f\n\u00d6"+
		"\3\u00d6\5\u00d6\u0d92\n\u00d6\3\u00d6\5\u00d6\u0d95\n\u00d6\3\u00d7\3"+
		"\u00d7\5\u00d7\u0d99\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\5\u00d7\u0da3\n\u00d7\3\u00d8\3\u00d8\5\u00d8\u0da7"+
		"\n\u00d8\5\u00d8\u0da9\n\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0dae\n"+
		"\u00d8\3\u00d9\3\u00d9\5\u00d9\u0db2\n\u00d9\3\u00d9\3\u00d9\7\u00d9\u0db6"+
		"\n\u00d9\f\u00d9\16\u00d9\u0db9\13\u00d9\3\u00da\5\u00da\u0dbc\n\u00da"+
		"\3\u00da\3\u00da\3\u00db\3\u00db\5\u00db\u0dc2\n\u00db\3\u00db\5\u00db"+
		"\u0dc5\n\u00db\3\u00db\5\u00db\u0dc8\n\u00db\3\u00db\3\u00db\7\u00db\u0dcc"+
		"\n\u00db\f\u00db\16\u00db\u0dcf\13\u00db\3\u00dc\3\u00dc\3\u00dc\5\u00dc"+
		"\u0dd4\n\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dd\5\u00dd\u0dda\n\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\5\u00dd\u0ddf\n\u00dd\3\u00de\5\u00de\u0de2\n\u00de"+
		"\3\u00df\3\u00df\3\u00df\7\u00df\u0de7\n\u00df\f\u00df\16\u00df\u0dea"+
		"\13\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0df9\n\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0dff\n\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\5\u00e0\u0e04\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\5\u00e0\u0e0c\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\5\u00e0\u0e16\n\u00e0\3\u00e0\3\u00e0\5\u00e0\u0e1a\n"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0e20\n\u00e0\3\u00e0\3"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0e30\n\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\5\u00e0\u0e48\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\5\u00e0\u0e4f\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\5\u00e0\u0e56\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\5\u00e0\u0e69\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\5\u00e0\u0e6f\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0e75\n"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0e7b\n\u00e0\3\u00e0\3"+
		"\u00e0\3\u00e0\3\u00e0\5\u00e0\u0e81\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3"+
		"\u00e0\5\u00e0\u0e87\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0e8d"+
		"\n\u00e0\3\u00e1\3\u00e1\5\u00e1\u0e91\n\u00e1\3\u00e1\7\u00e1\u0e94\n"+
		"\u00e1\f\u00e1\16\u00e1\u0e97\13\u00e1\3\u00e2\3\u00e2\5\u00e2\u0e9b\n"+
		"\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0ea0\n\u00e2\3\u00e2\3\u00e2\5"+
		"\u00e2\u0ea4\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u0ea8\n\u00e2\3\u00e2\3\u00e2"+
		"\5\u00e2\u0eac\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0eb1\n\u00e2\3"+
		"\u00e2\3\u00e2\3\u00e2\5\u00e2\u0eb6\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5"+
		"\u00e2\u0ebb\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0ec1\n\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0ec6\n\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\5\u00e2\u0ecb\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0ed0\n\u00e2\3"+
		"\u00e2\3\u00e2\3\u00e2\5\u00e2\u0ed5\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5"+
		"\u00e2\u0eda\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0edf\n\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\5\u00e2\u0ee4\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u0ee9\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0eee\n\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e2\5\u00e2\u0ef3\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0ef8"+
		"\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0efd\n\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\5\u00e2\u0f02\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\5\u00e2\u0f09\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u0f0d\n\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e2\3\u00e2\7\u00e2\u0f13\n\u00e2\f\u00e2\16\u00e2\u0f16\13"+
		"\u00e2\3\u00e2\3\u00e2\5\u00e2\u0f1a\n\u00e2\3\u00e3\3\u00e3\5\u00e3\u0f1e"+
		"\n\u00e3\3\u00e3\3\u00e3\5\u00e3\u0f22\n\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\7\u00e3\u0f28\n\u00e3\f\u00e3\16\u00e3\u0f2b\13\u00e3\3\u00e3"+
		"\3\u00e3\5\u00e3\u0f2f\n\u00e3\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0f34\n"+
		"\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7"+
		"\5\u00e7\u0f3e\n\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0f43\n\u00e7\3"+
		"\u00e8\3\u00e8\5\u00e8\u0f47\n\u00e8\3\u00e8\3\u00e8\5\u00e8\u0f4b\n\u00e8"+
		"\3\u00e9\3\u00e9\5\u00e9\u0f4f\n\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ee"+
		"\3\u00ee\5\u00ee\u0f68\n\u00ee\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00ef"+
		"\3\u00ef\7\u00ef\u0f70\n\u00ef\f\u00ef\16\u00ef\u0f73\13\u00ef\3\u00ef"+
		"\3\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0f82\n\u00f0\5\u00f0\u0f84\n\u00f0\3"+
		"\u00f0\7\u00f0\u0f87\n\u00f0\f\u00f0\16\u00f0\u0f8a\13\u00f0\3\u00f0\3"+
		"\u00f0\3\u00f0\3\u00f0\7\u00f0\u0f90\n\u00f0\f\u00f0\16\u00f0\u0f93\13"+
		"\u00f0\3\u00f0\3\u00f0\5\u00f0\u0f97\n\u00f0\3\u00f1\3\u00f1\3\u00f1\5"+
		"\u00f1\u0f9c\n\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0fa1\n\u00f1\3\u00f2"+
		"\3\u00f2\3\u00f2\7\u00f2\u0fa6\n\u00f2\f\u00f2\16\u00f2\u0fa9\13\u00f2"+
		"\3\u00f3\5\u00f3\u0fac\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u0fb0\n\u00f3\3"+
		"\u00f3\3\u00f3\3\u00f3\5\u00f3\u0fb5\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3"+
		"\u00f3\5\u00f3\u0fbb\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0fc1"+
		"\n\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0fc6\n\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\5\u00f3\u0fcb\n\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0fd0\n"+
		"\u00f3\3\u00f3\5\u00f3\u0fd3\n\u00f3\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u0fd8"+
		"\n\u00f4\f\u00f4\16\u00f4\u0fdb\13\u00f4\3\u00f5\5\u00f5\u0fde\n\u00f5"+
		"\3\u00f6\3\u00f6\5\u00f6\u0fe2\n\u00f6\3\u00f7\3\u00f7\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0fec\n\u00f8\5\u00f8\u0fee\n"+
		"\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\7\u00f9\u0ff4\n\u00f9\f\u00f9\16"+
		"\u00f9\u0ff7\13\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\7\u00f9\u0fff\n\u00f9\f\u00f9\16\u00f9\u1002\13\u00f9\5\u00f9\u1004\n"+
		"\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\7\u00f9\u100a\n\u00f9\f\u00f9\16"+
		"\u00f9\u100d\13\u00f9\5\u00f9\u100f\n\u00f9\5\u00f9\u1011\n\u00f9\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u1017\n\u00fa\3\u00fb\3\u00fb\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1029\n\u00fc\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u1030\n\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd"+
		"\u103d\n\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u1042\n\u00fd\3\u00fe\3"+
		"\u00fe\3\u00fe\3\u00fe\3\u00ff\3\u00ff\5\u00ff\u104a\n\u00ff\3\u0100\3"+
		"\u0100\5\u0100\u104e\n\u0100\3\u0100\3\u0100\3\u0101\3\u0101\5\u0101\u1054"+
		"\n\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\5\u0102\u105f\n\u0102\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104"+
		"\5\u0104\u1066\n\u0104\3\u0105\3\u0105\3\u0106\3\u0106\3\u0107\3\u0107"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u1072\n\u0108\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\5\u0109\u1079\n\u0109\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\5\u010a\u1081\n\u010a\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\5\u010b\u1089\n\u010b\3\u010b\5\u010b\u108c\n"+
		"\u010b\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u1092\n\u010c\3\u010d\3"+
		"\u010d\5\u010d\u1096\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3"+
		"\u010d\3\u010e\3\u010e\5\u010e\u10a0\n\u010e\3\u010e\3\u010e\3\u010e\5"+
		"\u010e\u10a5\n\u010e\7\u010e\u10a7\n\u010e\f\u010e\16\u010e\u10aa\13\u010e"+
		"\3\u010f\3\u010f\5\u010f\u10ae\n\u010f\3\u010f\3\u010f\5\u010f\u10b2\n"+
		"\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\5\u010f\u10e9\n\u010f\3\u0110\5\u0110\u10ec\n\u0110\3\u0110\3\u0110\3"+
		"\u0111\3\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\5\u0112\u10f9\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113"+
		"\u1100\n\u0113\3\u0113\3\u0113\5\u0113\u1104\n\u0113\3\u0113\3\u0113\3"+
		"\u0113\5\u0113\u1109\n\u0113\7\u0113\u110b\n\u0113\f\u0113\16\u0113\u110e"+
		"\13\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\7\u0113\u1115\n\u0113"+
		"\f\u0113\16\u0113\u1118\13\u0113\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113"+
		"\u111e\n\u0113\3\u0113\7\u0113\u1121\n\u0113\f\u0113\16\u0113\u1124\13"+
		"\u0113\5\u0113\u1126\n\u0113\5\u0113\u1128\n\u0113\3\u0113\3\u0113\3\u0113"+
		"\7\u0113\u112d\n\u0113\f\u0113\16\u0113\u1130\13\u0113\5\u0113\u1132\n"+
		"\u0113\3\u0113\3\u0113\7\u0113\u1136\n\u0113\f\u0113\16\u0113\u1139\13"+
		"\u0113\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u113f\n\u0114\3\u0114\3"+
		"\u0114\5\u0114\u1143\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1148\n\u0114"+
		"\7\u0114\u114a\n\u0114\f\u0114\16\u0114\u114d\13\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\5\u0114\u1153\n\u0114\3\u0114\7\u0114\u1156\n\u0114\f"+
		"\u0114\16\u0114\u1159\13\u0114\5\u0114\u115b\n\u0114\5\u0114\u115d\n\u0114"+
		"\3\u0114\3\u0114\3\u0114\7\u0114\u1162\n\u0114\f\u0114\16\u0114\u1165"+
		"\13\u0114\5\u0114\u1167\n\u0114\3\u0114\3\u0114\7\u0114\u116b\n\u0114"+
		"\f\u0114\16\u0114\u116e\13\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114"+
		"\u1174\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\5\u0114\u117e\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\7\u0114\u1188\n\u0114\f\u0114\16\u0114\u118b"+
		"\13\u0114\5\u0114\u118d\n\u0114\5\u0114\u118f\n\u0114\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\5\u0115\u1195\n\u0115\3\u0115\3\u0115\3\u0115\7\u0115"+
		"\u119a\n\u0115\f\u0115\16\u0115\u119d\13\u0115\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\5\u0116\u11a4\n\u0116\3\u0116\3\u0116\3\u0116\7\u0116"+
		"\u11a9\n\u0116\f\u0116\16\u0116\u11ac\13\u0116\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\5\u0117\u11b2\n\u0117\3\u0117\3\u0117\3\u0117\7\u0117\u11b7\n"+
		"\u0117\f\u0117\16\u0117\u11ba\13\u0117\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\7\u0118\u11c6\n\u0118"+
		"\f\u0118\16\u0118\u11c9\13\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\7\u0119\u11d3\n\u0119\f\u0119\16\u0119\u11d6"+
		"\13\u0119\5\u0119\u11d8\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\7\u0119"+
		"\u11de\n\u0119\f\u0119\16\u0119\u11e1\13\u0119\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\7\u011a\u11ed"+
		"\n\u011a\f\u011a\16\u011a\u11f0\13\u011a\3\u011a\3\u011a\3\u011a\7\u011a"+
		"\u11f5\n\u011a\f\u011a\16\u011a\u11f8\13\u011a\5\u011a\u11fa\n\u011a\3"+
		"\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u1200\n\u011b\3\u011b\3\u011b\3"+
		"\u011b\5\u011b\u1205\n\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u120a\n\u011b"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1210\n\u011c\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011e\3\u011e\3\u011e\7\u011e\u1219\n\u011e\f\u011e"+
		"\16\u011e\u121c\13\u011e\3\u011f\3\u011f\3\u011f\7\u011f\u1221\n\u011f"+
		"\f\u011f\16\u011f\u1224\13\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1231\n\u0120"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u1238\n\u0121\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u123f\n\u0122\3\u0122\3\u0122"+
		"\5\u0122\u1243\n\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1248\n\u0122\3"+
		"\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u1251\n"+
		"\u0123\3\u0123\3\u0123\5\u0123\u1255\n\u0123\3\u0123\3\u0123\3\u0123\5"+
		"\u0123\u125a\n\u0123\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u1260\n\u0124"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1269"+
		"\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\5\u0125\u1274\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125"+
		"\u127a\n\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\5\u0126\u1284\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\5\u0127\u128e\n\u0127\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\5\u0128\u1294\n\u0128\3\u0129\3\u0129\3\u0129\3\u012a\3\u012a"+
		"\3\u012a\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u12a0\n\u012b\3\u012c"+
		"\3\u012c\5\u012c\u12a4\n\u012c\3\u012c\5\u012c\u12a7\n\u012c\3\u012c\3"+
		"\u012c\5\u012c\u12ab\n\u012c\3\u012c\3\u012c\5\u012c\u12af\n\u012c\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\5\u012d\u12b5\n\u012d\3\u012d\3\u012d\5\u012d"+
		"\u12b9\n\u012d\3\u012e\3\u012e\5\u012e\u12bd\n\u012e\3\u012e\5\u012e\u12c0"+
		"\n\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u12c5\n\u012e\3\u012e\3\u012e"+
		"\5\u012e\u12c9\n\u012e\3\u012f\3\u012f\5\u012f\u12cd\n\u012f\3\u012f\3"+
		"\u012f\3\u012f\5\u012f\u12d2\n\u012f\3\u012f\5\u012f\u12d5\n\u012f\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132"+
		"\3\u0133\3\u0133\3\u0133\3\u0134\3\u0134\3\u0134\3\u0135\3\u0135\3\u0135"+
		"\3\u0136\3\u0136\3\u0136\3\u0137\3\u0137\5\u0137\u12ef\n\u0137\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\5\u0138\u12fd\n\u0138\3\u0139\3\u0139\5\u0139\u1301\n"+
		"\u0139\3\u013a\3\u013a\3\u013a\3\u013a\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\3\u013b\5\u013b\u130c\n\u013b\3\u013b\3\u013b\5\u013b\u1310\n\u013b\3"+
		"\u013b\3\u013b\3\u013b\5\u013b\u1315\n\u013b\3\u013b\5\u013b\u1318\n\u013b"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u131e\n\u013c\3\u013d\3\u013d"+
		"\3\u013d\5\u013d\u1323\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\5\u013e\u132b\n\u013e\3\u013e\3\u013e\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0141\3\u0141"+
		"\3\u0141\3\u0141\3\u0141\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0146\3\u0146\5\u0146\u1354"+
		"\n\u0146\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147"+
		"\u135d\n\u0147\3\u0147\5\u0147\u1360\n\u0147\3\u0147\3\u0147\3\u0147\3"+
		"\u0147\3\u0147\5\u0147\u1367\n\u0147\3\u0148\3\u0148\3\u0148\5\u0148\u136c"+
		"\n\u0148\3\u0148\5\u0148\u136f\n\u0148\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u137a\n\u014a\3\u014b"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1381\n\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\6\u014b\u1387\n\u014b\r\u014b\16\u014b\u1388\5\u014b"+
		"\u138b\n\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\5\u014d\u1395\n\u014d\3\u014d\5\u014d\u1398\n\u014d\3\u014e\3"+
		"\u014e\3\u014e\3\u014f\3\u014f\3\u014f\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0152\3\u0152\5\u0152"+
		"\u13ac\n\u0152\3\u0152\3\u0152\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\7\u0153\u13b5\n\u0153\f\u0153\16\u0153\u13b8\13\u0153\5\u0153\u13ba\n"+
		"\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u13bf\n\u0153\3\u0153\3\u0153\3"+
		"\u0153\3\u0153\5\u0153\u13c5\n\u0153\3\u0154\3\u0154\3\u0154\3\u0155\3"+
		"\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u13cf\n\u0155\3\u0155\3\u0155\5"+
		"\u0155\u13d3\n\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u13d8\n\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0158\3\u0158"+
		"\3\u0158\3\u0158\5\u0158\u13ef\n\u0158\3\u0159\3\u0159\3\u0159\5\u0159"+
		"\u13f4\n\u0159\3\u0159\5\u0159\u13f7\n\u0159\3\u015a\3\u015a\5\u015a\u13fb"+
		"\n\u015a\3\u015a\3\u015a\3\u015a\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\5\u015b\u1405\n\u015b\3\u015b\5\u015b\u1408\n\u015b\3\u015b\3\u015b\3"+
		"\u015b\3\u015b\3\u015b\5\u015b\u140f\n\u015b\3\u015c\3\u015c\3\u015c\3"+
		"\u015c\5\u015c\u1415\n\u015c\3\u015c\3\u015c\5\u015c\u1419\n\u015c\3\u015d"+
		"\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u1420\n\u015d\3\u015d\5\u015d"+
		"\u1423\n\u015d\3\u015e\3\u015e\3\u015e\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\5\u015f\u142c\n\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u143b"+
		"\n\u015f\3\u015f\3\u015f\5\u015f\u143f\n\u015f\3\u015f\5\u015f\u1442\n"+
		"\u015f\5\u015f\u1444\n\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3"+
		"\u0160\3\u0160\3\u0160\3\u0160\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\7\u0161\u1454\n\u0161\f\u0161\16\u0161\u1457\13\u0161\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\7\u0163\u1464\n\u0163\f\u0163\16\u0163\u1467\13\u0163\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0165\3\u0165\5\u0165\u146f\n\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u1482\n\u0165"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\3\u0167\3\u0167\5\u0167\u1490\n\u0167\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0169\3\u0169\5\u0169\u1499\n\u0169\3\u0169\3\u0169"+
		"\3\u0169\3\u016a\3\u016a\5\u016a\u14a0\n\u016a\3\u016a\3\u016a\3\u016a"+
		"\5\u016a\u14a5\n\u016a\3\u016a\5\u016a\u14a8\n\u016a\3\u016a\5\u016a\u14ab"+
		"\n\u016a\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u14b3"+
		"\n\u016b\3\u016b\3\u016b\3\u016b\7\u016b\u14b8\n\u016b\f\u016b\16\u016b"+
		"\u14bb\13\u016b\5\u016b\u14bd\n\u016b\3\u016b\3\u016b\5\u016b\u14c1\n"+
		"\u016b\3\u016b\5\u016b\u14c4\n\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u14c9"+
		"\n\u016b\5\u016b\u14cb\n\u016b\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c"+
		"\u14d1\n\u016c\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\5\u016d\u14dc\n\u016d\3\u016d\3\u016d\3\u016d\7\u016d"+
		"\u14e1\n\u016d\f\u016d\16\u016d\u14e4\13\u016d\5\u016d\u14e6\n\u016d\3"+
		"\u016d\3\u016d\5\u016d\u14ea\n\u016d\3\u016d\5\u016d\u14ed\n\u016d\3\u016d"+
		"\5\u016d\u14f0\n\u016d\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e"+
		"\u14f7\n\u016e\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f"+
		"\3\u016f\7\u016f\u1501\n\u016f\f\u016f\16\u016f\u1504\13\u016f\5\u016f"+
		"\u1506\n\u016f\3\u0170\3\u0170\3\u0170\3\u0171\3\u0171\3\u0171\3\u0171"+
		"\3\u0171\7\u0171\u1510\n\u0171\f\u0171\16\u0171\u1513\13\u0171\3\u0171"+
		"\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u151b\n\u0171\3\u0171"+
		"\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\5\u0172"+
		"\u1526\n\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\7\u0172\u152d\n"+
		"\u0172\f\u0172\16\u0172\u1530\13\u0172\3\u0172\3\u0172\5\u0172\u1534\n"+
		"\u0172\3\u0173\3\u0173\3\u0173\7\u0173\u1539\n\u0173\f\u0173\16\u0173"+
		"\u153c\13\u0173\3\u0173\5\u0173\u153f\n\u0173\3\u0174\3\u0174\5\u0174"+
		"\u1543\n\u0174\3\u0174\3\u0174\3\u0174\7\u0174\u1548\n\u0174\f\u0174\16"+
		"\u0174\u154b\13\u0174\3\u0174\5\u0174\u154e\n\u0174\3\u0175\3\u0175\3"+
		"\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u1561\n\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u1567\n\u0175\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\7\u0176\u156e\n\u0176\f\u0176\16\u0176\u1571"+
		"\13\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\7\u0176\u157b\n\u0176\f\u0176\16\u0176\u157e\13\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\7\u0176\u1588\n\u0176"+
		"\f\u0176\16\u0176\u158b\13\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u1590"+
		"\n\u0176\3\u0177\3\u0177\5\u0177\u1594\n\u0177\3\u0177\6\u0177\u1597\n"+
		"\u0177\r\u0177\16\u0177\u1598\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\3\u0178\7\u0178\u15a2\n\u0178\f\u0178\16\u0178\u15a5\13\u0178"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\7\u0179\u15ab\n\u0179\f\u0179\16\u0179"+
		"\u15ae\13\u0179\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u15b4\n\u017a"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\5\u017b\u15ba\n\u017b\3\u017b\3\u017b"+
		"\3\u017c\3\u017c\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\5\u017e\u15c9\n\u017e\6\u017e\u15cb\n\u017e\r\u017e\16"+
		"\u017e\u15cc\3\u017e\3\u017e\3\u017e\5\u017e\u15d2\n\u017e\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\7\u017f\u15d8\n\u017f\f\u017f\16\u017f\u15db\13\u017f"+
		"\3\u017f\7\u017f\u15de\n\u017f\f\u017f\16\u017f\u15e1\13\u017f\3\u017f"+
		"\7\u017f\u15e4\n\u017f\f\u017f\16\u017f\u15e7\13\u017f\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\7\u0180\u15ed\n\u0180\f\u0180\16\u0180\u15f0\13\u0180"+
		"\3\u0181\7\u0181\u15f3\n\u0181\f\u0181\16\u0181\u15f6\13\u0181\3\u0182"+
		"\3\u0182\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u160f\n\u0183\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\5\u0184\u161d\n\u0184\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\2\6\u00e0\u00e6\u00ec\u00ee\u0186\2\4\6\b\n\f\16\20\22\24\26\30\32\34"+
		"\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea"+
		"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202"+
		"\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a"+
		"\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232"+
		"\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a"+
		"\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262"+
		"\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a"+
		"\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292"+
		"\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa"+
		"\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2"+
		"\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da"+
		"\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2"+
		"\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\2W"+
		"\4\2\u0116\u0116\u0168\u0169\4\2JJ\u00c6\u00c6\4\2\u0116\u0116\u0169\u0169"+
		"\5\2\u00a6\u00a6\u00c8\u00c9\u01cc\u01cc\4\2\u00a6\u00a6\u00c8\u00c8\4"+
		"\2\u0169\u0169\u01d5\u01d5\4\2\u00c3\u00c3\u012c\u012c\3\2\u00bf\u00c0"+
		"\4\2\u00d8\u00d8\u01d7\u01d7\4\2MMoo\4\2\u016c\u016c\u016e\u016e\5\2M"+
		"Moo\u00c5\u00c5\5\2\u00b7\u00b7\u0127\u0127\u012c\u012c\4\2==BB\4\2WW"+
		"[[\3\2YZ\3\2\u0084\u0086\3\2jkT\2\65\65CCHHppy~\u0084\u0086\u0089\u0096"+
		"\u0098\u009a\u009c\u009c\u009e\u009f\u00a2\u00a7\u00ad\u00ad\u00bd\u00c2"+
		"\u00c4\u00c4\u00c6\u00cb\u00d2\u00d6\u00d9\u00d9\u00db\u00db\u00de\u00df"+
		"\u00e1\u00e1\u00e3\u00e4\u00e6\u00e6\u00e9\u00ea\u00ec\u00ec\u00ee\u00f2"+
		"\u00f5\u00f7\u00f9\u00fa\u00fe\u00ff\u0101\u0101\u0104\u0105\u0107\u010b"+
		"\u010d\u0112\u0115\u0115\u0118\u0119\u011b\u011e\u0120\u0120\u0122\u0122"+
		"\u0124\u0126\u0129\u012a\u012d\u012d\u0131\u0131\u0135\u0136\u013c\u0143"+
		"\u0145\u0145\u0147\u0147\u0149\u014a\u014c\u014d\u0151\u0151\u0154\u0154"+
		"\u0156\u0158\u015b\u015c\u015e\u0167\u016a\u016c\u016e\u016e\u0170\u0172"+
		"\u0174\u0174\u0179\u017a\u017e\u018d\u018f\u0190\u0192\u0192\u01a3\u01a9"+
		"\u01ac\u01b2\u01b4\u01b5\u01b8\u01b9\u01bc\u01d3\u01d5\u01d5\u01dd\u01dd"+
		"\u01df\u01df\u01e1\u01e1\u01e9\u01e9\u01ef\u01ef\u01f5\u01f5\u01fa\u01fa"+
		"\u01fe\u01ff\u0202\u0203\u0205\u0205\u020c\u020c\u0210\u021b\u021d\u0220"+
		"\u0222\u0226\u0228\u022a\u02b2\u02be\6\2\u0129\u0129\u013f\u013f\u0154"+
		"\u0154\u0181\u0181\3\2\u02bf\u02c0\4\2\u00ca\u00ca\u01e4\u01e4\3\2/\61"+
		"\3\2\u01d1\u01d2\4\2\3\4ef\4\2\5\5hh\4\2ik\u00f0\u00f0\3\2op\3\2\27\34"+
		"\3\2\u00d0\u00d1\5\2\5\6\16\17\u00da\u00da\6\2\u0092\u0096\u0165\u0165"+
		"\u0182\u0184\u0186\u018d\4\2\u00d8\u00d8\u0144\u0144\4\2RR\u00e2\u00e2"+
		"\5\2\u00e5\u00e5\u0103\u0103\u0130\u0130\3\2uv\4\2\u0089\u0091\u0197\u01a1"+
		"\3\2\u00e8\u00e9\3\2\u0080\u0081\5\2\u0097\u0097\u0114\u0114\u012e\u012e"+
		"\6\2\u0097\u0097\u0121\u0121\u0136\u0136\u0155\u0155\4\2\66\66\u00bb\u00bb"+
		"\3\2\u01bc\u01be\4\2\u009f\u009f\u01b9\u01b9\3\2\u00a2\u00a3\4\2\u00f3"+
		"\u00f3\u0150\u0150\4\2\64\6499\5\2\u0097\u0097\u011a\u011a\u0125\u0125"+
		"\5\2\u0097\u0097\u0119\u0119\u0135\u0135\4\2\u00e0\u00e0\u00ed\u00ed\3"+
		"\2\60\61\4\2\u0128\u0128\u0159\u0159\4\2\u0104\u0104\u012a\u012a\3\2\u015b"+
		"\u015c\5\2@@\u0128\u0128\u0159\u0159\6\2\u0097\u0097\u0114\u0114\u012e"+
		"\u012e\u015d\u015d\3\2\u0099\u009a\4\2\u0118\u0118\u012d\u012d\4\2KK\u00d9"+
		"\u00d9\4\2==\u0115\u0115\4\2\u00c8\u00c9\u00f7\u00f7\4\2\u0097\u0097\u02c1"+
		"\u02c1\7\2\u0097\u0097\u010e\u010f\u011a\u011a\u0125\u0125\u0147\u0147"+
		"\4\2^^dd\3\2\u0138\u0139\4\2nn\u01ba\u01bb\5\2__\u00f1\u00f1\u02c1\u02c1"+
		"\4\2SSdd\5\2;;EEGG\4\2^^tt\4\2\u0097\u0097\u0213\u0213\4\2vv\u00b8\u00b8"+
		"\4\2\u00ba\u00ba\u00bc\u00bc\5\2==\u00c1\u00c1\u012f\u012f\4\2SSnn\4\2"+
		"\u00da\u00da\u01a4\u01a4\4\2\u00c2\u00c2\u01e6\u01e6\4\2\u0129\u0129\u0154"+
		"\u0154\4\2\u00aa\u00ac\u0200\u0200\4\2\u00a3\u00a3\u0206\u0206\4\2\u0143"+
		"\u0143\u0163\u0163\4\2\u00d3\u00d3\u020f\u020f\4\2\u0111\u0111\u0162\u0162"+
		"\3\2\u02b2\u02b3\3\2\u02b4\u02b5\2\u1955\2\u0337\3\2\2\2\4\u033c\3\2\2"+
		"\2\6\u034e\3\2\2\2\b\u0354\3\2\2\2\n\u0360\3\2\2\2\f\u0364\3\2\2\2\16"+
		"\u0370\3\2\2\2\20\u0380\3\2\2\2\22\u0382\3\2\2\2\24\u0390\3\2\2\2\26\u0395"+
		"\3\2\2\2\30\u0399\3\2\2\2\32\u03af\3\2\2\2\34\u03b4\3\2\2\2\36\u03b6\3"+
		"\2\2\2 \u03b9\3\2\2\2\"\u03c3\3\2\2\2$\u03cb\3\2\2\2&\u03df\3\2\2\2(\u03e1"+
		"\3\2\2\2*\u03f0\3\2\2\2,\u03f4\3\2\2\2.\u0403\3\2\2\2\60\u040d\3\2\2\2"+
		"\62\u040f\3\2\2\2\64\u0418\3\2\2\2\66\u042c\3\2\2\28\u0438\3\2\2\2:\u043c"+
		"\3\2\2\2<\u0444\3\2\2\2>\u048d\3\2\2\2@\u04c0\3\2\2\2B\u04cc\3\2\2\2D"+
		"\u04d3\3\2\2\2F\u04de\3\2\2\2H\u0509\3\2\2\2J\u050b\3\2\2\2L\u050f\3\2"+
		"\2\2N\u0523\3\2\2\2P\u0527\3\2\2\2R\u0529\3\2\2\2T\u052b\3\2\2\2V\u052e"+
		"\3\2\2\2X\u0531\3\2\2\2Z\u053f\3\2\2\2\\\u0541\3\2\2\2^\u0561\3\2\2\2"+
		"`\u0563\3\2\2\2b\u056f\3\2\2\2d\u0577\3\2\2\2f\u05a9\3\2\2\2h\u05af\3"+
		"\2\2\2j\u05b1\3\2\2\2l\u05b4\3\2\2\2n\u05c2\3\2\2\2p\u05c5\3\2\2\2r\u05d4"+
		"\3\2\2\2t\u05d8\3\2\2\2v\u05da\3\2\2\2x\u05e3\3\2\2\2z\u05e9\3\2\2\2|"+
		"\u05f3\3\2\2\2~\u0601\3\2\2\2\u0080\u0627\3\2\2\2\u0082\u062f\3\2\2\2"+
		"\u0084\u0631\3\2\2\2\u0086\u063a\3\2\2\2\u0088\u063d\3\2\2\2\u008a\u0644"+
		"\3\2\2\2\u008c\u064f\3\2\2\2\u008e\u0652\3\2\2\2\u0090\u0659\3\2\2\2\u0092"+
		"\u065f\3\2\2\2\u0094\u0661\3\2\2\2\u0096\u0663\3\2\2\2\u0098\u0665\3\2"+
		"\2\2\u009a\u0669\3\2\2\2\u009c\u066b\3\2\2\2\u009e\u0671\3\2\2\2\u00a0"+
		"\u067b\3\2\2\2\u00a2\u0680\3\2\2\2\u00a4\u0687\3\2\2\2\u00a6\u068b\3\2"+
		"\2\2\u00a8\u0692\3\2\2\2\u00aa\u069a\3\2\2\2\u00ac\u069e\3\2\2\2\u00ae"+
		"\u06a2\3\2\2\2\u00b0\u06ab\3\2\2\2\u00b2\u06b4\3\2\2\2\u00b4\u06b6\3\2"+
		"\2\2\u00b6\u06b8\3\2\2\2\u00b8\u06bb\3\2\2\2\u00ba\u06c9\3\2\2\2\u00bc"+
		"\u06d6\3\2\2\2\u00be\u06d8\3\2\2\2\u00c0\u06da\3\2\2\2\u00c2\u06dc\3\2"+
		"\2\2\u00c4\u06de\3\2\2\2\u00c6\u06e0\3\2\2\2\u00c8\u06e2\3\2\2\2\u00ca"+
		"\u06e8\3\2\2\2\u00cc\u06ea\3\2\2\2\u00ce\u06ec\3\2\2\2\u00d0\u06f3\3\2"+
		"\2\2\u00d2\u06f5\3\2\2\2\u00d4\u06f7\3\2\2\2\u00d6\u06f9\3\2\2\2\u00d8"+
		"\u06fd\3\2\2\2\u00da\u06ff\3\2\2\2\u00dc\u0701\3\2\2\2\u00de\u0703\3\2"+
		"\2\2\u00e0\u070f\3\2\2\2\u00e2\u071d\3\2\2\2\u00e4\u071f\3\2\2\2\u00e6"+
		"\u0721\3\2\2\2\u00e8\u073b\3\2\2\2\u00ea\u0774\3\2\2\2\u00ec\u0776\3\2"+
		"\2\2\u00ee\u07ca\3\2\2\2\u00f0\u07dd\3\2\2\2\u00f2\u07df\3\2\2\2\u00f4"+
		"\u07f3\3\2\2\2\u00f6\u07f5\3\2\2\2\u00f8\u07f7\3\2\2\2\u00fa\u0800\3\2"+
		"\2\2\u00fc\u080b\3\2\2\2\u00fe\u0815\3\2\2\2\u0100\u0826\3\2\2\2\u0102"+
		"\u0828\3\2\2\2\u0104\u082a\3\2\2\2\u0106\u083a\3\2\2\2\u0108\u083c\3\2"+
		"\2\2\u010a\u0855\3\2\2\2\u010c\u0862\3\2\2\2\u010e\u0877\3\2\2\2\u0110"+
		"\u0879\3\2\2\2\u0112\u0896\3\2\2\2\u0114\u0898\3\2\2\2\u0116\u089f\3\2"+
		"\2\2\u0118\u08af\3\2\2\2\u011a\u08b7\3\2\2\2\u011c\u08bc\3\2\2\2\u011e"+
		"\u08c8\3\2\2\2\u0120\u08d6\3\2\2\2\u0122\u08dd\3\2\2\2\u0124\u0976\3\2"+
		"\2\2\u0126\u0978\3\2\2\2\u0128\u0990\3\2\2\2\u012a\u0992\3\2\2\2\u012c"+
		"\u09a0\3\2\2\2\u012e\u09a5\3\2\2\2\u0130\u09a8\3\2\2\2\u0132\u09ac\3\2"+
		"\2\2\u0134\u09ae\3\2\2\2\u0136\u09bb\3\2\2\2\u0138\u09d5\3\2\2\2\u013a"+
		"\u0a06\3\2\2\2\u013c\u0a08\3\2\2\2\u013e\u0a10\3\2\2\2\u0140\u0a1b\3\2"+
		"\2\2\u0142\u0a22\3\2\2\2\u0144\u0a2a\3\2\2\2\u0146\u0a2f\3\2\2\2\u0148"+
		"\u0a37\3\2\2\2\u014a\u0a42\3\2\2\2\u014c\u0a48\3\2\2\2\u014e\u0a4e\3\2"+
		"\2\2\u0150\u0a67\3\2\2\2\u0152\u0a6d\3\2\2\2\u0154\u0a89\3\2\2\2\u0156"+
		"\u0a97\3\2\2\2\u0158\u0ab8\3\2\2\2\u015a\u0aba\3\2\2\2\u015c\u0ac2\3\2"+
		"\2\2\u015e\u0ad6\3\2\2\2\u0160\u0ad8\3\2\2\2\u0162\u0afc\3\2\2\2\u0164"+
		"\u0b23\3\2\2\2\u0166\u0b2b\3\2\2\2\u0168\u0b4b\3\2\2\2\u016a\u0b54\3\2"+
		"\2\2\u016c\u0b5b\3\2\2\2\u016e\u0b75\3\2\2\2\u0170\u0b7e\3\2\2\2\u0172"+
		"\u0b86\3\2\2\2\u0174\u0b99\3\2\2\2\u0176\u0ba8\3\2\2\2\u0178\u0bb0\3\2"+
		"\2\2\u017a\u0bdb\3\2\2\2\u017c\u0c02\3\2\2\2\u017e\u0c13\3\2\2\2\u0180"+
		"\u0c2d\3\2\2\2\u0182\u0c6d\3\2\2\2\u0184\u0c81\3\2\2\2\u0186\u0c8b\3\2"+
		"\2\2\u0188\u0cbe\3\2\2\2\u018a\u0cd5\3\2\2\2\u018c\u0cdd\3\2\2\2\u018e"+
		"\u0cef\3\2\2\2\u0190\u0cf4\3\2\2\2\u0192\u0cf6\3\2\2\2\u0194\u0d05\3\2"+
		"\2\2\u0196\u0d07\3\2\2\2\u0198\u0d22\3\2\2\2\u019a\u0d2c\3\2\2\2\u019c"+
		"\u0d3c\3\2\2\2\u019e\u0d42\3\2\2\2\u01a0\u0d4c\3\2\2\2\u01a2\u0d67\3\2"+
		"\2\2\u01a4\u0d6a\3\2\2\2\u01a6\u0d7c\3\2\2\2\u01a8\u0d7f\3\2\2\2\u01aa"+
		"\u0d91\3\2\2\2\u01ac\u0da2\3\2\2\2\u01ae\u0da8\3\2\2\2\u01b0\u0daf\3\2"+
		"\2\2\u01b2\u0dbb\3\2\2\2\u01b4\u0dbf\3\2\2\2\u01b6\u0dd0\3\2\2\2\u01b8"+
		"\u0dd9\3\2\2\2\u01ba\u0de1\3\2\2\2\u01bc\u0de3\3\2\2\2\u01be\u0e8c\3\2"+
		"\2\2\u01c0\u0e8e\3\2\2\2\u01c2\u0f19\3\2\2\2\u01c4\u0f1b\3\2\2\2\u01c6"+
		"\u0f33\3\2\2\2\u01c8\u0f35\3\2\2\2\u01ca\u0f38\3\2\2\2\u01cc\u0f3b\3\2"+
		"\2\2\u01ce\u0f44\3\2\2\2\u01d0\u0f4c\3\2\2\2\u01d2\u0f52\3\2\2\2\u01d4"+
		"\u0f56\3\2\2\2\u01d6\u0f59\3\2\2\2\u01d8\u0f5f\3\2\2\2\u01da\u0f65\3\2"+
		"\2\2\u01dc\u0f6b\3\2\2\2\u01de\u0f76\3\2\2\2\u01e0\u0fa0\3\2\2\2\u01e2"+
		"\u0fa2\3\2\2\2\u01e4\u0fd2\3\2\2\2\u01e6\u0fd4\3\2\2\2\u01e8\u0fdd\3\2"+
		"\2\2\u01ea\u0fe1\3\2\2\2\u01ec\u0fe3\3\2\2\2\u01ee\u0fe5\3\2\2\2\u01f0"+
		"\u1010\3\2\2\2\u01f2\u1016\3\2\2\2\u01f4\u1018\3\2\2\2\u01f6\u1028\3\2"+
		"\2\2\u01f8\u1041\3\2\2\2\u01fa\u1043\3\2\2\2\u01fc\u1049\3\2\2\2\u01fe"+
		"\u104b\3\2\2\2\u0200\u1051\3\2\2\2\u0202\u105e\3\2\2\2\u0204\u1060\3\2"+
		"\2\2\u0206\u1065\3\2\2\2\u0208\u1067\3\2\2\2\u020a\u1069\3\2\2\2\u020c"+
		"\u106b\3\2\2\2\u020e\u106d\3\2\2\2\u0210\u1073\3\2\2\2\u0212\u107a\3\2"+
		"\2\2\u0214\u1082\3\2\2\2\u0216\u108d\3\2\2\2\u0218\u1093\3\2\2\2\u021a"+
		"\u109d\3\2\2\2\u021c\u10e8\3\2\2\2\u021e\u10eb\3\2\2\2\u0220\u10ef\3\2"+
		"\2\2\u0222\u10f8\3\2\2\2\u0224\u10fa\3\2\2\2\u0226\u118e\3\2\2\2\u0228"+
		"\u1190\3\2\2\2\u022a\u119e\3\2\2\2\u022c\u11ad\3\2\2\2\u022e\u11bb\3\2"+
		"\2\2\u0230\u11ca\3\2\2\2\u0232\u11e2\3\2\2\2\u0234\u11fb\3\2\2\2\u0236"+
		"\u120f\3\2\2\2\u0238\u1211\3\2\2\2\u023a\u1215\3\2\2\2\u023c\u121d\3\2"+
		"\2\2\u023e\u1225\3\2\2\2\u0240\u1237\3\2\2\2\u0242\u1239\3\2\2\2\u0244"+
		"\u1249\3\2\2\2\u0246\u125f\3\2\2\2\u0248\u1279\3\2\2\2\u024a\u1283\3\2"+
		"\2\2\u024c\u128d\3\2\2\2\u024e\u1293\3\2\2\2\u0250\u1295\3\2\2\2\u0252"+
		"\u1298\3\2\2\2\u0254\u129b\3\2\2\2\u0256\u12a1\3\2\2\2\u0258\u12b0\3\2"+
		"\2\2\u025a\u12ba\3\2\2\2\u025c\u12ca\3\2\2\2\u025e\u12d6\3\2\2\2\u0260"+
		"\u12db\3\2\2\2\u0262\u12dd\3\2\2\2\u0264\u12e0\3\2\2\2\u0266\u12e3\3\2"+
		"\2\2\u0268\u12e6\3\2\2\2\u026a\u12e9\3\2\2\2\u026c\u12ee\3\2\2\2\u026e"+
		"\u12fc\3\2\2\2\u0270\u12fe\3\2\2\2\u0272\u1302\3\2\2\2\u0274\u1306\3\2"+
		"\2\2\u0276\u1319\3\2\2\2\u0278\u131f\3\2\2\2\u027a\u1324\3\2\2\2\u027c"+
		"\u132e\3\2\2\2\u027e\u1333\3\2\2\2\u0280\u1338\3\2\2\2\u0282\u133d\3\2"+
		"\2\2\u0284\u1342\3\2\2\2\u0286\u1347\3\2\2\2\u0288\u134c\3\2\2\2\u028a"+
		"\u1351\3\2\2\2\u028c\u1357\3\2\2\2\u028e\u1368\3\2\2\2\u0290\u1370\3\2"+
		"\2\2\u0292\u1375\3\2\2\2\u0294\u137b\3\2\2\2\u0296\u138c\3\2\2\2\u0298"+
		"\u1390\3\2\2\2\u029a\u1399\3\2\2\2\u029c\u139c\3\2\2\2\u029e\u139f\3\2"+
		"\2\2\u02a0\u13a4\3\2\2\2\u02a2\u13a9\3\2\2\2\u02a4\u13af\3\2\2\2\u02a6"+
		"\u13c6\3\2\2\2\u02a8\u13c9\3\2\2\2\u02aa\u13df\3\2\2\2\u02ac\u13e3\3\2"+
		"\2\2\u02ae\u13ea\3\2\2\2\u02b0\u13f0\3\2\2\2\u02b2\u13f8\3\2\2\2\u02b4"+
		"\u13ff\3\2\2\2\u02b6\u1410\3\2\2\2\u02b8\u141a\3\2\2\2\u02ba\u1424\3\2"+
		"\2\2\u02bc\u1443\3\2\2\2\u02be\u1445\3\2\2\2\u02c0\u144e\3\2\2\2\u02c2"+
		"\u1458\3\2\2\2\u02c4\u145e\3\2\2\2\u02c6\u1468\3\2\2\2\u02c8\u146c\3\2"+
		"\2\2\u02ca\u1483\3\2\2\2\u02cc\u148f\3\2\2\2\u02ce\u1491\3\2\2\2\u02d0"+
		"\u1496\3\2\2\2\u02d2\u149d\3\2\2\2\u02d4\u14ac\3\2\2\2\u02d6\u14d0\3\2"+
		"\2\2\u02d8\u14d2\3\2\2\2\u02da\u14f1\3\2\2\2\u02dc\u14f8\3\2\2\2\u02de"+
		"\u1507\3\2\2\2\u02e0\u150a\3\2\2\2\u02e2\u151f\3\2\2\2\u02e4\u153e\3\2"+
		"\2\2\u02e6\u1540\3\2\2\2\u02e8\u1566\3\2\2\2\u02ea\u158f\3\2\2\2\u02ec"+
		"\u1591\3\2\2\2\u02ee\u159a\3\2\2\2\u02f0\u15a6\3\2\2\2\u02f2\u15b3\3\2"+
		"\2\2\u02f4\u15b5\3\2\2\2\u02f6\u15bd\3\2\2\2\u02f8\u15bf\3\2\2\2\u02fa"+
		"\u15c1\3\2\2\2\u02fc\u15d3\3\2\2\2\u02fe\u15e8\3\2\2\2\u0300\u15f4\3\2"+
		"\2\2\u0302\u15f7\3\2\2\2\u0304\u15f9\3\2\2\2\u0306\u161c\3\2\2\2\u0308"+
		"\u161e\3\2\2\2\u030a\u0338\5*\26\2\u030b\u0338\5\4\3\2\u030c\u0338\5\22"+
		"\n\2\u030d\u0338\5 \21\2\u030e\u0338\5\16\b\2\u030f\u0338\5\u0148\u00a5"+
		"\2\u0310\u0338\5\u014a\u00a6\2\u0311\u0338\5\u02d2\u016a\2\u0312\u0338"+
		"\5\u01da\u00ee\2\u0313\u0338\5\u014c\u00a7\2\u0314\u0338\5\u015a\u00ae"+
		"\2\u0315\u0338\5\u0150\u00a9\2\u0316\u0338\5\u0152\u00aa\2\u0317\u0338"+
		"\5\u014e\u00a8\2\u0318\u0338\5\u01fe\u0100\2\u0319\u0338\5\u0206\u0104"+
		"\2\u031a\u0338\5\u0200\u0101\2\u031b\u0338\5\u0208\u0105\2\u031c\u0338"+
		"\5\u020a\u0106\2\u031d\u0338\5\u020c\u0107\2\u031e\u0338\5\u020e\u0108"+
		"\2\u031f\u0338\5\u0210\u0109\2\u0320\u0338\5\u0224\u0113\2\u0321\u0338"+
		"\5\u0228\u0115\2\u0322\u0338\5\u0226\u0114\2\u0323\u0338\5\u022e\u0118"+
		"\2\u0324\u0338\5\u022a\u0116\2\u0325\u0338\5\u022c\u0117\2\u0326\u0338"+
		"\5\u0230\u0119\2\u0327\u0338\5\u0232\u011a\2\u0328\u0338\5\u0234\u011b"+
		"\2\u0329\u0338\5\u0250\u0129\2\u032a\u0338\5\u0252\u012a\2\u032b\u0338"+
		"\5\u0254\u012b\2\u032c\u0338\5\u0256\u012c\2\u032d\u0338\5\u0258\u012d"+
		"\2\u032e\u0338\5\u025a\u012e\2\u032f\u0338\5\u025c\u012f\2\u0330\u0338"+
		"\5\u025e\u0130\2\u0331\u0338\5\u0260\u0131\2\u0332\u0338\5\u0270\u0139"+
		"\2\u0333\u0338\5,\27\2\u0334\u0338\5\u02fa\u017e\2\u0335\u0338\5\u02fc"+
		"\u017f\2\u0336\u0338\5\u02fe\u0180\2\u0337\u030a\3\2\2\2\u0337\u030b\3"+
		"\2\2\2\u0337\u030c\3\2\2\2\u0337\u030d\3\2\2\2\u0337\u030e\3\2\2\2\u0337"+
		"\u030f\3\2\2\2\u0337\u0310\3\2\2\2\u0337\u0311\3\2\2\2\u0337\u0312\3\2"+
		"\2\2\u0337\u0313\3\2\2\2\u0337\u0314\3\2\2\2\u0337\u0315\3\2\2\2\u0337"+
		"\u0316\3\2\2\2\u0337\u0317\3\2\2\2\u0337\u0318\3\2\2\2\u0337\u0319\3\2"+
		"\2\2\u0337\u031a\3\2\2\2\u0337\u031b\3\2\2\2\u0337\u031c\3\2\2\2\u0337"+
		"\u031d\3\2\2\2\u0337\u031e\3\2\2\2\u0337\u031f\3\2\2\2\u0337\u0320\3\2"+
		"\2\2\u0337\u0321\3\2\2\2\u0337\u0322\3\2\2\2\u0337\u0323\3\2\2\2\u0337"+
		"\u0324\3\2\2\2\u0337\u0325\3\2\2\2\u0337\u0326\3\2\2\2\u0337\u0327\3\2"+
		"\2\2\u0337\u0328\3\2\2\2\u0337\u0329\3\2\2\2\u0337\u032a\3\2\2\2\u0337"+
		"\u032b\3\2\2\2\u0337\u032c\3\2\2\2\u0337\u032d\3\2\2\2\u0337\u032e\3\2"+
		"\2\2\u0337\u032f\3\2\2\2\u0337\u0330\3\2\2\2\u0337\u0331\3\2\2\2\u0337"+
		"\u0332\3\2\2\2\u0337\u0333\3\2\2\2\u0337\u0334\3\2\2\2\u0337\u0335\3\2"+
		"\2\2\u0337\u0336\3\2\2\2\u0338\u033a\3\2\2\2\u0339\u033b\7*\2\2\u033a"+
		"\u0339\3\2\2\2\u033a\u033b\3\2\2\2\u033b\3\3\2\2\2\u033c\u033d\7/\2\2"+
		"\u033d\u033f\5\6\4\2\u033e\u0340\7I\2\2\u033f\u033e\3\2\2\2\u033f\u0340"+
		"\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0343\5\u00a2R\2\u0342\u0344\5`\61"+
		"\2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0348\3\2\2\2\u0345\u0349"+
		"\5\b\5\2\u0346\u0349\5\30\r\2\u0347\u0349\5\n\6\2\u0348\u0345\3\2\2\2"+
		"\u0348\u0346\3\2\2\2\u0348\u0347\3\2\2\2\u0349\u034b\3\2\2\2\u034a\u034c"+
		"\5\f\7\2\u034b\u034a\3\2\2\2\u034b\u034c\3\2\2\2\u034c\5\3\2\2\2\u034d"+
		"\u034f\t\2\2\2\u034e\u034d\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0351\3\2"+
		"\2\2\u0350\u0352\7\u012c\2\2\u0351\u0350\3\2\2\2\u0351\u0352\3\2\2\2\u0352"+
		"\7\3\2\2\2\u0353\u0355\5\u00ba^\2\u0354\u0353\3\2\2\2\u0354\u0355\3\2"+
		"\2\2\u0355\u0356\3\2\2\2\u0356\u0357\t\3\2\2\u0357\u035c\5\32\16\2\u0358"+
		"\u0359\7$\2\2\u0359\u035b\5\32\16\2\u035a\u0358\3\2\2\2\u035b\u035e\3"+
		"\2\2\2\u035c\u035a\3\2\2\2\u035c\u035d\3\2\2\2\u035d\t\3\2\2\2\u035e\u035c"+
		"\3\2\2\2\u035f\u0361\5\u00ba^\2\u0360\u035f\3\2\2\2\u0360\u0361\3\2\2"+
		"\2\u0361\u0362\3\2\2\2\u0362\u0363\5*\26\2\u0363\13\3\2\2\2\u0364\u0365"+
		"\7_\2\2\u0365\u0366\7\u00c7\2\2\u0366\u0367\7B\2\2\u0367\u0368\7\60\2"+
		"\2\u0368\u036d\5\26\f\2\u0369\u036a\7$\2\2\u036a\u036c\5\26\f\2\u036b"+
		"\u0369\3\2\2\2\u036c\u036f\3\2\2\2\u036d\u036b\3\2\2\2\u036d\u036e\3\2"+
		"\2\2\u036e\r\3\2\2\2\u036f\u036d\3\2\2\2\u0370\u0372\7\u00c3\2\2\u0371"+
		"\u0373\5\20\t\2\u0372\u0371\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0375\3"+
		"\2\2\2\u0374\u0376\7I\2\2\u0375\u0374\3\2\2\2\u0375\u0376\3\2\2\2\u0376"+
		"\u0377\3\2\2\2\u0377\u0379\5\u00a2R\2\u0378\u037a\5`\61\2\u0379\u0378"+
		"\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037e\3\2\2\2\u037b\u037f\5\b\5\2\u037c"+
		"\u037f\5\30\r\2\u037d\u037f\5\n\6\2\u037e\u037b\3\2\2\2\u037e\u037c\3"+
		"\2\2\2\u037e\u037d\3\2\2\2\u037f\17\3\2\2\2\u0380\u0381\t\4\2\2\u0381"+
		"\21\3\2\2\2\u0382\u0383\7\60\2\2\u0383\u0384\5\24\13\2\u0384\u0385\5X"+
		"-\2\u0385\u0387\5\30\r\2\u0386\u0388\5j\66\2\u0387\u0386\3\2\2\2\u0387"+
		"\u0388\3\2\2\2\u0388\u038a\3\2\2\2\u0389\u038b\5\u0134\u009b\2\u038a\u0389"+
		"\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038d\3\2\2\2\u038c\u038e\5p9\2\u038d"+
		"\u038c\3\2\2\2\u038d\u038e\3\2\2\2\u038e\23\3\2\2\2\u038f\u0391\7\u0169"+
		"\2\2\u0390\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0393\3\2\2\2\u0392"+
		"\u0394\7\u012c\2\2\u0393\u0392\3\2\2\2\u0393\u0394\3\2\2\2\u0394\25\3"+
		"\2\2\2\u0395\u0396\5\u00a4S\2\u0396\u0397\7\27\2\2\u0397\u0398\5\34\17"+
		"\2\u0398\27\3\2\2\2\u0399\u039a\7:\2\2\u039a\u039f\5\26\f\2\u039b\u039c"+
		"\7$\2\2\u039c\u039e\5\26\f\2\u039d\u039b\3\2\2\2\u039e\u03a1\3\2\2\2\u039f"+
		"\u039d\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\31\3\2\2\2\u03a1\u039f\3\2\2"+
		"\2\u03a2\u03a3\7\36\2\2\u03a3\u03a8\5\34\17\2\u03a4\u03a5\7$\2\2\u03a5"+
		"\u03a7\5\34\17\2\u03a6\u03a4\3\2\2\2\u03a7\u03aa\3\2\2\2\u03a8\u03a6\3"+
		"\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03ab\3\2\2\2\u03aa\u03a8\3\2\2\2\u03ab"+
		"\u03ac\7\37\2\2\u03ac\u03b0\3\2\2\2\u03ad\u03ae\7\36\2\2\u03ae\u03b0\7"+
		"\37\2\2\u03af\u03a2\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\33\3\2\2\2\u03b1"+
		"\u03b5\5\u00e0q\2\u03b2\u03b5\7\u0097\2\2\u03b3\u03b5\5\36\20\2\u03b4"+
		"\u03b1\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b4\u03b3\3\2\2\2\u03b5\35\3\2\2"+
		"\2\u03b6\u03b7\7\u01a2\2\2\u03b7\u03b8\7\u02c0\2\2\u03b8\37\3\2\2\2\u03b9"+
		"\u03ba\7\61\2\2\u03ba\u03bd\5\"\22\2\u03bb\u03be\5$\23\2\u03bc\u03be\5"+
		"&\24\2\u03bd\u03bb\3\2\2\2\u03bd\u03bc\3\2\2\2\u03be\u03c0\3\2\2\2\u03bf"+
		"\u03c1\5j\66\2\u03c0\u03bf\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1!\3\2\2\2"+
		"\u03c2\u03c4\7\u0169\2\2\u03c3\u03c2\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4"+
		"\u03c6\3\2\2\2\u03c5\u03c7\7\u0143\2\2\u03c6\u03c5\3\2\2\2\u03c6\u03c7"+
		"\3\2\2\2\u03c7\u03c9\3\2\2\2\u03c8\u03ca\7\u012c\2\2\u03c9\u03c8\3\2\2"+
		"\2\u03c9\u03ca\3\2\2\2\u03ca#\3\2\2\2\u03cb\u03cc\7S\2\2\u03cc\u03d1\5"+
		"\u00a2R\2\u03cd\u03cf\7^\2\2\u03ce\u03cd\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf"+
		"\u03d0\3\2\2\2\u03d0\u03d2\5P)\2\u03d1\u03ce\3\2\2\2\u03d1\u03d2\3\2\2"+
		"\2\u03d2\u03d4\3\2\2\2\u03d3\u03d5\5`\61\2\u03d4\u03d3\3\2\2\2\u03d4\u03d5"+
		"\3\2\2\2\u03d5%\3\2\2\2\u03d6\u03d7\5(\25\2\u03d7\u03d8\7S\2\2\u03d8\u03d9"+
		"\5X-\2\u03d9\u03e0\3\2\2\2\u03da\u03db\7S\2\2\u03db\u03dc\5(\25\2\u03dc"+
		"\u03dd\7\\\2\2\u03dd\u03de\5X-\2\u03de\u03e0\3\2\2\2\u03df\u03d6\3\2\2"+
		"\2\u03df\u03da\3\2\2\2\u03e0\'\3\2\2\2\u03e1\u03e3\5\u00a2R\2\u03e2\u03e4"+
		"\7\24\2\2\u03e3\u03e2\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03ec\3\2\2\2"+
		"\u03e5\u03e6\7$\2\2\u03e6\u03e8\5\u00a2R\2\u03e7\u03e9\7\24\2\2\u03e8"+
		"\u03e7\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03eb\3\2\2\2\u03ea\u03e5\3\2"+
		"\2\2\u03eb\u03ee\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed"+
		")\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ef\u03f1\5@!\2\u03f0\u03ef\3\2\2\2\u03f0"+
		"\u03f1\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f3\5D#\2\u03f3+\3\2\2\2\u03f4"+
		"\u03f5\7\u009b\2\2\u03f5\u0401\5\u009aN\2\u03f6\u03f7\7\36\2\2\u03f7\u03fc"+
		"\5\u00e0q\2\u03f8\u03f9\7$\2\2\u03f9\u03fb\5\u00e0q\2\u03fa\u03f8\3\2"+
		"\2\2\u03fb\u03fe\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd"+
		"\u03ff\3\2\2\2\u03fe\u03fc\3\2\2\2\u03ff\u0400\7\37\2\2\u0400\u0402\3"+
		"\2\2\2\u0401\u03f6\3\2\2\2\u0401\u0402\3\2\2\2\u0402-\3\2\2\2\u0403\u0404"+
		"\7\u009e\2\2\u0404\u0407\5\u00e0q\2\u0405\u0406\7$\2\2\u0406\u0408\5\u00e0"+
		"q\2\u0407\u0405\3\2\2\2\u0407\u0408\3\2\2\2\u0408/\3\2\2\2\u0409\u040e"+
		"\5\62\32\2\u040a\u040e\5\64\33\2\u040b\u040e\5\66\34\2\u040c\u040e\58"+
		"\35\2\u040d\u0409\3\2\2\2\u040d\u040a\3\2\2\2\u040d\u040b\3\2\2\2\u040d"+
		"\u040c\3\2\2\2\u040e\61\3\2\2\2\u040f\u0410\7\u01cb\2\2\u0410\u0411\5"+
		"\u00a2R\2\u0411\u0416\7\u00a5\2\2\u0412\u0414\7^\2\2\u0413\u0412\3\2\2"+
		"\2\u0413\u0414\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0417\5\u009aN\2\u0416"+
		"\u0413\3\2\2\2\u0416\u0417\3\2\2\2\u0417\63\3\2\2\2\u0418\u0419\7\u01cb"+
		"\2\2\u0419\u041a\5\u00a2R\2\u041a\u041b\7\u00fb\2\2\u041b\u0422\5\u009a"+
		"N\2\u041c\u041d\5\u00e8u\2\u041d\u041e\7\36\2\2\u041e\u041f\5\u009aN\2"+
		"\u041f\u0420\7\37\2\2\u0420\u0423\3\2\2\2\u0421\u0423\t\5\2\2\u0422\u041c"+
		"\3\2\2\2\u0422\u0421\3\2\2\2\u0423\u0426\3\2\2\2\u0424\u0425\7]\2\2\u0425"+
		"\u0427\5\u00e0q\2\u0426\u0424\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u042a"+
		"\3\2\2\2\u0428\u0429\7x\2\2\u0429\u042b\5\u008aF\2\u042a\u0428\3\2\2\2"+
		"\u042a\u042b\3\2\2\2\u042b\65\3\2\2\2\u042c\u042d\7\u01cb\2\2\u042d\u042e"+
		"\5\u00a2R\2\u042e\u042f\7\u00fb\2\2\u042f\u0432\t\6\2\2\u0430\u0431\7"+
		"]\2\2\u0431\u0433\5\u00e0q\2\u0432\u0430\3\2\2\2\u0432\u0433\3\2\2\2\u0433"+
		"\u0436\3\2\2\2\u0434\u0435\7x\2\2\u0435\u0437\5\u008aF\2\u0436\u0434\3"+
		"\2\2\2\u0436\u0437\3\2\2\2\u0437\67\3\2\2\2\u0438\u0439\7\u01cb\2\2\u0439"+
		"\u043a\5\u00a2R\2\u043a\u043b\7\u00a4\2\2\u043b9\3\2\2\2\u043c\u043d\7"+
		"\u01d3\2\2\u043d\u043e\7;\2\2\u043e\u043f\7S\2\2\u043f\u0442\7\u02c0\2"+
		"\2\u0440\u0441\7$\2\2\u0441\u0443\7\u02c0\2\2\u0442\u0440\3\2\2\2\u0442"+
		"\u0443\3\2\2\2\u0443;\3\2\2\2\u0444\u0445\7\u01d4\2\2\u0445\u0447\7\u0115"+
		"\2\2\u0446\u0448\t\7\2\2\u0447\u0446\3\2\2\2\u0447\u0448\3\2\2\2\u0448"+
		"\u044a\3\2\2\2\u0449\u044b\7\u00a3\2\2\u044a\u0449\3\2\2\2\u044a\u044b"+
		"\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044d\7\u01d6\2\2\u044d\u044f\7\u02c0"+
		"\2\2\u044e\u0450\t\b\2\2\u044f\u044e\3\2\2\2\u044f\u0450\3\2\2\2\u0450"+
		"\u0451\3\2\2\2\u0451\u0452\7I\2\2\u0452\u0453\7;\2\2\u0453\u0460\5\u00a2"+
		"R\2\u0454\u0455\7\u00dd\2\2\u0455\u0456\7\36\2\2\u0456\u045b\5\u009aN"+
		"\2\u0457\u0458\7$\2\2\u0458\u045a\5\u009aN\2\u0459\u0457\3\2\2\2\u045a"+
		"\u045d\3\2\2\2\u045b\u0459\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045e\3\2"+
		"\2\2\u045d\u045b\3\2\2\2\u045e\u045f\7\37\2\2\u045f\u0461\3\2\2\2\u0460"+
		"\u0454\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0465\3\2\2\2\u0462\u0463\7\u0081"+
		"\2\2\u0463\u0464\7:\2\2\u0464\u0466\5\u009aN\2\u0465\u0462\3\2\2\2\u0465"+
		"\u0466\3\2\2\2\u0466\u046d\3\2\2\2\u0467\u0469\t\t\2\2\u0468\u046a\5~"+
		"@\2\u0469\u0468\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u0469\3\2\2\2\u046b"+
		"\u046c\3\2\2\2\u046c\u046e\3\2\2\2\u046d\u0467\3\2\2\2\u046d\u046e\3\2"+
		"\2\2\u046e\u0475\3\2\2\2\u046f\u0471\7\u01d7\2\2\u0470\u0472\5|?\2\u0471"+
		"\u0470\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0471\3\2\2\2\u0473\u0474\3\2"+
		"\2\2\u0474\u0476\3\2\2\2\u0475\u046f\3\2\2\2\u0475\u0476\3\2\2\2\u0476"+
		"\u047b\3\2\2\2\u0477\u0478\7\u012c\2\2\u0478\u0479\5\u008aF\2\u0479\u047a"+
		"\t\n\2\2\u047a\u047c\3\2\2\2\u047b\u0477\3\2\2\2\u047b\u047c\3\2\2\2\u047c"+
		"\u0488\3\2\2\2\u047d\u047e\7\36\2\2\u047e\u0483\5\u009aN\2\u047f\u0480"+
		"\7$\2\2\u0480\u0482\5\u009aN\2\u0481\u047f\3\2\2\2\u0482\u0485\3\2\2\2"+
		"\u0483\u0481\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486\3\2\2\2\u0485\u0483"+
		"\3\2\2\2\u0486\u0487\7\37\2\2\u0487\u0489\3\2\2\2\u0488\u047d\3\2\2\2"+
		"\u0488\u0489\3\2\2\2\u0489\u048b\3\2\2\2\u048a\u048c\5\30\r\2\u048b\u048a"+
		"\3\2\2\2\u048b\u048c\3\2\2\2\u048c=\3\2\2\2\u048d\u048e\7\u01d4\2\2\u048e"+
		"\u0490\7\u01dd\2\2\u048f\u0491\t\7\2\2\u0490\u048f\3\2\2\2\u0490\u0491"+
		"\3\2\2\2\u0491\u0493\3\2\2\2\u0492\u0494\7\u00a3\2\2\u0493\u0492\3\2\2"+
		"\2\u0493\u0494\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u0496\7\u01d6\2\2\u0496"+
		"\u0498\7\u02c0\2\2\u0497\u0499\t\b\2\2\u0498\u0497\3\2\2\2\u0498\u0499"+
		"\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049b\7I\2\2\u049b\u049c\7;\2\2\u049c"+
		"\u04a0\5\u00a2R\2\u049d\u049e\7\u0081\2\2\u049e\u049f\7:\2\2\u049f\u04a1"+
		"\5\u009aN\2\u04a0\u049d\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a8\3\2\2"+
		"\2\u04a2\u04a3\7\u00d8\2\2\u04a3\u04a4\7\u012b\2\2\u04a4\u04a5\7t\2\2"+
		"\u04a5\u04a6\7\33\2\2\u04a6\u04a7\7\u02c0\2\2\u04a7\u04a9\7\31\2\2\u04a8"+
		"\u04a2\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04ae\3\2\2\2\u04aa\u04ab\7\u012c"+
		"\2\2\u04ab\u04ac\5\u008aF\2\u04ac\u04ad\t\n\2\2\u04ad\u04af\3\2\2\2\u04ae"+
		"\u04aa\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04bb\3\2\2\2\u04b0\u04b1\7\36"+
		"\2\2\u04b1\u04b6\5\u009aN\2\u04b2\u04b3\7$\2\2\u04b3\u04b5\5\u009aN\2"+
		"\u04b4\u04b2\3\2\2\2\u04b5\u04b8\3\2\2\2\u04b6\u04b4\3\2\2\2\u04b6\u04b7"+
		"\3\2\2\2\u04b7\u04b9\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b9\u04ba\7\37\2\2"+
		"\u04ba\u04bc\3\2\2\2\u04bb\u04b0\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04be"+
		"\3\2\2\2\u04bd\u04bf\5\30\r\2\u04be\u04bd\3\2\2\2\u04be\u04bf\3\2\2\2"+
		"\u04bf?\3\2\2\2\u04c0\u04c2\7K\2\2\u04c1\u04c3\7\u0146\2\2\u04c2\u04c1"+
		"\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c9\5B\"\2\u04c5"+
		"\u04c6\7$\2\2\u04c6\u04c8\5B\"\2\u04c7\u04c5\3\2\2\2\u04c8\u04cb\3\2\2"+
		"\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2\2\2\u04caA\3\2\2\2\u04cb\u04c9"+
		"\3\2\2\2\u04cc\u04ce\5\u0144\u00a3\2\u04cd\u04cf\5\u00ba^\2\u04ce\u04cd"+
		"\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d1\7^\2\2\u04d1"+
		"\u04d2\5z>\2\u04d2C\3\2\2\2\u04d3\u04db\5F$\2\u04d4\u04d6\7L\2\2\u04d5"+
		"\u04d7\t\13\2\2\u04d6\u04d5\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d8\3"+
		"\2\2\2\u04d8\u04da\5F$\2\u04d9\u04d4\3\2\2\2\u04da\u04dd\3\2\2\2\u04db"+
		"\u04d9\3\2\2\2\u04db\u04dc\3\2\2\2\u04dcE\3\2\2\2\u04dd\u04db\3\2\2\2"+
		"\u04de\u04e2\7.\2\2\u04df\u04e1\5H%\2\u04e0\u04df\3\2\2\2\u04e1\u04e4"+
		"\3\2\2\2\u04e2\u04e0\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e5\3\2\2\2\u04e4"+
		"\u04e2\3\2\2\2\u04e5\u04e7\5L\'\2\u04e6\u04e8\5V,\2\u04e7\u04e6\3\2\2"+
		"\2\u04e7\u04e8\3\2\2\2\u04e8\u04ea\3\2\2\2\u04e9\u04eb\5j\66\2\u04ea\u04e9"+
		"\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ed\3\2\2\2\u04ec\u04ee\5l\67\2\u04ed"+
		"\u04ec\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04f0\3\2\2\2\u04ef\u04f1\5n"+
		"8\2\u04f0\u04ef\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f3\3\2\2\2\u04f2"+
		"\u04f4\5v<\2\u04f3\u04f2\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f6\3\2\2"+
		"\2\u04f5\u04f7\5\u0134\u009b\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2\2\2"+
		"\u04f7\u04f9\3\2\2\2\u04f8\u04fa\5p9\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa"+
		"\3\2\2\2\u04fa\u04fc\3\2\2\2\u04fb\u04fd\5\u0080A\2\u04fc\u04fb\3\2\2"+
		"\2\u04fc\u04fd\3\2\2\2\u04fd\u04ff\3\2\2\2\u04fe\u0500\5\u0082B\2\u04ff"+
		"\u04fe\3\2\2\2\u04ff\u0500\3\2\2\2\u0500G\3\2\2\2\u0501\u050a\5J&\2\u0502"+
		"\u050a\7\u0168\2\2\u0503\u050a\7\u0178\2\2\u0504\u050a\7\u016f\2\2\u0505"+
		"\u050a\7\u016a\2\2\u0506\u050a\7\u016b\2\2\u0507\u050a\t\f\2\2\u0508\u050a"+
		"\7\u016d\2\2\u0509\u0501\3\2\2\2\u0509\u0502\3\2\2\2\u0509\u0503\3\2\2"+
		"\2\u0509\u0504\3\2\2\2\u0509\u0505\3\2\2\2\u0509\u0506\3\2\2\2\u0509\u0507"+
		"\3\2\2\2\u0509\u0508\3\2\2\2\u050aI\3\2\2\2\u050b\u050c\t\r\2\2\u050c"+
		"K\3\2\2\2\u050d\u0510\5R*\2\u050e\u0510\5N(\2\u050f\u050d\3\2\2\2\u050f"+
		"\u050e\3\2\2\2\u0510\u0515\3\2\2\2\u0511\u0512\7$\2\2\u0512\u0514\5N("+
		"\2\u0513\u0511\3\2\2\2\u0514\u0517\3\2\2\2\u0515\u0513\3\2\2\2\u0515\u0516"+
		"\3\2\2\2\u0516M\3\2\2\2\u0517\u0515\3\2\2\2\u0518\u051b\5\u00a4S\2\u0519"+
		"\u051b\5\u00e0q\2\u051a\u0518\3\2\2\2\u051a\u0519\3\2\2\2\u051b\u0520"+
		"\3\2\2\2\u051c\u051e\7^\2\2\u051d\u051c\3\2\2\2\u051d\u051e\3\2\2\2\u051e"+
		"\u051f\3\2\2\2\u051f\u0521\5P)\2\u0520\u051d\3\2\2\2\u0520\u0521\3\2\2"+
		"\2\u0521\u0524\3\2\2\2\u0522\u0524\5T+\2\u0523\u051a\3\2\2\2\u0523\u0522"+
		"\3\2\2\2\u0524O\3\2\2\2\u0525\u0528\5\u009aN\2\u0526\u0528\7\u02c0\2\2"+
		"\u0527\u0525\3\2\2\2\u0527\u0526\3\2\2\2\u0528Q\3\2\2\2\u0529\u052a\7"+
		"\20\2\2\u052aS\3\2\2\2\u052b\u052c\5\u009aN\2\u052c\u052d\7\24\2\2\u052d"+
		"U\3\2\2\2\u052e\u052f\7S\2\2\u052f\u0530\5X-\2\u0530W\3\2\2\2\u0531\u0536"+
		"\5Z.\2\u0532\u0533\7$\2\2\u0533\u0535\5Z.\2\u0534\u0532\3\2\2\2\u0535"+
		"\u0538\3\2\2\2\u0536\u0534\3\2\2\2\u0536\u0537\3\2\2\2\u0537Y\3\2\2\2"+
		"\u0538\u0536\3\2\2\2\u0539\u0540\5\\/\2\u053a\u053b\7 \2\2\u053b\u053c"+
		"\7\u00cb\2\2\u053c\u053d\5\\/\2\u053d\u053e\7!\2\2\u053e\u0540\3\2\2\2"+
		"\u053f\u0539\3\2\2\2\u053f\u053a\3\2\2\2\u0540[\3\2\2\2\u0541\u0545\5"+
		"^\60\2\u0542\u0544\5f\64\2\u0543\u0542\3\2\2\2\u0544\u0547\3\2\2\2\u0545"+
		"\u0543\3\2\2\2\u0545\u0546\3\2\2\2\u0546]\3\2\2\2\u0547\u0545\3\2\2\2"+
		"\u0548\u054a\5\u00a2R\2\u0549\u054b\5`\61\2\u054a\u0549\3\2\2\2\u054a"+
		"\u054b\3\2\2\2\u054b\u0550\3\2\2\2\u054c\u054e\7^\2\2\u054d\u054c\3\2"+
		"\2\2\u054d\u054e\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0551\5P)\2\u0550\u054d"+
		"\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0553\3\2\2\2\u0552\u0554\5b\62\2\u0553"+
		"\u0552\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0562\3\2\2\2\u0555\u0557\5z"+
		">\2\u0556\u0558\7^\2\2\u0557\u0556\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u0559"+
		"\3\2\2\2\u0559\u055b\5P)\2\u055a\u055c\5\u00ba^\2\u055b\u055a\3\2\2\2"+
		"\u055b\u055c\3\2\2\2\u055c\u0562\3\2\2\2\u055d\u055e\7\36\2\2\u055e\u055f"+
		"\5X-\2\u055f\u0560\7\37\2\2\u0560\u0562\3\2\2\2\u0561\u0548\3\2\2\2\u0561"+
		"\u0555\3\2\2\2\u0561\u055d\3\2\2\2\u0562_\3\2\2\2\u0563\u0564\7\u00dd"+
		"\2\2\u0564\u0565\7\36\2\2\u0565\u056a\5\u009aN\2\u0566\u0567\7$\2\2\u0567"+
		"\u0569\5\u009aN\2\u0568\u0566\3\2\2\2\u0569\u056c\3\2\2\2\u056a\u0568"+
		"\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u056d\3\2\2\2\u056c\u056a\3\2\2\2\u056d"+
		"\u056e\7\37\2\2\u056ea\3\2\2\2\u056f\u0574\5d\63\2\u0570\u0571\7$\2\2"+
		"\u0571\u0573\5d\63\2\u0572\u0570\3\2\2\2\u0573\u0576\3\2\2\2\u0574\u0572"+
		"\3\2\2\2\u0574\u0575\3\2\2\2\u0575c\3\2\2\2\u0576\u0574\3\2\2\2\u0577"+
		"\u0578\t\16\2\2\u0578\u0581\t\17\2\2\u0579\u057f\7c\2\2\u057a\u0580\7"+
		"U\2\2\u057b\u057c\7r\2\2\u057c\u0580\7t\2\2\u057d\u057e\7s\2\2\u057e\u0580"+
		"\7t\2\2\u057f\u057a\3\2\2\2\u057f\u057b\3\2\2\2\u057f\u057d\3\2\2\2\u0580"+
		"\u0582\3\2\2\2\u0581\u0579\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0583\3\2"+
		"\2\2\u0583\u0584\7\36\2\2\u0584\u0589\5\u00a6T\2\u0585\u0586\7$\2\2\u0586"+
		"\u0588\5\u00a6T\2\u0587\u0585\3\2\2\2\u0588\u058b\3\2\2\2\u0589\u0587"+
		"\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058c\3\2\2\2\u058b\u0589\3\2\2\2\u058c"+
		"\u058d\7\37\2\2\u058de\3\2\2\2\u058e\u0590\t\20\2\2\u058f\u058e\3\2\2"+
		"\2\u058f\u0590\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0594\7U\2\2\u0592\u0594"+
		"\7\u0178\2\2\u0593\u058f\3\2\2\2\u0593\u0592\3\2\2\2\u0594\u0595\3\2\2"+
		"\2\u0595\u0597\5^\60\2\u0596\u0598\5h\65\2\u0597\u0596\3\2\2\2\u0597\u0598"+
		"\3\2\2\2\u0598\u05aa\3\2\2\2\u0599\u059b\t\21\2\2\u059a\u059c\7X\2\2\u059b"+
		"\u059a\3\2\2\2\u059b\u059c\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059e\7U"+
		"\2\2\u059e\u059f\5^\60\2\u059f\u05a0\5h\65\2\u05a0\u05aa\3\2\2\2\u05a1"+
		"\u05a5\7T\2\2\u05a2\u05a6\7W\2\2\u05a3\u05a4\t\21\2\2\u05a4\u05a6\7X\2"+
		"\2\u05a5\u05a2\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05a7"+
		"\3\2\2\2\u05a7\u05a8\7U\2\2\u05a8\u05aa\5^\60\2\u05a9\u0593\3\2\2\2\u05a9"+
		"\u0599\3\2\2\2\u05a9\u05a1\3\2\2\2\u05aag\3\2\2\2\u05ab\u05ac\7_\2\2\u05ac"+
		"\u05b0\5\u00e0q\2\u05ad\u05ae\7\\\2\2\u05ae\u05b0\5\u00ba^\2\u05af\u05ab"+
		"\3\2\2\2\u05af\u05ad\3\2\2\2\u05b0i\3\2\2\2\u05b1\u05b2\7]\2\2\u05b2\u05b3"+
		"\5\u00e0q\2\u05b3k\3\2\2\2\u05b4\u05b5\7s\2\2\u05b5\u05b6\7t\2\2\u05b6"+
		"\u05bb\5\u0136\u009c\2\u05b7\u05b8\7$\2\2\u05b8\u05ba\5\u0136\u009c\2"+
		"\u05b9\u05b7\3\2\2\2\u05ba\u05bd\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bb\u05bc"+
		"\3\2\2\2\u05bc\u05c0\3\2\2\2\u05bd\u05bb\3\2\2\2\u05be\u05bf\7K\2\2\u05bf"+
		"\u05c1\7\u00ee\2\2\u05c0\u05be\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1m\3\2"+
		"\2\2\u05c2\u05c3\7w\2\2\u05c3\u05c4\5\u00e0q\2\u05c4o\3\2\2\2\u05c5\u05d0"+
		"\7x\2\2\u05c6\u05c7\5t;\2\u05c7\u05c8\7$\2\2\u05c8\u05ca\3\2\2\2\u05c9"+
		"\u05c6\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05d1\5r"+
		":\2\u05cc\u05cd\5r:\2\u05cd\u05ce\7y\2\2\u05ce\u05cf\5t;\2\u05cf\u05d1"+
		"\3\2\2\2\u05d0\u05c9\3\2\2\2\u05d0\u05cc\3\2\2\2\u05d1q\3\2\2\2\u05d2"+
		"\u05d5\5\u008aF\2\u05d3\u05d5\5\u0084C\2\u05d4\u05d2\3\2\2\2\u05d4\u05d3"+
		"\3\2\2\2\u05d5s\3\2\2\2\u05d6\u05d9\5\u008aF\2\u05d7\u05d9\5\u0084C\2"+
		"\u05d8\u05d6\3\2\2\2\u05d8\u05d7\3\2\2\2\u05d9u\3\2\2\2\u05da\u05db\7"+
		"\u00cc\2\2\u05db\u05e0\5x=\2\u05dc\u05dd\7$\2\2\u05dd\u05df\5x=\2\u05de"+
		"\u05dc\3\2\2\2\u05df\u05e2\3\2\2\2\u05e0\u05de\3\2\2\2\u05e0\u05e1\3\2"+
		"\2\2\u05e1w\3\2\2\2\u05e2\u05e0\3\2\2\2\u05e3\u05e4\5\u0144\u00a3\2\u05e4"+
		"\u05e5\7^\2\2\u05e5\u05e6\7\36\2\2\u05e6\u05e7\5\u00fa~\2\u05e7\u05e8"+
		"\7\37\2\2\u05e8y\3\2\2\2\u05e9\u05ea\7\36\2\2\u05ea\u05eb\5D#\2\u05eb"+
		"\u05ec\7\37\2\2\u05ec{\3\2\2\2\u05ed\u05ee\7\u01d8\2\2\u05ee\u05ef\7t"+
		"\2\2\u05ef\u05f4\7\u02c0\2\2\u05f0\u05f1\7\u01d9\2\2\u05f1\u05f2\7t\2"+
		"\2\u05f2\u05f4\7\u02c0\2\2\u05f3\u05ed\3\2\2\2\u05f3\u05f0\3\2\2\2\u05f4"+
		"}\3\2\2\2\u05f5\u05f6\7\u01d9\2\2\u05f6\u05f7\7t\2\2\u05f7\u0602\7\u02c0"+
		"\2\2\u05f8\u05fa\7\u01da\2\2\u05f9\u05f8\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa"+
		"\u05fb\3\2\2\2\u05fb\u05fc\7\u01db\2\2\u05fc\u05fd\7t\2\2\u05fd\u0602"+
		"\7\u02c0\2\2\u05fe\u05ff\7\u01dc\2\2\u05ff\u0600\7t\2\2\u0600\u0602\7"+
		"\u02c0\2\2\u0601\u05f5\3\2\2\2\u0601\u05f9\3\2\2\2\u0601\u05fe\3\2\2\2"+
		"\u0602\177\3\2\2\2\u0603\u0604\7I\2\2\u0604\u0609\5\u009aN\2\u0605\u0606"+
		"\7$\2\2\u0606\u0608\5\u009aN\2\u0607\u0605\3\2\2\2\u0608\u060b\3\2\2\2"+
		"\u0609\u0607\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u0628\3\2\2\2\u060b\u0609"+
		"\3\2\2\2\u060c\u060d\7I\2\2\u060d\u060e\7\u01df\2\2\u060e\u0628\7\u02c0"+
		"\2\2\u060f\u0610\7I\2\2\u0610\u0611\7\u01e0\2\2\u0611\u0615\7\u02c0\2"+
		"\2\u0612\u0613\7\u0081\2\2\u0613\u0614\7:\2\2\u0614\u0616\7\u02bf\2\2"+
		"\u0615\u0612\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u061d\3\2\2\2\u0617\u0619"+
		"\t\t\2\2\u0618\u061a\5~@\2\u0619\u0618\3\2\2\2\u061a\u061b\3\2\2\2\u061b"+
		"\u0619\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061e\3\2\2\2\u061d\u0617\3\2"+
		"\2\2\u061d\u061e\3\2\2\2\u061e\u0625\3\2\2\2\u061f\u0621\7\u01d7\2\2\u0620"+
		"\u0622\5|?\2\u0621\u0620\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0621\3\2\2"+
		"\2\u0623\u0624\3\2\2\2\u0624\u0626\3\2\2\2\u0625\u061f\3\2\2\2\u0625\u0626"+
		"\3\2\2\2\u0626\u0628\3\2\2\2\u0627\u0603\3\2\2\2\u0627\u060c\3\2\2\2\u0627"+
		"\u060f\3\2\2\2\u0628\u0081\3\2\2\2\u0629\u062a\7c\2\2\u062a\u0630\7\60"+
		"\2\2\u062b\u062c\7\u0133\2\2\u062c\u062d\7n\2\2\u062d\u062e\7\u01e1\2"+
		"\2\u062e\u0630\7\u0161\2\2\u062f\u0629\3\2\2\2\u062f\u062b\3\2\2\2\u0630"+
		"\u0083\3\2\2\2\u0631\u0632\7(\2\2\u0632\u0085\3\2\2\2\u0633\u063b\5\u0088"+
		"E\2\u0634\u063b\5\u008aF\2\u0635\u063b\5\u008cG\2\u0636\u063b\5\u008e"+
		"H\2\u0637\u063b\5\u0090I\2\u0638\u063b\5\u0092J\2\u0639\u063b\5\u0094"+
		"K\2\u063a\u0633\3\2\2\2\u063a\u0634\3\2\2\2\u063a\u0635\3\2\2\2\u063a"+
		"\u0636\3\2\2\2\u063a\u0637\3\2\2\2\u063a\u0638\3\2\2\2\u063a\u0639\3\2"+
		"\2\2\u063b\u0087\3\2\2\2\u063c\u063e\5\u0096L\2\u063d\u063c\3\2\2\2\u063d"+
		"\u063e\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0641\7\u02c0\2\2\u0640\u0642"+
		"\5\u0142\u00a2\2\u0641\u0640\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0089\3"+
		"\2\2\2\u0643\u0645\7\17\2\2\u0644\u0643\3\2\2\2\u0644\u0645\3\2\2\2\u0645"+
		"\u0646\3\2\2\2\u0646\u0647\7\u02c1\2\2\u0647\u008b\3\2\2\2\u0648\u0649"+
		"\t\22\2\2\u0649\u0650\7\u02c0\2\2\u064a\u064b\7 \2\2\u064b\u064c\5\u009a"+
		"N\2\u064c\u064d\7\u02c0\2\2\u064d\u064e\7!\2\2\u064e\u0650\3\2\2\2\u064f"+
		"\u0648\3\2\2\2\u064f\u064a\3\2\2\2\u0650\u008d\3\2\2\2\u0651\u0653\5\u0096"+
		"L\2\u0652\u0651\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u0652\u0653\3\2\2\2\u0653\u0654\3\2\2\2\u0654\u0656\7\u02c2\2\2"+
		"\u0655\u0657\5\u0142\u00a2\2\u0656\u0655\3\2\2\2\u0656\u0657\3\2\2\2\u0657"+
		"\u008f\3\2\2\2\u0658\u065a\5\u0096L\2\u0659\u0658\3\2\2\2\u0659\u065a"+
		"\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u065d\7\u02c3\2\2\u065c\u065e\5\u0142"+
		"\u00a2\2\u065d\u065c\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u0091\3\2\2\2\u065f"+
		"\u0660\t\23\2\2\u0660\u0093\3\2\2\2\u0661\u0662\7i\2\2\u0662\u0095\3\2"+
		"\2\2\u0663\u0664\7\u02bf\2\2\u0664\u0097\3\2\2\2\u0665\u0666\7\u02bf\2"+
		"\2\u0666\u0099\3\2\2\2\u0667\u066a\7\u02bf\2\2\u0668\u066a\5\u009cO\2"+
		"\u0669\u0667\3\2\2\2\u0669\u0668\3\2\2\2\u066a\u009b\3\2\2\2\u066b\u066c"+
		"\t\24\2\2\u066c\u009d\3\2\2\2\u066d\u066f\7)\2\2\u066e\u066d\3\2\2\2\u066e"+
		"\u066f\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u0672\7)\2\2\u0671\u066e\3\2"+
		"\2\2\u0671\u0672\3\2\2\2\u0672\u0674\3\2\2\2\u0673\u0675\t\25\2\2\u0674"+
		"\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0677\3\2\2\2\u0676\u0678\7\23"+
		"\2\2\u0677\u0676\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u0679\3\2\2\2\u0679"+
		"\u067a\5\u009aN\2\u067a\u009f\3\2\2\2\u067b\u067c\5\u009aN\2\u067c\u00a1"+
		"\3\2\2\2\u067d\u067e\5\u00b4[\2\u067e\u067f\7\23\2\2\u067f\u0681\3\2\2"+
		"\2\u0680\u067d\3\2\2\2\u0680\u0681\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0683"+
		"\5\u00b6\\\2\u0683\u00a3\3\2\2\2\u0684\u0685\5\u00b4[\2\u0685\u0686\7"+
		"\23\2\2\u0686\u0688\3\2\2\2\u0687\u0684\3\2\2\2\u0687\u0688\3\2\2\2\u0688"+
		"\u0689\3\2\2\2\u0689\u068a\5\u00b6\\\2\u068a\u00a5\3\2\2\2\u068b\u068c"+
		"\5\u009aN\2\u068c\u00a7\3\2\2\2\u068d\u068e\7\u02c0\2\2\u068e\u068f\7"+
		")\2\2\u068f\u0693\7\u02c0\2\2\u0690\u0693\5\u009aN\2\u0691\u0693\7\u02c0"+
		"\2\2\u0692\u068d\3\2\2\2\u0692\u0690\3\2\2\2\u0692\u0691\3\2\2\2\u0693"+
		"\u00a9\3\2\2\2\u0694\u0695\t\26\2\2\u0695\u0696\7)\2\2\u0696\u0697\7\u02c0"+
		"\2\2\u0697\u069b\7\u02bf\2\2\u0698\u069b\5\u009aN\2\u0699\u069b\7\u02c0"+
		"\2\2\u069a\u0694\3\2\2\2\u069a\u0698\3\2\2\2\u069a\u0699\3\2\2\2\u069b"+
		"\u00ab\3\2\2\2\u069c\u069f\5\u009aN\2\u069d\u069f\7\u02c0\2\2\u069e\u069c"+
		"\3\2\2\2\u069e\u069d\3\2\2\2\u069f\u00ad\3\2\2\2\u06a0\u06a3\5\u009aN"+
		"\2\u06a1\u06a3\7\u02c0\2\2\u06a2\u06a0\3\2\2\2\u06a2\u06a1\3\2\2\2\u06a3"+
		"\u00af\3\2\2\2\u06a4\u06ac\5\u009aN\2\u06a5\u06a6\5\u00b4[\2\u06a6\u06a7"+
		"\7\23\2\2\u06a7\u06a9\3\2\2\2\u06a8\u06a5\3\2\2\2\u06a8\u06a9\3\2\2\2"+
		"\u06a9\u06aa\3\2\2\2\u06aa\u06ac\5\u009aN\2\u06ab\u06a4\3\2\2\2\u06ab"+
		"\u06a8\3\2\2\2\u06ac\u00b1\3\2\2\2\u06ad\u06b5\5\u009aN\2\u06ae\u06af"+
		"\5\u00b4[\2\u06af\u06b0\7\23\2\2\u06b0\u06b2\3\2\2\2\u06b1\u06ae\3\2\2"+
		"\2\u06b1\u06b2\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b5\5\u009aN\2\u06b4"+
		"\u06ad\3\2\2\2\u06b4\u06b1\3\2\2\2\u06b5\u00b3\3\2\2\2\u06b6\u06b7\5\u009a"+
		"N\2\u06b7\u00b5\3\2\2\2\u06b8\u06b9\5\u009aN\2\u06b9\u00b7\3\2\2\2\u06ba"+
		"\u06bc\7\36\2\2\u06bb\u06ba\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06bd\3"+
		"\2\2\2\u06bd\u06c2\5\u00a2R\2\u06be\u06bf\7$\2\2\u06bf\u06c1\5\u00a2R"+
		"\2\u06c0\u06be\3\2\2\2\u06c1\u06c4\3\2\2\2\u06c2\u06c0\3\2\2\2\u06c2\u06c3"+
		"\3\2\2\2\u06c3\u06c6\3\2\2\2\u06c4\u06c2\3\2\2\2\u06c5\u06c7\7\37\2\2"+
		"\u06c6\u06c5\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u00b9\3\2\2\2\u06c8\u06ca"+
		"\7\36\2\2\u06c9\u06c8\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u06cb\3\2\2\2"+
		"\u06cb\u06d0\5\u00a4S\2\u06cc\u06cd\7$\2\2\u06cd\u06cf\5\u00a4S\2\u06ce"+
		"\u06cc\3\2\2\2\u06cf\u06d2\3\2\2\2\u06d0\u06ce\3\2\2\2\u06d0\u06d1\3\2"+
		"\2\2\u06d1\u06d4\3\2\2\2\u06d2\u06d0\3\2\2\2\u06d3\u06d5\7\37\2\2\u06d4"+
		"\u06d3\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u00bb\3\2\2\2\u06d6\u06d7\7\u02bf"+
		"\2\2\u06d7\u00bd\3\2\2\2\u06d8\u06d9\7\u02c0\2\2\u06d9\u00bf\3\2\2\2\u06da"+
		"\u06db\7\u02c0\2\2\u06db\u00c1\3\2\2\2\u06dc\u06dd\7\u02bf\2\2\u06dd\u00c3"+
		"\3\2\2\2\u06de\u06df\7\u02c0\2\2\u06df\u00c5\3\2\2\2\u06e0\u06e1\7\u02c1"+
		"\2\2\u06e1\u00c7\3\2\2\2\u06e2\u06e3\5\u00a8U\2\u06e3\u06e4\7)\2\2\u06e4"+
		"\u06e5\5\u00c4c\2\u06e5\u06e6\7\r\2\2\u06e6\u06e7\5\u00c6d\2\u06e7\u00c9"+
		"\3\2\2\2\u06e8\u06e9\7\u02bf\2\2\u06e9\u00cb\3\2\2\2\u06ea\u06eb\7\u02bf"+
		"\2\2\u06eb\u00cd\3\2\2\2\u06ec\u06ed\5\u009aN\2\u06ed\u00cf\3\2\2\2\u06ee"+
		"\u06ef\t\26\2\2\u06ef\u06f0\7)\2\2\u06f0\u06f1\7\u02c0\2\2\u06f1\u06f4"+
		"\7\u02bf\2\2\u06f2\u06f4\7\u02bf\2\2\u06f3\u06ee\3\2\2\2\u06f3\u06f2\3"+
		"\2\2\2\u06f4\u00d1\3\2\2\2\u06f5\u06f6\7\u02bf\2\2\u06f6\u00d3\3\2\2\2"+
		"\u06f7\u06f8\7\u02bf\2\2\u06f8\u00d5\3\2\2\2\u06f9\u06fa\t\27\2\2\u06fa"+
		"\u00d7\3\2\2\2\u06fb\u06fe\5\u00a8U\2\u06fc\u06fe\5\u00d0i\2\u06fd\u06fb"+
		"\3\2\2\2\u06fd\u06fc\3\2\2\2\u06fe\u00d9\3\2\2\2\u06ff\u0700\7\u02bf\2"+
		"\2\u0700\u00db\3\2\2\2\u0701\u0702\t\30\2\2\u0702\u00dd\3\2\2\2\u0703"+
		"\u0704\t\31\2\2\u0704\u0705\5\u00d4k\2\u0705\u00df\3\2\2\2\u0706\u0707"+
		"\bq\1\2\u0707\u0708\5\u00e4s\2\u0708\u0709\5\u00e0q\5\u0709\u0710\3\2"+
		"\2\2\u070a\u070b\7\36\2\2\u070b\u070c\5\u00e0q\2\u070c\u070d\7\37\2\2"+
		"\u070d\u0710\3\2\2\2\u070e\u0710\5\u00e6t\2\u070f\u0706\3\2\2\2\u070f"+
		"\u070a\3\2\2\2\u070f\u070e\3\2\2\2\u0710\u071a\3\2\2\2\u0711\u0712\f\7"+
		"\2\2\u0712\u0713\5\u00e2r\2\u0713\u0714\5\u00e0q\b\u0714\u0719\3\2\2\2"+
		"\u0715\u0716\f\6\2\2\u0716\u0717\7\u00cf\2\2\u0717\u0719\5\u00e0q\7\u0718"+
		"\u0711\3\2\2\2\u0718\u0715\3\2\2\2\u0719\u071c\3\2\2\2\u071a\u0718\3\2"+
		"\2\2\u071a\u071b\3\2\2\2\u071b\u00e1\3\2\2\2\u071c\u071a\3\2\2\2\u071d"+
		"\u071e\t\32\2\2\u071e\u00e3\3\2\2\2\u071f\u0720\t\33\2\2\u0720\u00e5\3"+
		"\2\2\2\u0721\u0722\bt\1\2\u0722\u0723\5\u00eav\2\u0723\u0738\3\2\2\2\u0724"+
		"\u0725\f\7\2\2\u0725\u0727\7g\2\2\u0726\u0728\7h\2\2\u0727\u0726\3\2\2"+
		"\2\u0727\u0728\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u0737\t\34\2\2\u072a"+
		"\u072b\f\6\2\2\u072b\u072c\7\25\2\2\u072c\u0737\5\u00eav\2\u072d\u072e"+
		"\f\5\2\2\u072e\u072f\5\u00e8u\2\u072f\u0730\5\u00eav\2\u0730\u0737\3\2"+
		"\2\2\u0731\u0732\f\4\2\2\u0732\u0733\5\u00e8u\2\u0733\u0734\t\35\2\2\u0734"+
		"\u0735\5z>\2\u0735\u0737\3\2\2\2\u0736\u0724\3\2\2\2\u0736\u072a\3\2\2"+
		"\2\u0736\u072d\3\2\2\2\u0736\u0731\3\2\2\2\u0737\u073a\3\2\2\2\u0738\u0736"+
		"\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u00e7\3\2\2\2\u073a\u0738\3\2\2\2\u073b"+
		"\u073c\t\36\2\2\u073c\u00e9\3\2\2\2\u073d\u073f\5\u00ecw\2\u073e\u0740"+
		"\7h\2\2\u073f\u073e\3\2\2\2\u073f\u0740\3\2\2\2\u0740\u0741\3\2\2\2\u0741"+
		"\u0742\7n\2\2\u0742\u0743\5z>\2\u0743\u0775\3\2\2\2\u0744\u0746\5\u00ec"+
		"w\2\u0745\u0747\7h\2\2\u0746\u0745\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u0748"+
		"\3\2\2\2\u0748\u0749\7n\2\2\u0749\u074a\7\36\2\2\u074a\u074f\5\u00e0q"+
		"\2\u074b\u074c\7$\2\2\u074c\u074e\5\u00e0q\2\u074d\u074b\3\2\2\2\u074e"+
		"\u0751\3\2\2\2\u074f\u074d\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0752\3\2"+
		"\2\2\u0751\u074f\3\2\2\2\u0752\u0753\7\37\2\2\u0753\u0775\3\2\2\2\u0754"+
		"\u0756\5\u00ecw\2\u0755\u0757\7h\2\2\u0756\u0755\3\2\2\2\u0756\u0757\3"+
		"\2\2\2\u0757\u0758\3\2\2\2\u0758\u0759\7m\2\2\u0759\u075a\5\u00ecw\2\u075a"+
		"\u075b\7e\2\2\u075b\u075c\5\u00eav\2\u075c\u0775\3\2\2\2\u075d\u075e\5"+
		"\u00ecw\2\u075e\u075f\7\u00ef\2\2\u075f\u0760\7q\2\2\u0760\u0761\5\u00ec"+
		"w\2\u0761\u0775\3\2\2\2\u0762\u0764\5\u00ecw\2\u0763\u0765\7h\2\2\u0764"+
		"\u0763\3\2\2\2\u0764\u0765\3\2\2\2\u0765\u0766\3\2\2\2\u0766\u0767\7q"+
		"\2\2\u0767\u076a\5\u00eex\2\u0768\u0769\7\u00db\2\2\u0769\u076b\5\u00ee"+
		"x\2\u076a\u0768\3\2\2\2\u076a\u076b\3\2\2\2\u076b\u0775\3\2\2\2\u076c"+
		"\u076e\5\u00ecw\2\u076d\u076f\7h\2\2\u076e\u076d\3\2\2\2\u076e\u076f\3"+
		"\2\2\2\u076f\u0770\3\2\2\2\u0770\u0771\t\37\2\2\u0771\u0772\5\u00ecw\2"+
		"\u0772\u0775\3\2\2\2\u0773\u0775\5\u00ecw\2\u0774\u073d\3\2\2\2\u0774"+
		"\u0744\3\2\2\2\u0774\u0754\3\2\2\2\u0774\u075d\3\2\2\2\u0774\u0762\3\2"+
		"\2\2\u0774\u076c\3\2\2\2\u0774\u0773\3\2\2\2\u0775\u00eb\3\2\2\2\u0776"+
		"\u0777\bw\1\2\u0777\u0778\5\u00eex\2\u0778\u07a5\3\2\2\2\u0779\u077a\f"+
		"\21\2\2\u077a\u077b\7\7\2\2\u077b\u07a4\5\u00ecw\22\u077c\u077d\f\20\2"+
		"\2\u077d\u077e\7\b\2\2\u077e\u07a4\5\u00ecw\21\u077f\u0780\f\17\2\2\u0780"+
		"\u0781\7\t\2\2\u0781\u07a4\5\u00ecw\20\u0782\u0783\f\16\2\2\u0783\u0784"+
		"\7\n\2\2\u0784\u07a4\5\u00ecw\17\u0785\u0786\f\r\2\2\u0786\u0787\7\16"+
		"\2\2\u0787\u07a4\5\u00ecw\16\u0788\u0789\f\f\2\2\u0789\u078a\7\17\2\2"+
		"\u078a\u07a4\5\u00ecw\r\u078b\u078c\f\13\2\2\u078c\u078d\7\20\2\2\u078d"+
		"\u07a4\5\u00ecw\f\u078e\u078f\f\n\2\2\u078f\u0790\7\21\2\2\u0790\u07a4"+
		"\5\u00ecw\13\u0791\u0792\f\t\2\2\u0792\u0793\7\u00ce\2\2\u0793\u07a4\5"+
		"\u00ecw\n\u0794\u0795\f\b\2\2\u0795\u0796\7\u00cd\2\2\u0796\u07a4\5\u00ec"+
		"w\t\u0797\u0798\f\7\2\2\u0798\u0799\7\f\2\2\u0799\u07a4\5\u00ecw\b\u079a"+
		"\u079b\f\6\2\2\u079b\u079c\7\13\2\2\u079c\u07a4\5\u00ecw\7\u079d\u079e"+
		"\f\5\2\2\u079e\u079f\7\16\2\2\u079f\u07a4\5\u0130\u0099\2\u07a0\u07a1"+
		"\f\4\2\2\u07a1\u07a2\7\17\2\2\u07a2\u07a4\5\u0130\u0099\2\u07a3\u0779"+
		"\3\2\2\2\u07a3\u077c\3\2\2\2\u07a3\u077f\3\2\2\2\u07a3\u0782\3\2\2\2\u07a3"+
		"\u0785\3\2\2\2\u07a3\u0788\3\2\2\2\u07a3\u078b\3\2\2\2\u07a3\u078e\3\2"+
		"\2\2\u07a3\u0791\3\2\2\2\u07a3\u0794\3\2\2\2\u07a3\u0797\3\2\2\2\u07a3"+
		"\u079a\3\2\2\2\u07a3\u079d\3\2\2\2\u07a3\u07a0\3\2\2\2\u07a4\u07a7\3\2"+
		"\2\2\u07a5\u07a3\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u00ed\3\2\2\2\u07a7"+
		"\u07a5\3\2\2\2\u07a8\u07a9\bx\1\2\u07a9\u07cb\5\u00f0y\2\u07aa\u07cb\5"+
		"\u0084C\2\u07ab\u07cb\5\u0086D\2\u07ac\u07cb\5\u00a4S\2\u07ad\u07cb\5"+
		"\u009eP\2\u07ae\u07af\t \2\2\u07af\u07cb\5\u00eex\t\u07b0\u07b2\7\u00d7"+
		"\2\2\u07b1\u07b0\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3"+
		"\u07b4\7\36\2\2\u07b4\u07b9\5\u00e0q\2\u07b5\u07b6\7$\2\2\u07b6\u07b8"+
		"\5\u00e0q\2\u07b7\u07b5\3\2\2\2\u07b8\u07bb\3\2\2\2\u07b9\u07b7\3\2\2"+
		"\2\u07b9\u07ba\3\2\2\2\u07ba\u07bc\3\2\2\2\u07bb\u07b9\3\2\2\2\u07bc\u07bd"+
		"\7\37\2\2\u07bd\u07cb\3\2\2\2\u07be\u07c0\7l\2\2\u07bf\u07be\3\2\2\2\u07bf"+
		"\u07c0\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1\u07cb\5z>\2\u07c2\u07c3\7 \2"+
		"\2\u07c3\u07c4\5\u009aN\2\u07c4\u07c5\5\u00e0q\2\u07c5\u07c6\7!\2\2\u07c6"+
		"\u07cb\3\2\2\2\u07c7\u07cb\5\u0126\u0094\2\u07c8\u07cb\5\u012a\u0096\2"+
		"\u07c9\u07cb\5\u0130\u0099\2\u07ca\u07a8\3\2\2\2\u07ca\u07aa\3\2\2\2\u07ca"+
		"\u07ab\3\2\2\2\u07ca\u07ac\3\2\2\2\u07ca\u07ad\3\2\2\2\u07ca\u07ae\3\2"+
		"\2\2\u07ca\u07b1\3\2\2\2\u07ca\u07bf\3\2\2\2\u07ca\u07c2\3\2\2\2\u07ca"+
		"\u07c7\3\2\2\2\u07ca\u07c8\3\2\2\2\u07ca\u07c9\3\2\2\2\u07cb\u07d7\3\2"+
		"\2\2\u07cc\u07cd\f\n\2\2\u07cd\u07ce\7\4\2\2\u07ce\u07d6\5\u00eex\13\u07cf"+
		"\u07d0\f\f\2\2\u07d0\u07d3\7\u010c\2\2\u07d1\u07d4\7\u02c0\2\2\u07d2\u07d4"+
		"\5\u009aN\2\u07d3\u07d1\3\2\2\2\u07d3\u07d2\3\2\2\2\u07d4\u07d6\3\2\2"+
		"\2\u07d5\u07cc\3\2\2\2\u07d5\u07cf\3\2\2\2\u07d6\u07d9\3\2\2\2\u07d7\u07d5"+
		"\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u00ef\3\2\2\2\u07d9\u07d7\3\2\2\2\u07da"+
		"\u07de\5\u00f2z\2\u07db\u07de\5\u0106\u0084\2\u07dc\u07de\5\u0122\u0092"+
		"\2\u07dd\u07da\3\2\2\2\u07dd\u07db\3\2\2\2\u07dd\u07dc\3\2\2\2\u07de\u00f1"+
		"\3\2\2\2\u07df\u07e0\5\u00f4{\2\u07e0\u07e2\7\36\2\2\u07e1\u07e3\5\u00f6"+
		"|\2\u07e2\u07e1\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07ed\3\2\2\2\u07e4"+
		"\u07e9\5\u00e0q\2\u07e5\u07e6\7$\2\2\u07e6\u07e8\5\u00e0q\2\u07e7\u07e5"+
		"\3\2\2\2\u07e8\u07eb\3\2\2\2\u07e9\u07e7\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea"+
		"\u07ee\3\2\2\2\u07eb\u07e9\3\2\2\2\u07ec\u07ee\7\20\2\2\u07ed\u07e4\3"+
		"\2\2\2\u07ed\u07ec\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef"+
		"\u07f1\7\37\2\2\u07f0\u07f2\5\u00f8}\2\u07f1\u07f0\3\2\2\2\u07f1\u07f2"+
		"\3\2\2\2\u07f2\u00f3\3\2\2\2\u07f3\u07f4\t!\2\2\u07f4\u00f5\3\2\2\2\u07f5"+
		"\u07f6\7M\2\2\u07f6\u00f7\3\2\2\2\u07f7\u07fd\7\u013b\2\2\u07f8\u07f9"+
		"\7\36\2\2\u07f9\u07fa\5\u00fa~\2\u07fa\u07fb\7\37\2\2\u07fb\u07fe\3\2"+
		"\2\2\u07fc\u07fe\5\u009aN\2\u07fd\u07f8\3\2\2\2\u07fd\u07fc\3\2\2\2\u07fe"+
		"\u00f9\3\2\2\2\u07ff\u0801\5\u009aN\2\u0800\u07ff\3\2\2\2\u0800\u0801"+
		"\3\2\2\2\u0801\u0803\3\2\2\2\u0802\u0804\5\u00fc\177\2\u0803\u0802\3\2"+
		"\2\2\u0803\u0804\3\2\2\2\u0804\u0806\3\2\2\2\u0805\u0807\5\u0134\u009b"+
		"\2\u0806\u0805\3\2\2\2\u0806\u0807\3\2\2\2\u0807\u0809\3\2\2\2\u0808\u080a"+
		"\5\u00fe\u0080\2\u0809\u0808\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u00fb\3"+
		"\2\2\2\u080b\u080c\7\u00dd\2\2\u080c\u080d\7t\2\2\u080d\u0812\5\u00e0"+
		"q\2\u080e\u080f\7$\2\2\u080f\u0811\5\u00e0q\2\u0810\u080e\3\2\2\2\u0811"+
		"\u0814\3\2\2\2\u0812\u0810\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u00fd\3\2"+
		"\2\2\u0814\u0812\3\2\2\2\u0815\u0818\t\"\2\2\u0816\u0819\5\u0100\u0081"+
		"\2\u0817\u0819\5\u0104\u0083\2\u0818\u0816\3\2\2\2\u0818\u0817\3\2\2\2"+
		"\u0819\u00ff\3\2\2\2\u081a\u081b\7\u0098\2\2\u081b\u0827\7\u00d7\2\2\u081c"+
		"\u081d\7\u00e6\2\2\u081d\u0827\7\u0140\2\2\u081e\u081f\7\u00e6\2\2\u081f"+
		"\u0827\7\u0126\2\2\u0820\u0821\5\u00e0q\2\u0821\u0822\7\u0140\2\2\u0822"+
		"\u0827\3\2\2\2\u0823\u0824\5\u00e0q\2\u0824\u0825\7\u0126\2\2\u0825\u0827"+
		"\3\2\2\2\u0826\u081a\3\2\2\2\u0826\u081c\3\2\2\2\u0826\u081e\3\2\2\2\u0826"+
		"\u0820\3\2\2\2\u0826\u0823\3\2\2\2\u0827\u0101\3\2\2\2\u0828\u0829\5\u0100"+
		"\u0081\2\u0829\u0103\3\2\2\2\u082a\u082b\7m\2\2\u082b\u082c\5\u0100\u0081"+
		"\2\u082c\u082d\7e\2\2\u082d\u082e\5\u0102\u0082\2\u082e\u0105\3\2\2\2"+
		"\u082f\u083b\5\u0108\u0085\2\u0830\u083b\5\u010a\u0086\2\u0831\u083b\5"+
		"\u010c\u0087\2\u0832\u083b\5\u010e\u0088\2\u0833\u083b\5\u0110\u0089\2"+
		"\u0834\u083b\5\u0112\u008a\2\u0835\u083b\5\u0114\u008b\2\u0836\u083b\5"+
		"\u0116\u008c\2\u0837\u083b\5\u0118\u008d\2\u0838\u083b\5\u011c\u008f\2"+
		"\u0839\u083b\5\u011a\u008e\2\u083a\u082f\3\2\2\2\u083a\u0830\3\2\2\2\u083a"+
		"\u0831\3\2\2\2\u083a\u0832\3\2\2\2\u083a\u0833\3\2\2\2\u083a\u0834\3\2"+
		"\2\2\u083a\u0835\3\2\2\2\u083a\u0836\3\2\2\2\u083a\u0837\3\2\2\2\u083a"+
		"\u0838\3\2\2\2\u083a\u0839\3\2\2\2\u083b\u0107\3\2\2\2\u083c\u083d\7\u0185"+
		"\2\2\u083d\u083f\7\36\2\2\u083e\u0840\5\u00f6|\2\u083f\u083e\3\2\2\2\u083f"+
		"\u0840\3\2\2\2\u0840\u084a\3\2\2\2\u0841\u0846\5\u00e0q\2\u0842\u0843"+
		"\7$\2\2\u0843\u0845\5\u00e0q\2\u0844\u0842\3\2\2\2\u0845\u0848\3\2\2\2"+
		"\u0846\u0844\3\2\2\2\u0846\u0847\3\2\2\2\u0847\u084b\3\2\2\2\u0848\u0846"+
		"\3\2\2\2\u0849\u084b\7\20\2\2\u084a\u0841\3\2\2\2\u084a\u0849\3\2\2\2"+
		"\u084a\u084b\3\2\2\2\u084b\u084d\3\2\2\2\u084c\u084e\5\u0134\u009b\2\u084d"+
		"\u084c\3\2\2\2\u084d\u084e\3\2\2\2\u084e\u0851\3\2\2\2\u084f\u0850\7\u0153"+
		"\2\2\u0850\u0852\5\u00e0q\2\u0851\u084f\3\2\2\2\u0851\u0852\3\2\2\2\u0852"+
		"\u0853\3\2\2\2\u0853\u0854\7\37\2\2\u0854\u0109\3\2\2\2\u0855\u0856\5"+
		"\u009aN\2\u0856\u0857\7\36\2\2\u0857\u085c\5\u00e0q\2\u0858\u0859\7$\2"+
		"\2\u0859\u085b\5\u00e0q\2\u085a\u0858\3\2\2\2\u085b\u085e\3\2\2\2\u085c"+
		"\u085a\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085f\3\2\2\2\u085e\u085c\3\2"+
		"\2\2\u085f\u0860\7\37\2\2\u0860\u0861\5\u00f8}\2\u0861\u010b\3\2\2\2\u0862"+
		"\u0863\7P\2\2\u0863\u0864\7\36\2\2\u0864\u0865\5\u00e0q\2\u0865\u0866"+
		"\7^\2\2\u0866\u0867\5\u0138\u009d\2\u0867\u0868\7\37\2\2\u0868\u010d\3"+
		"\2\2\2\u0869\u086a\7\u0113\2\2\u086a\u086b\7\36\2\2\u086b\u086c\5\u00e0"+
		"q\2\u086c\u086d\7$\2\2\u086d\u086e\5\u0138\u009d\2\u086e\u086f\7\37\2"+
		"\2\u086f\u0878\3\2\2\2\u0870\u0871\7\u0113\2\2\u0871\u0872\7\36\2\2\u0872"+
		"\u0873\5\u00e0q\2\u0873\u0874\7\\\2\2\u0874\u0875\5\u009aN\2\u0875\u0876"+
		"\7\37\2\2\u0876\u0878\3\2\2\2\u0877\u0869\3\2\2\2\u0877\u0870\3\2\2\2"+
		"\u0878\u010f\3\2\2\2\u0879\u087a\7C\2\2\u087a\u087b\7\36\2\2\u087b\u087c"+
		"\5\u00e0q\2\u087c\u087d\7n\2\2\u087d\u087e\5\u00e0q\2\u087e\u087f\7\37"+
		"\2\2\u087f\u0111\3\2\2\2\u0880\u0881\t#\2\2\u0881\u0882\7\36\2\2\u0882"+
		"\u0883\5\u00e0q\2\u0883\u0884\7S\2\2\u0884\u0887\7\u02c1\2\2\u0885\u0886"+
		"\7c\2\2\u0886\u0888\7\u02c1\2\2\u0887\u0885\3\2\2\2\u0887\u0888\3\2\2"+
		"\2\u0888\u0889\3\2\2\2\u0889\u088a\7\37\2\2\u088a\u0897\3\2\2\2\u088b"+
		"\u088c\t#\2\2\u088c\u088d\7\36\2\2\u088d\u088e\5\u00e0q\2\u088e\u088f"+
		"\7$\2\2\u088f\u0892\7\u02c1\2\2\u0890\u0891\7$\2\2\u0891\u0893\7\u02c1"+
		"\2\2\u0892\u0890\3\2\2\2\u0892\u0893\3\2\2\2\u0893\u0894\3\2\2\2\u0894"+
		"\u0895\7\37\2\2\u0895\u0897\3\2\2\2\u0896\u0880\3\2\2\2\u0896\u088b\3"+
		"\2\2\2\u0897\u0113\3\2\2\2\u0898\u0899\7\u0123\2\2\u0899\u089a\7\36\2"+
		"\2\u089a\u089b\5\u009aN\2\u089b\u089c\7S\2\2\u089c\u089d\5\u00e0q\2\u089d"+
		"\u089e\7\37\2\2\u089e\u0115\3\2\2\2\u089f\u08a0\7\u0080\2\2\u08a0\u08a1"+
		"\7\36\2\2\u08a1\u08a6\5\u00e0q\2\u08a2\u08a3\7$\2\2\u08a3\u08a5\5\u00e0"+
		"q\2\u08a4\u08a2\3\2\2\2\u08a5\u08a8\3\2\2\2\u08a6\u08a4\3\2\2\2\u08a6"+
		"\u08a7\3\2\2\2\u08a7\u08ab\3\2\2\2\u08a8\u08a6\3\2\2\2\u08a9\u08aa\7\\"+
		"\2\2\u08aa\u08ac\5\u0144\u00a3\2\u08ab\u08a9\3\2\2\2\u08ab\u08ac\3\2\2"+
		"\2\u08ac\u08ad\3\2\2\2\u08ad\u08ae\7\37\2\2\u08ae\u0117\3\2\2\2\u08af"+
		"\u08b0\7Q\2\2\u08b0\u08b1\7\36\2\2\u08b1\u08b2\t$\2\2\u08b2\u08b3\7\u02c0"+
		"\2\2\u08b3\u08b4\7S\2\2\u08b4\u08b5\7\u02c0\2\2\u08b5\u08b6\7\37\2\2\u08b6"+
		"\u0119\3\2\2\2\u08b7\u08b8\7J\2\2\u08b8\u08b9\7\36\2\2\u08b9\u08ba\5\u00a4"+
		"S\2\u08ba\u08bb\7\37\2\2\u08bb\u011b\3\2\2\2\u08bc\u08bd\7\u0179\2\2\u08bd"+
		"\u08be\7\36\2\2\u08be\u08c1\5\u00e0q\2\u08bf\u08c0\7^\2\2\u08c0\u08c2"+
		"\5\u0138\u009d\2\u08c1\u08bf\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2\u08c4\3"+
		"\2\2\2\u08c3\u08c5\5\u011e\u0090\2\u08c4\u08c3\3\2\2\2\u08c4\u08c5\3\2"+
		"\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7\7\37\2\2\u08c7\u011d\3\2\2\2\u08c8"+
		"\u08d4\7\u00f6\2\2\u08c9\u08ce\5\u0120\u0091\2\u08ca\u08cb\7$\2\2\u08cb"+
		"\u08cd\5\u0120\u0091\2\u08cc\u08ca\3\2\2\2\u08cd\u08d0\3\2\2\2\u08ce\u08cc"+
		"\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08d5\3\2\2\2\u08d0\u08ce\3\2\2\2\u08d1"+
		"\u08d2\7\u02c1\2\2\u08d2\u08d3\7\17\2\2\u08d3\u08d5\7\u02c1\2\2\u08d4"+
		"\u08c9\3\2\2\2\u08d4\u08d1\3\2\2\2\u08d5\u011f\3\2\2\2\u08d6\u08d8\7\u02c1"+
		"\2\2\u08d7\u08d9\t%\2\2\u08d8\u08d7\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9"+
		"\u08db\3\2\2\2\u08da\u08dc\7\u0151\2\2\u08db\u08da\3\2\2\2\u08db\u08dc"+
		"\3\2\2\2\u08dc\u0121\3\2\2\2\u08dd\u08de\5\u0124\u0093\2\u08de\u08e8\7"+
		"\36\2\2\u08df\u08e4\5\u00e0q\2\u08e0\u08e1\7$\2\2\u08e1\u08e3\5\u00e0"+
		"q\2\u08e2\u08e0\3\2\2\2\u08e3\u08e6\3\2\2\2\u08e4\u08e2\3\2\2\2\u08e4"+
		"\u08e5\3\2\2\2\u08e5\u08e9\3\2\2\2\u08e6\u08e4\3\2\2\2\u08e7\u08e9\7\20"+
		"\2\2\u08e8\u08df\3\2\2\2\u08e8\u08e7\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9"+
		"\u08ea\3\2\2\2\u08ea\u08eb\7\37\2\2\u08eb\u0123\3\2\2\2\u08ec\u0977\5"+
		"\u009aN\2\u08ed\u0977\7`\2\2\u08ee\u0977\7\u0196\2\2\u08ef\u0977\7\u022b"+
		"\2\2\u08f0\u0977\7\u0087\2\2\u08f1\u0977\7\u0088\2\2\u08f2\u0977\7\u0137"+
		"\2\2\u08f3\u0977\7\u00c3\2\2\u08f4\u0977\7\u0083\2\2\u08f5\u0977\7R\2"+
		"\2\u08f6\u0977\7\u00cd\2\2\u08f7\u0977\7\u00bb\2\2\u08f8\u0977\7Y\2\2"+
		"\u08f9\u0977\7Z\2\2\u08fa\u0977\7\u022c\2\2\u08fb\u0977\7\u022d\2\2\u08fc"+
		"\u0977\7\u0084\2\2\u08fd\u0977\7\u0232\2\2\u08fe\u0977\7\u0233\2\2\u08ff"+
		"\u0977\7\u008d\2\2\u0900\u0977\7\u0234\2\2\u0901\u0977\7\u0235\2\2\u0902"+
		"\u0977\7\u0236\2\2\u0903\u0977\7\u0237\2\2\u0904\u0977\7\u0242\2\2\u0905"+
		"\u0977\7\u0243\2\2\u0906\u0977\7\u0244\2\2\u0907\u0977\7\u0245\2\2\u0908"+
		"\u0977\7\u0246\2\2\u0909\u0977\7\u0247\2\2\u090a\u0977\7\u0248\2\2\u090b"+
		"\u0977\7\u0249\2\2\u090c\u0977\7\u0238\2\2\u090d\u0977\7\u024a\2\2\u090e"+
		"\u0977\7\u024b\2\2\u090f\u0977\7\u024c\2\2\u0910\u0977\7\u024d\2\2\u0911"+
		"\u0977\7\u024e\2\2\u0912\u0977\7\u024f\2\2\u0913\u0977\7\u0250\2\2\u0914"+
		"\u0977\7\u0251\2\2\u0915\u0977\7\u0252\2\2\u0916\u0977\7\u0253\2\2\u0917"+
		"\u0977\7\u0254\2\2\u0918\u0977\7\u0255\2\2\u0919\u0977\7\u0256\2\2\u091a"+
		"\u0977\7\u0257\2\2\u091b\u0977\7\u0258\2\2\u091c\u0977\7\u0259\2\2\u091d"+
		"\u0977\7\u025a\2\2\u091e\u0977\7\u025b\2\2\u091f\u0977\7\u025c\2\2\u0920"+
		"\u0977\7\u025d\2\2\u0921\u0977\7\u025e\2\2\u0922\u0977\7\u025f\2\2\u0923"+
		"\u0977\7\u0260\2\2\u0924\u0977\7\u0261\2\2\u0925\u0977\7\u0262\2\2\u0926"+
		"\u0977\7\u0263\2\2\u0927\u0977\7\u0264\2\2\u0928\u0977\7\u0265\2\2\u0929"+
		"\u0977\7\u0266\2\2\u092a\u0977\7\u0267\2\2\u092b\u0977\7\u0268\2\2\u092c"+
		"\u0977\7\u0269\2\2\u092d\u0977\7\u026a\2\2\u092e\u0977\7\u026b\2\2\u092f"+
		"\u0977\7\u026c\2\2\u0930\u0977\7\u026d\2\2\u0931\u0977\7\u026e\2\2\u0932"+
		"\u0977\7\u026f\2\2\u0933\u0977\7\u0270\2\2\u0934\u0977\7\u0271\2\2\u0935"+
		"\u0977\7\u0272\2\2\u0936\u0977\7\u0273\2\2\u0937\u0977\7\u0274\2\2\u0938"+
		"\u0977\7\u0275\2\2\u0939\u0977\7\u0276\2\2\u093a\u0977\7\u0277\2\2\u093b"+
		"\u0977\7\u0278\2\2\u093c\u0977\7\u0279\2\2\u093d\u0977\7\u027a\2\2\u093e"+
		"\u0977\7\u027b\2\2\u093f\u0977\7\u027c\2\2\u0940\u0977\7\u027d\2\2\u0941"+
		"\u0977\7\u027e\2\2\u0942\u0977\7\u027f\2\2\u0943\u0977\7\u0280\2\2\u0944"+
		"\u0977\7\u0281\2\2\u0945\u0977\7\u0282\2\2\u0946\u0977\7\u0283\2\2\u0947"+
		"\u0977\7\u0284\2\2\u0948\u0977\7\u0285\2\2\u0949\u0977\7\u0286\2\2\u094a"+
		"\u0977\7\u0287\2\2\u094b\u0977\7\u0288\2\2\u094c\u0977\7\u0289\2\2\u094d"+
		"\u0977\7\u028a\2\2\u094e\u0977\7\u028b\2\2\u094f\u0977\7\u028c\2\2\u0950"+
		"\u0977\7\u028d\2\2\u0951\u0977\7\u028e\2\2\u0952\u0977\7\u028f\2\2\u0953"+
		"\u0977\7\u0290\2\2\u0954\u0977\7\u0291\2\2\u0955\u0977\7\u0292\2\2\u0956"+
		"\u0977\7\u0293\2\2\u0957\u0977\7\u0294\2\2\u0958\u0977\7\u0295\2\2\u0959"+
		"\u0977\7\u0296\2\2\u095a\u0977\7\u0297\2\2\u095b\u0977\7\u0298\2\2\u095c"+
		"\u0977\7\u0299\2\2\u095d\u0977\7\u029a\2\2\u095e\u0977\7\u029b\2\2\u095f"+
		"\u0977\7\u029c\2\2\u0960\u0977\7\u029d\2\2\u0961\u0977\7\u029e\2\2\u0962"+
		"\u0977\7\u029f\2\2\u0963\u0977\7\u02a0\2\2\u0964\u0977\7\u02a1\2\2\u0965"+
		"\u0977\7\u0085\2\2\u0966\u0977\7\u0239\2\2\u0967\u0977\7\u0086\2\2\u0968"+
		"\u0977\7\u023a\2\2\u0969\u0977\7\u023b\2\2\u096a\u0977\7\u023c\2\2\u096b"+
		"\u0977\7\u023d\2\2\u096c\u0977\7\u023e\2\2\u096d\u0977\7\u023f\2\2\u096e"+
		"\u0977\7\u0240\2\2\u096f\u0977\7\u0241\2\2\u0970\u0977\7\u022e\2\2\u0971"+
		"\u0977\7\u022f\2\2\u0972\u0977\7\u0084\2\2\u0973\u0977\7\u0230\2\2\u0974"+
		"\u0977\7\u0231\2\2\u0975\u0977\3\2\2\2\u0976\u08ec\3\2\2\2\u0976\u08ed"+
		"\3\2\2\2\u0976\u08ee\3\2\2\2\u0976\u08ef\3\2\2\2\u0976\u08f0\3\2\2\2\u0976"+
		"\u08f1\3\2\2\2\u0976\u08f2\3\2\2\2\u0976\u08f3\3\2\2\2\u0976\u08f4\3\2"+
		"\2\2\u0976\u08f5\3\2\2\2\u0976\u08f6\3\2\2\2\u0976\u08f7\3\2\2\2\u0976"+
		"\u08f8\3\2\2\2\u0976\u08f9\3\2\2\2\u0976\u08fa\3\2\2\2\u0976\u08fb\3\2"+
		"\2\2\u0976\u08fc\3\2\2\2\u0976\u08fd\3\2\2\2\u0976\u08fe\3\2\2\2\u0976"+
		"\u08ff\3\2\2\2\u0976\u0900\3\2\2\2\u0976\u0901\3\2\2\2\u0976\u0902\3\2"+
		"\2\2\u0976\u0903\3\2\2\2\u0976\u0904\3\2\2\2\u0976\u0905\3\2\2\2\u0976"+
		"\u0906\3\2\2\2\u0976\u0907\3\2\2\2\u0976\u0908\3\2\2\2\u0976\u0909\3\2"+
		"\2\2\u0976\u090a\3\2\2\2\u0976\u090b\3\2\2\2\u0976\u090c\3\2\2\2\u0976"+
		"\u090d\3\2\2\2\u0976\u090e\3\2\2\2\u0976\u090f\3\2\2\2\u0976\u0910\3\2"+
		"\2\2\u0976\u0911\3\2\2\2\u0976\u0912\3\2\2\2\u0976\u0913\3\2\2\2\u0976"+
		"\u0914\3\2\2\2\u0976\u0915\3\2\2\2\u0976\u0916\3\2\2\2\u0976\u0917\3\2"+
		"\2\2\u0976\u0918\3\2\2\2\u0976\u0919\3\2\2\2\u0976\u091a\3\2\2\2\u0976"+
		"\u091b\3\2\2\2\u0976\u091c\3\2\2\2\u0976\u091d\3\2\2\2\u0976\u091e\3\2"+
		"\2\2\u0976\u091f\3\2\2\2\u0976\u0920\3\2\2\2\u0976\u0921\3\2\2\2\u0976"+
		"\u0922\3\2\2\2\u0976\u0923\3\2\2\2\u0976\u0924\3\2\2\2\u0976\u0925\3\2"+
		"\2\2\u0976\u0926\3\2\2\2\u0976\u0927\3\2\2\2\u0976\u0928\3\2\2\2\u0976"+
		"\u0929\3\2\2\2\u0976\u092a\3\2\2\2\u0976\u092b\3\2\2\2\u0976\u092c\3\2"+
		"\2\2\u0976\u092d\3\2\2\2\u0976\u092e\3\2\2\2\u0976\u092f\3\2\2\2\u0976"+
		"\u0930\3\2\2\2\u0976\u0931\3\2\2\2\u0976\u0932\3\2\2\2\u0976\u0933\3\2"+
		"\2\2\u0976\u0934\3\2\2\2\u0976\u0935\3\2\2\2\u0976\u0936\3\2\2\2\u0976"+
		"\u0937\3\2\2\2\u0976\u0938\3\2\2\2\u0976\u0939\3\2\2\2\u0976\u093a\3\2"+
		"\2\2\u0976\u093b\3\2\2\2\u0976\u093c\3\2\2\2\u0976\u093d\3\2\2\2\u0976"+
		"\u093e\3\2\2\2\u0976\u093f\3\2\2\2\u0976\u0940\3\2\2\2\u0976\u0941\3\2"+
		"\2\2\u0976\u0942\3\2\2\2\u0976\u0943\3\2\2\2\u0976\u0944\3\2\2\2\u0976"+
		"\u0945\3\2\2\2\u0976\u0946\3\2\2\2\u0976\u0947\3\2\2\2\u0976\u0948\3\2"+
		"\2\2\u0976\u0949\3\2\2\2\u0976\u094a\3\2\2\2\u0976\u094b\3\2\2\2\u0976"+
		"\u094c\3\2\2\2\u0976\u094d\3\2\2\2\u0976\u094e\3\2\2\2\u0976\u094f\3\2"+
		"\2\2\u0976\u0950\3\2\2\2\u0976\u0951\3\2\2\2\u0976\u0952\3\2\2\2\u0976"+
		"\u0953\3\2\2\2\u0976\u0954\3\2\2\2\u0976\u0955\3\2\2\2\u0976\u0956\3\2"+
		"\2\2\u0976\u0957\3\2\2\2\u0976\u0958\3\2\2\2\u0976\u0959\3\2\2\2\u0976"+
		"\u095a\3\2\2\2\u0976\u095b\3\2\2\2\u0976\u095c\3\2\2\2\u0976\u095d\3\2"+
		"\2\2\u0976\u095e\3\2\2\2\u0976\u095f\3\2\2\2\u0976\u0960\3\2\2\2\u0976"+
		"\u0961\3\2\2\2\u0976\u0962\3\2\2\2\u0976\u0963\3\2\2\2\u0976\u0964\3\2"+
		"\2\2\u0976\u0965\3\2\2\2\u0976\u0966\3\2\2\2\u0976\u0967\3\2\2\2\u0976"+
		"\u0968\3\2\2\2\u0976\u0969\3\2\2\2\u0976\u096a\3\2\2\2\u0976\u096b\3\2"+
		"\2\2\u0976\u096c\3\2\2\2\u0976\u096d\3\2\2\2\u0976\u096e\3\2\2\2\u0976"+
		"\u096f\3\2\2\2\u0976\u0970\3\2\2\2\u0976\u0971\3\2\2\2\u0976\u0972\3\2"+
		"\2\2\u0976\u0973\3\2\2\2\u0976\u0974\3\2\2\2\u0976\u0975\3\2\2\2\u0977"+
		"\u0125\3\2\2\2\u0978\u0979\7\u0134\2\2\u0979\u097a\5\u00ba^\2\u097a\u097b"+
		"\7\u015f\2\2\u097b\u097d\5\u00e0q\2\u097c\u097e\5\u0128\u0095\2\u097d"+
		"\u097c\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u0127\3\2\2\2\u097f\u0980\7n"+
		"\2\2\u0980\u0981\7T\2\2\u0981\u0982\7\u0160\2\2\u0982\u0991\7\u0161\2"+
		"\2\u0983\u0984\7n\2\2\u0984\u0985\7T\2\2\u0985\u0986\7\u0160\2\2\u0986"+
		"\u0987\7\u0161\2\2\u0987\u0988\7K\2\2\u0988\u0989\7\u0162\2\2\u0989\u0991"+
		"\7\u0164\2\2\u098a\u098b\7n\2\2\u098b\u098c\7~\2\2\u098c\u0991\7\u0161"+
		"\2\2\u098d\u098e\7K\2\2\u098e\u098f\7\u0162\2\2\u098f\u0991\7\u0164\2"+
		"\2\u0990\u097f\3\2\2\2\u0990\u0983\3\2\2\2\u0990\u098a\3\2\2\2\u0990\u098d"+
		"\3\2\2\2\u0991\u0129\3\2\2\2\u0992\u0994\7N\2\2\u0993\u0995\5\u00eex\2"+
		"\u0994\u0993\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u0997\3\2\2\2\u0996\u0998"+
		"\5\u012c\u0097\2\u0997\u0996\3\2\2\2\u0998\u0999\3\2\2\2\u0999\u0997\3"+
		"\2\2\2\u0999\u099a\3\2\2\2\u099a\u099c\3\2\2\2\u099b\u099d\5\u012e\u0098"+
		"\2\u099c\u099b\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u099f"+
		"\7\u011c\2\2\u099f\u012b\3\2\2\2\u09a0\u09a1\7O\2\2\u09a1\u09a2\5\u00e0"+
		"q\2\u09a2\u09a3\7b\2\2\u09a3\u09a4\5\u00e0q\2\u09a4\u012d\3\2\2\2\u09a5"+
		"\u09a6\7a\2\2\u09a6\u09a7\5\u00e0q\2\u09a7\u012f\3\2\2\2\u09a8\u09a9\7"+
		"\u0083\2\2\u09a9\u09aa\5\u00e0q\2\u09aa\u09ab\5\u0132\u009a\2\u09ab\u0131"+
		"\3\2\2\2\u09ac\u09ad\t&\2\2\u09ad\u0133\3\2\2\2\u09ae\u09af\7r\2\2\u09af"+
		"\u09b0\7t\2\2\u09b0\u09b5\5\u0136\u009c\2\u09b1\u09b2\7$\2\2\u09b2\u09b4"+
		"\5\u0136\u009c\2\u09b3\u09b1\3\2\2\2\u09b4\u09b7\3\2\2\2\u09b5\u09b3\3"+
		"\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u0135\3\2\2\2\u09b7\u09b5\3\2\2\2\u09b8"+
		"\u09bc\5\u00a4S\2\u09b9\u09bc\5\u008aF\2\u09ba\u09bc\5\u00e0q\2\u09bb"+
		"\u09b8\3\2\2\2\u09bb\u09b9\3\2\2\2\u09bb\u09ba\3\2\2\2\u09bc\u09be\3\2"+
		"\2\2\u09bd\u09bf\t%\2\2\u09be\u09bd\3\2\2\2\u09be\u09bf\3\2\2\2\u09bf"+
		"\u0137\3\2\2\2\u09c0\u09c2\5\u013a\u009e\2\u09c1\u09c3\5\u013c\u009f\2"+
		"\u09c2\u09c1\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09c5\3\2\2\2\u09c4\u09c6"+
		"\5\u0140\u00a1\2\u09c5\u09c4\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u09c8\3"+
		"\2\2\2\u09c7\u09c9\5\u0142\u00a2\2\u09c8\u09c7\3\2\2\2\u09c8\u09c9\3\2"+
		"\2\2\u09c9\u09cb\3\2\2\2\u09ca\u09cc\7\u015a\2\2\u09cb\u09ca\3\2\2\2\u09cb"+
		"\u09cc\3\2\2\2\u09cc\u09d6\3\2\2\2\u09cd\u09ce\5\u013a\u009e\2\u09ce\u09d0"+
		"\5\u013e\u00a0\2\u09cf\u09d1\5\u0140\u00a1\2\u09d0\u09cf\3\2\2\2\u09d0"+
		"\u09d1\3\2\2\2\u09d1\u09d3\3\2\2\2\u09d2\u09d4\5\u0142\u00a2\2\u09d3\u09d2"+
		"\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09d6\3\2\2\2\u09d5\u09c0\3\2\2\2\u09d5"+
		"\u09cd\3\2\2\2\u09d6\u0139\3\2\2\2\u09d7\u09d9\t\'\2\2\u09d8\u09d7\3\2"+
		"\2\2\u09d8\u09d9\3\2\2\2\u09d9\u09da\3\2\2\2\u09da\u0a07\7\u00aa\2\2\u09db"+
		"\u0a07\7\u00ae\2\2\u09dc\u0a07\7\u00af\2\2\u09dd\u0a07\7\u00b0\2\2\u09de"+
		"\u0a07\7\u00b1\2\2\u09df\u0a07\7\u00b2\2\2\u09e0\u0a07\7\u00ac\2\2\u09e1"+
		"\u0a07\7\u00b3\2\2\u09e2\u0a07\7\u00b4\2\2\u09e3\u0a07\7\177\2\2\u09e4"+
		"\u0a07\7\u02a2\2\2\u09e5\u0a07\7\u02a3\2\2\u09e6\u0a07\7~\2\2\u09e7\u0a07"+
		"\7\u02a4\2\2\u09e8\u0a07\7\u0084\2\2\u09e9\u0a07\7\u00b5\2\2\u09ea\u0a07"+
		"\7\u0086\2\2\u09eb\u0a07\7\u0085\2\2\u09ec\u0a07\7\u0089\2\2\u09ed\u0a07"+
		"\7\u0080\2\2\u09ee\u0a07\7\u02a5\2\2\u09ef\u0a07\7\u00da\2\2\u09f0\u0a07"+
		"\7\u02a6\2\2\u09f1\u0a07\7\u02a7\2\2\u09f2\u0a07\7\u02a8\2\2\u09f3\u0a07"+
		"\7\u02a9\2\2\u09f4\u0a07\7\u02aa\2\2\u09f5\u0a07\7\u02ab\2\2\u09f6\u0a07"+
		"\7\u02ac\2\2\u09f7\u0a07\7\u02ad\2\2\u09f8\u0a07\7\u02ae\2\2\u09f9\u0a07"+
		"\7\u02af\2\2\u09fa\u0a07\7:\2\2\u09fb\u0a07\7\u02b0\2\2\u09fc\u0a07\7"+
		"\u0248\2\2\u09fd\u0a07\7\u0244\2\2\u09fe\u0a07\7\u0249\2\2\u09ff\u0a07"+
		"\7\u0246\2\2\u0a00\u0a07\7\u0245\2\2\u0a01\u0a07\7\u0247\2\2\u0a02\u0a07"+
		"\7\u0243\2\2\u0a03\u0a07\7\u02b1\2\2\u0a04\u0a07\7\u00e8\2\2\u0a05\u0a07"+
		"\7\u00e9\2\2\u0a06\u09d8\3\2\2\2\u0a06\u09db\3\2\2\2\u0a06\u09dc\3\2\2"+
		"\2\u0a06\u09dd\3\2\2\2\u0a06\u09de\3\2\2\2\u0a06\u09df\3\2\2\2\u0a06\u09e0"+
		"\3\2\2\2\u0a06\u09e1\3\2\2\2\u0a06\u09e2\3\2\2\2\u0a06\u09e3\3\2\2\2\u0a06"+
		"\u09e4\3\2\2\2\u0a06\u09e5\3\2\2\2\u0a06\u09e6\3\2\2\2\u0a06\u09e7\3\2"+
		"\2\2\u0a06\u09e8\3\2\2\2\u0a06\u09e9\3\2\2\2\u0a06\u09ea\3\2\2\2\u0a06"+
		"\u09eb\3\2\2\2\u0a06\u09ec\3\2\2\2\u0a06\u09ed\3\2\2\2\u0a06\u09ee\3\2"+
		"\2\2\u0a06\u09ef\3\2\2\2\u0a06\u09f0\3\2\2\2\u0a06\u09f1\3\2\2\2\u0a06"+
		"\u09f2\3\2\2\2\u0a06\u09f3\3\2\2\2\u0a06\u09f4\3\2\2\2\u0a06\u09f5\3\2"+
		"\2\2\u0a06\u09f6\3\2\2\2\u0a06\u09f7\3\2\2\2\u0a06\u09f8\3\2\2\2\u0a06"+
		"\u09f9\3\2\2\2\u0a06\u09fa\3\2\2\2\u0a06\u09fb\3\2\2\2\u0a06\u09fc\3\2"+
		"\2\2\u0a06\u09fd\3\2\2\2\u0a06\u09fe\3\2\2\2\u0a06\u09ff\3\2\2\2\u0a06"+
		"\u0a00\3\2\2\2\u0a06\u0a01\3\2\2\2\u0a06\u0a02\3\2\2\2\u0a06\u0a03\3\2"+
		"\2\2\u0a06\u0a04\3\2\2\2\u0a06\u0a05\3\2\2\2\u0a07\u013b\3\2\2\2\u0a08"+
		"\u0a09\7\36\2\2\u0a09\u0a0c\7\u02c1\2\2\u0a0a\u0a0b\7$\2\2\u0a0b\u0a0d"+
		"\7\u02c1\2\2\u0a0c\u0a0a\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u0a0e\3\2\2"+
		"\2\u0a0e\u0a0f\7\37\2\2\u0a0f\u013d\3\2\2\2\u0a10\u0a11\7\36\2\2\u0a11"+
		"\u0a16\7\u02c0\2\2\u0a12\u0a13\7$\2\2\u0a13\u0a15\7\u02c0\2\2\u0a14\u0a12"+
		"\3\2\2\2\u0a15\u0a18\3\2\2\2\u0a16\u0a14\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17"+
		"\u0a19\3\2\2\2\u0a18\u0a16\3\2\2\2\u0a19\u0a1a\7\37\2\2\u0a1a\u013f\3"+
		"\2\2\2\u0a1b\u0a1c\t(\2\2\u0a1c\u0a1e\7:\2\2\u0a1d\u0a1f\7\27\2\2\u0a1e"+
		"\u0a1d\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0a21\5\u0144"+
		"\u00a3\2\u0a21\u0141\3\2\2\2\u0a22\u0a24\7\u010c\2\2\u0a23\u0a25\7\27"+
		"\2\2\u0a24\u0a23\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a28\3\2\2\2\u0a26"+
		"\u0a29\7\u02c0\2\2\u0a27\u0a29\5\u0144\u00a3\2\u0a28\u0a26\3\2\2\2\u0a28"+
		"\u0a27\3\2\2\2\u0a29\u0143\3\2\2\2\u0a2a\u0a2d\5\u009aN\2\u0a2b\u0a2c"+
		"\7\23\2\2\u0a2c\u0a2e\5\u009aN\2\u0a2d\u0a2b\3\2\2\2\u0a2d\u0a2e\3\2\2"+
		"\2\u0a2e\u0145\3\2\2\2\u0a2f\u0a34\5\u0144\u00a3\2\u0a30\u0a31\7$\2\2"+
		"\u0a31\u0a33\5\u0144\u00a3\2\u0a32\u0a30\3\2\2\2\u0a33\u0a36\3\2\2\2\u0a34"+
		"\u0a32\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0147\3\2\2\2\u0a36\u0a34\3\2"+
		"\2\2\u0a37\u0a39\7\62\2\2\u0a38\u0a3a\5\u018e\u00c8\2\u0a39\u0a38\3\2"+
		"\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0a3c\7;\2\2\u0a3c"+
		"\u0a3d\5\u0190\u00c9\2\u0a3d\u0a40\5\u00a2R\2\u0a3e\u0a41\5\u0192\u00ca"+
		"\2\u0a3f\u0a41\5\u01b8\u00dd\2\u0a40\u0a3e\3\2\2\2\u0a40\u0a3f\3\2\2\2"+
		"\u0a41\u0149\3\2\2\2\u0a42\u0a43\7\63\2\2\u0a43\u0a44\7;\2\2\u0a44\u0a46"+
		"\5\u00a2R\2\u0a45\u0a47\5\u01bc\u00df\2\u0a46\u0a45\3\2\2\2\u0a46\u0a47"+
		"\3\2\2\2\u0a47\u014b\3\2\2\2\u0a48\u0a49\7\64\2\2\u0a49\u0a4a\5\u01e8"+
		"\u00f5\2\u0a4a\u0a4b\7;\2\2\u0a4b\u0a4c\5\u01ea\u00f6\2\u0a4c\u0a4d\5"+
		"\u00b8]\2\u0a4d\u014d\3\2\2\2\u0a4e\u0a4f\7\64\2\2\u0a4f\u0a51\7=\2\2"+
		"\u0a50\u0a52\5\u01ec\u00f7\2\u0a51\u0a50\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52"+
		"\u0a53\3\2\2\2\u0a53\u0a56\5\u00a6T\2\u0a54\u0a55\7_\2\2\u0a55\u0a57\5"+
		"\u00a2R\2\u0a56\u0a54\3\2\2\2\u0a56\u0a57\3\2\2\2\u0a57\u0a64\3\2\2\2"+
		"\u0a58\u0a5a\7\u00ff\2\2\u0a59\u0a5b\7\27\2\2\u0a5a\u0a59\3\2\2\2\u0a5a"+
		"\u0a5b\3\2\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a63\t)\2\2\u0a5d\u0a5f\7\u0133"+
		"\2\2\u0a5e\u0a60\7\27\2\2\u0a5f\u0a5e\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60"+
		"\u0a61\3\2\2\2\u0a61\u0a63\t*\2\2\u0a62\u0a58\3\2\2\2\u0a62\u0a5d\3\2"+
		"\2\2\u0a63\u0a66\3\2\2\2\u0a64\u0a62\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65"+
		"\u014f\3\2\2\2\u0a66\u0a64\3\2\2\2\u0a67\u0a69\7\65\2\2\u0a68\u0a6a\7"+
		";\2\2\u0a69\u0a68\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b"+
		"\u0a6c\5\u00a2R\2\u0a6c\u0151\3\2\2\2\u0a6d\u0a6e\7\62\2\2\u0a6e\u0a6f"+
		"\5\u01ba\u00de\2\u0a6f\u0a70\7=\2\2\u0a70\u0a72\5\u00a6T\2\u0a71\u0a73"+
		"\5\u01a6\u00d4\2\u0a72\u0a71\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73\u0a74\3"+
		"\2\2\2\u0a74\u0a75\7_\2\2\u0a75\u0a76\5\u00a2R\2\u0a76\u0a78\5\u01a8\u00d5"+
		"\2\u0a77\u0a79\5\u01ac\u00d7\2\u0a78\u0a77\3\2\2\2\u0a78\u0a79\3\2\2\2"+
		"\u0a79\u0a86\3\2\2\2\u0a7a\u0a7c\7\u00ff\2\2\u0a7b\u0a7d\7\27\2\2\u0a7c"+
		"\u0a7b\3\2\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d\u0a7e\3\2\2\2\u0a7e\u0a85\t)"+
		"\2\2\u0a7f\u0a81\7\u0133\2\2\u0a80\u0a82\7\27\2\2\u0a81\u0a80\3\2\2\2"+
		"\u0a81\u0a82\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0a85\t*\2\2\u0a84\u0a7a"+
		"\3\2\2\2\u0a84\u0a7f\3\2\2\2\u0a85\u0a88\3\2\2\2\u0a86\u0a84\3\2\2\2\u0a86"+
		"\u0a87\3\2\2\2\u0a87\u0153\3\2\2\2\u0a88\u0a86\3\2\2\2\u0a89\u0a8a\7\62"+
		"\2\2\u0a8a\u0a8e\t+\2\2\u0a8b\u0a8c\7`\2\2\u0a8c\u0a8d\7h\2\2\u0a8d\u0a8f"+
		"\7l\2\2\u0a8e\u0a8b\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u0a90\3\2\2\2\u0a90"+
		"\u0a94\5\u00a0Q\2\u0a91\u0a93\5\u0158\u00ad\2\u0a92\u0a91\3\2\2\2\u0a93"+
		"\u0a96\3\2\2\2\u0a94\u0a92\3\2\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0155\3\2"+
		"\2\2\u0a96\u0a94\3\2\2\2\u0a97\u0a98\7\63\2\2\u0a98\u0a99\t+\2\2\u0a99"+
		"\u0a9d\5\u00a0Q\2\u0a9a\u0a9c\5\u0158\u00ad\2\u0a9b\u0a9a\3\2\2\2\u0a9c"+
		"\u0a9f\3\2\2\2\u0a9d\u0a9b\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0157\3\2"+
		"\2\2\u0a9f\u0a9d\3\2\2\2\u0aa0\u0aa2\7\u0097\2\2\u0aa1\u0aa0\3\2\2\2\u0aa1"+
		"\u0aa2\3\2\2\2\u0aa2\u0aa6\3\2\2\2\u0aa3\u0aa4\7\u0081\2\2\u0aa4\u0aa7"+
		"\7:\2\2\u0aa5\u0aa7\7\u0107\2\2\u0aa6\u0aa3\3\2\2\2\u0aa6\u0aa5\3\2\2"+
		"\2\u0aa7\u0aa9\3\2\2\2\u0aa8\u0aaa\7\27\2\2\u0aa9\u0aa8\3\2\2\2\u0aa9"+
		"\u0aaa\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0ab9\5\u0096L\2\u0aac\u0aae"+
		"\7\u0097\2\2\u0aad\u0aac\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0aaf\3\2\2"+
		"\2\u0aaf\u0ab1\7\u010c\2\2\u0ab0\u0ab2\7\27\2\2\u0ab1\u0ab0\3\2\2\2\u0ab1"+
		"\u0ab2\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u0ab9\5\u0098M\2\u0ab4\u0ab5"+
		"\7\u0097\2\2\u0ab5\u0ab6\7\u011b\2\2\u0ab6\u0ab7\7\27\2\2\u0ab7\u0ab9"+
		"\7\u02c6\2\2\u0ab8\u0aa1\3\2\2\2\u0ab8\u0aad\3\2\2\2\u0ab8\u0ab4\3\2\2"+
		"\2\u0ab9\u0159\3\2\2\2\u0aba\u0abb\7\64\2\2\u0abb\u0abe\t+\2\2\u0abc\u0abd"+
		"\7`\2\2\u0abd\u0abf\7l\2\2\u0abe\u0abc\3\2\2\2\u0abe\u0abf\3\2\2\2\u0abf"+
		"\u0ac0\3\2\2\2\u0ac0\u0ac1\5\u00a0Q\2\u0ac1\u015b\3\2\2\2\u0ac2\u0ac3"+
		"\7\63\2\2\u0ac3\u0ac4\7\u009c\2\2\u0ac4\u0ac5\5\u015e\u00b0\2\u0ac5\u015d"+
		"\3\2\2\2\u0ac6\u0ac7\7\u01a3\2\2\u0ac7\u0ac8\7\u02c4\2\2\u0ac8\u0ac9\7"+
		"\u01a4\2\2\u0ac9\u0ad7\7B\2\2\u0aca\u0acb\7\u01a3\2\2\u0acb\u0acc\7\u01a5"+
		"\2\2\u0acc\u0acd\7\u01a4\2\2\u0acd\u0ad7\7B\2\2\u0ace\u0acf\7\u0149\2"+
		"\2\u0acf\u0ad4\7\u02c5\2\2\u0ad0\u0ad1\7\u00f7\2\2\u0ad1\u0ad2\7|\2\2"+
		"\u0ad2\u0ad3\7_\2\2\u0ad3\u0ad5\7\u01a6\2\2\u0ad4\u0ad0\3\2\2\2\u0ad4"+
		"\u0ad5\3\2\2\2\u0ad5\u0ad7\3\2\2\2\u0ad6\u0ac6\3\2\2\2\u0ad6\u0aca\3\2"+
		"\2\2\u0ad6\u0ace\3\2\2\2\u0ad7\u015f\3\2\2\2\u0ad8\u0ada\7\62\2\2\u0ad9"+
		"\u0adb\5\u01ee\u00f8\2\u0ada\u0ad9\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0adc"+
		"\3\2\2\2\u0adc\u0ae0\7\u011e\2\2\u0add\u0ade\7`\2\2\u0ade\u0adf\7h\2\2"+
		"\u0adf\u0ae1\7l\2\2\u0ae0\u0add\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae2"+
		"\3\2\2\2\u0ae2\u0ae3\5\u00aaV\2\u0ae3\u0ae4\7_\2\2\u0ae4\u0ae5\7\u01a7"+
		"\2\2\u0ae5\u0aec\5\u01f0\u00f9\2\u0ae6\u0ae7\7_\2\2\u0ae7\u0ae9\7\u01a8"+
		"\2\2\u0ae8\u0aea\7h\2\2\u0ae9\u0ae8\3\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea"+
		"\u0aeb\3\2\2\2\u0aeb\u0aed\7\u009d\2\2\u0aec\u0ae6\3\2\2\2\u0aec\u0aed"+
		"\3\2\2\2\u0aed\u0af3\3\2\2\2\u0aee\u0af4\7\u0099\2\2\u0aef\u0af4\7\u009a"+
		"\2\2\u0af0\u0af1\7\u009a\2\2\u0af1\u0af2\7_\2\2\u0af2\u0af4\7\u0158\2"+
		"\2\u0af3\u0aee\3\2\2\2\u0af3\u0aef\3\2\2\2\u0af3\u0af0\3\2\2\2\u0af3\u0af4"+
		"\3\2\2\2\u0af4\u0af7\3\2\2\2\u0af5\u0af6\7\u010d\2\2\u0af6\u0af8\7\u02c0"+
		"\2\2\u0af7\u0af5\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8\u0af9\3\2\2\2\u0af9"+
		"\u0afa\7\u009e\2\2\u0afa\u0afb\5\u01f4\u00fb\2\u0afb\u0161\3\2\2\2\u0afc"+
		"\u0afe\7\63\2\2\u0afd\u0aff\5\u01ee\u00f8\2\u0afe\u0afd\3\2\2\2\u0afe"+
		"\u0aff\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00\u0b01\7\u011e\2\2\u0b01\u0b05"+
		"\5\u00aaV\2\u0b02\u0b03\7_\2\2\u0b03\u0b04\7\u01a7\2\2\u0b04\u0b06\5\u01f0"+
		"\u00f9\2\u0b05\u0b02\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u0b0d\3\2\2\2\u0b07"+
		"\u0b08\7_\2\2\u0b08\u0b0a\7\u01a8\2\2\u0b09\u0b0b\7h\2\2\u0b0a\u0b09\3"+
		"\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b0e\7\u009d\2\2"+
		"\u0b0d\u0b07\3\2\2\2\u0b0d\u0b0e\3\2\2\2\u0b0e\u0b12\3\2\2\2\u0b0f\u0b10"+
		"\7\u014b\2\2\u0b10\u0b11\7d\2\2\u0b11\u0b13\5\u00aaV\2\u0b12\u0b0f\3\2"+
		"\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b19\3\2\2\2\u0b14\u0b1a\7\u0099\2\2\u0b15"+
		"\u0b1a\7\u009a\2\2\u0b16\u0b17\7\u009a\2\2\u0b17\u0b18\7_\2\2\u0b18\u0b1a"+
		"\7\u0158\2\2\u0b19\u0b14\3\2\2\2\u0b19\u0b15\3\2\2\2\u0b19\u0b16\3\2\2"+
		"\2\u0b19\u0b1a\3\2\2\2\u0b1a\u0b1d\3\2\2\2\u0b1b\u0b1c\7\u010d\2\2\u0b1c"+
		"\u0b1e\7\u02c0\2\2\u0b1d\u0b1b\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b21"+
		"\3\2\2\2\u0b1f\u0b20\7\u009e\2\2\u0b20\u0b22\5\u01f4\u00fb\2\u0b21\u0b1f"+
		"\3\2\2\2\u0b21\u0b22\3\2\2\2\u0b22\u0163\3\2\2\2\u0b23\u0b24\7\64\2\2"+
		"\u0b24\u0b27\7\u011e\2\2\u0b25\u0b26\7`\2\2\u0b26\u0b28\7l\2\2\u0b27\u0b25"+
		"\3\2\2\2\u0b27\u0b28\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b2a\5\u00aaV"+
		"\2\u0b2a\u0165\3\2\2\2\u0b2b\u0b2d\7\62\2\2\u0b2c\u0b2e\5\u01ee\u00f8"+
		"\2\u0b2d\u0b2c\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b30"+
		"\7E\2\2\u0b30\u0b31\5\u00b0Y\2\u0b31\u0b35\7\36\2\2\u0b32\u0b33\5\u009a"+
		"N\2\u0b33\u0b34\5\u0138\u009d\2\u0b34\u0b36\3\2\2\2\u0b35\u0b32\3\2\2"+
		"\2\u0b35\u0b36\3\2\2\2\u0b36\u0b3d\3\2\2\2\u0b37\u0b38\7$\2\2\u0b38\u0b39"+
		"\5\u009aN\2\u0b39\u0b3a\5\u0138\u009d\2\u0b3a\u0b3c\3\2\2\2\u0b3b\u0b37"+
		"\3\2\2\2\u0b3c\u0b3f\3\2\2\2\u0b3d\u0b3b\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e"+
		"\u0b40\3\2\2\2\u0b3f\u0b3d\3\2\2\2\u0b40\u0b41\7\37\2\2\u0b41\u0b42\7"+
		"\u01b4\2\2\u0b42\u0b46\5\u0138\u009d\2\u0b43\u0b45\5\u01f8\u00fd\2\u0b44"+
		"\u0b43\3\2\2\2\u0b45\u0b48\3\2\2\2\u0b46\u0b44\3\2\2\2\u0b46\u0b47\3\2"+
		"\2\2\u0b47\u0b49\3\2\2\2\u0b48\u0b46\3\2\2\2\u0b49\u0b4a\5\u01f4\u00fb"+
		"\2\u0b4a\u0167\3\2\2\2\u0b4b\u0b4c\7\63\2\2\u0b4c\u0b4d\7E\2\2\u0b4d\u0b51"+
		"\5\u00b0Y\2\u0b4e\u0b50\5\u01f8\u00fd\2\u0b4f\u0b4e\3\2\2\2\u0b50\u0b53"+
		"\3\2\2\2\u0b51\u0b4f\3\2\2\2\u0b51\u0b52\3\2\2\2\u0b52\u0169\3\2\2\2\u0b53"+
		"\u0b51\3\2\2\2\u0b54\u0b55\7\64\2\2\u0b55\u0b56\7E\2\2\u0b56\u0b57\7`"+
		"\2\2\u0b57\u0b58\7l\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5a\5\u00b0Y\2\u0b5a"+
		"\u016b\3\2\2\2\u0b5b\u0b5d\7\62\2\2\u0b5c\u0b5e\5\u01ee\u00f8\2\u0b5d"+
		"\u0b5c\3\2\2\2\u0b5d\u0b5e\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b60\7G"+
		"\2\2\u0b60\u0b61\5\u00b0Y\2\u0b61\u0b63\7\36\2\2\u0b62\u0b64\5\u01fa\u00fe"+
		"\2\u0b63\u0b62\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64\u0b69\3\2\2\2\u0b65\u0b66"+
		"\7$\2\2\u0b66\u0b68\5\u01fa\u00fe\2\u0b67\u0b65\3\2\2\2\u0b68\u0b6b\3"+
		"\2\2\2\u0b69\u0b67\3\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b6c\3\2\2\2\u0b6b"+
		"\u0b69\3\2\2\2\u0b6c\u0b70\7\37\2\2\u0b6d\u0b6f\5\u01f8\u00fd\2\u0b6e"+
		"\u0b6d\3\2\2\2\u0b6f\u0b72\3\2\2\2\u0b70\u0b6e\3\2\2\2\u0b70\u0b71\3\2"+
		"\2\2\u0b71\u0b73\3\2\2\2\u0b72\u0b70\3\2\2\2\u0b73\u0b74\5\u01f4\u00fb"+
		"\2\u0b74\u016d\3\2\2\2\u0b75\u0b76\7\63\2\2\u0b76\u0b77\7G\2\2\u0b77\u0b7b"+
		"\5\u00b0Y\2\u0b78\u0b7a\5\u01f8\u00fd\2\u0b79\u0b78\3\2\2\2\u0b7a\u0b7d"+
		"\3\2\2\2\u0b7b\u0b79\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u016f\3\2\2\2\u0b7d"+
		"\u0b7b\3\2\2\2\u0b7e\u0b7f\7\64\2\2\u0b7f\u0b82\7G\2\2\u0b80\u0b81\7`"+
		"\2\2\u0b81\u0b83\7l\2\2\u0b82\u0b80\3\2\2\2\u0b82\u0b83\3\2\2\2\u0b83"+
		"\u0b84\3\2\2\2\u0b84\u0b85\5\u00b0Y\2\u0b85\u0171\3\2\2\2\u0b86\u0b87"+
		"\7\62\2\2\u0b87\u0b88\7\u01af\2\2\u0b88\u0b89\5\u00acW\2\u0b89\u0b8a\7"+
		"A\2\2\u0b8a\u0b8b\7\u0115\2\2\u0b8b\u0b8c\7\u01b0\2\2\u0b8c\u0b8d\5\u00ae"+
		"X\2\u0b8d\u0b8e\7\u01b1\2\2\u0b8e\u0b8f\7\36\2\2\u0b8f\u0b94\5\u01f6\u00fc"+
		"\2\u0b90\u0b91\7$\2\2\u0b91\u0b93\5\u01f6\u00fc\2\u0b92\u0b90\3\2\2\2"+
		"\u0b93\u0b96\3\2\2\2\u0b94\u0b92\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0b97"+
		"\3\2\2\2\u0b96\u0b94\3\2\2\2\u0b97\u0b98\7\37\2\2\u0b98\u0173\3\2\2\2"+
		"\u0b99\u0b9a\7\63\2\2\u0b9a\u0b9b\7\u01af\2\2\u0b9b\u0b9c\5\u00acW\2\u0b9c"+
		"\u0b9d\7\u01b1\2\2\u0b9d\u0b9e\7\36\2\2\u0b9e\u0ba3\5\u01f6\u00fc\2\u0b9f"+
		"\u0ba0\7$\2\2\u0ba0\u0ba2\5\u01f6\u00fc\2\u0ba1\u0b9f\3\2\2\2\u0ba2\u0ba5"+
		"\3\2\2\2\u0ba3\u0ba1\3\2\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0ba6\3\2\2\2\u0ba5"+
		"\u0ba3\3\2\2\2\u0ba6\u0ba7\7\37\2\2\u0ba7\u0175\3\2\2\2\u0ba8\u0ba9\7"+
		"\64\2\2\u0ba9\u0bac\7\u01af\2\2\u0baa\u0bab\7`\2\2\u0bab\u0bad\7l\2\2"+
		"\u0bac\u0baa\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0baf"+
		"\5\u00acW\2\u0baf\u0177\3\2\2\2\u0bb0\u0bb3\7\62\2\2\u0bb1\u0bb2\7f\2"+
		"\2\u0bb2\u0bb4\7\u00c3\2\2\u0bb3\u0bb1\3\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4"+
		"\u0bb8\3\2\2\2\u0bb5\u0bb6\7\u00ff\2\2\u0bb6\u0bb7\7\27\2\2\u0bb7\u0bb9"+
		"\t,\2\2\u0bb8\u0bb5\3\2\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9\u0bbb\3\2\2\2\u0bba"+
		"\u0bbc\5\u01ee\u00f8\2\u0bbb\u0bba\3\2\2\2\u0bbb\u0bbc\3\2\2\2\u0bbc\u0bc0"+
		"\3\2\2\2\u0bbd\u0bbe\7\u00a1\2\2\u0bbe\u0bbf\7\u01b8\2\2\u0bbf\u0bc1\t"+
		"-\2\2\u0bc0\u0bbd\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2"+
		"\u0bc3\7H\2\2\u0bc3\u0bcf\5\u00b2Z\2\u0bc4\u0bc5\7\36\2\2\u0bc5\u0bca"+
		"\5\u009aN\2\u0bc6\u0bc7\7$\2\2\u0bc7\u0bc9\5\u009aN\2\u0bc8\u0bc6\3\2"+
		"\2\2\u0bc9\u0bcc\3\2\2\2\u0bca\u0bc8\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb"+
		"\u0bcd\3\2\2\2\u0bcc\u0bca\3\2\2\2\u0bcd\u0bce\7\37\2\2\u0bce\u0bd0\3"+
		"\2\2\2\u0bcf\u0bc4\3\2\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0\u0bd1\3\2\2\2\u0bd1"+
		"\u0bd2\7^\2\2\u0bd2\u0bd9\5*\26\2\u0bd3\u0bd5\7K\2\2\u0bd4\u0bd6\t.\2"+
		"\2\u0bd5\u0bd4\3\2\2\2\u0bd5\u0bd6\3\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bd8"+
		"\7\u00f4\2\2\u0bd8\u0bda\7\u00f8\2\2\u0bd9\u0bd3\3\2\2\2\u0bd9\u0bda\3"+
		"\2\2\2\u0bda\u0179\3\2\2\2\u0bdb\u0bdf\7\63\2\2\u0bdc\u0bdd\7\u00ff\2"+
		"\2\u0bdd\u0bde\7\27\2\2\u0bde\u0be0\t,\2\2\u0bdf\u0bdc\3\2\2\2\u0bdf\u0be0"+
		"\3\2\2\2\u0be0\u0be2\3\2\2\2\u0be1\u0be3\5\u01ee\u00f8\2\u0be2\u0be1\3"+
		"\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be7\3\2\2\2\u0be4\u0be5\7\u00a1\2\2"+
		"\u0be5\u0be6\7\u01b8\2\2\u0be6\u0be8\t-\2\2\u0be7\u0be4\3\2\2\2\u0be7"+
		"\u0be8\3\2\2\2\u0be8\u0be9\3\2\2\2\u0be9\u0bea\7H\2\2\u0bea\u0bf6\5\u00b2"+
		"Z\2\u0beb\u0bec\7\36\2\2\u0bec\u0bf1\5\u009aN\2\u0bed\u0bee\7$\2\2\u0bee"+
		"\u0bf0\5\u009aN\2\u0bef\u0bed\3\2\2\2\u0bf0\u0bf3\3\2\2\2\u0bf1\u0bef"+
		"\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2\u0bf4\3\2\2\2\u0bf3\u0bf1\3\2\2\2\u0bf4"+
		"\u0bf5\7\37\2\2\u0bf5\u0bf7\3\2\2\2\u0bf6\u0beb\3\2\2\2\u0bf6\u0bf7\3"+
		"\2\2\2\u0bf7\u0bf8\3\2\2\2\u0bf8\u0bf9\7^\2\2\u0bf9\u0c00\5*\26\2\u0bfa"+
		"\u0bfc\7K\2\2\u0bfb\u0bfd\t.\2\2\u0bfc\u0bfb\3\2\2\2\u0bfc\u0bfd\3\2\2"+
		"\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0bff\7\u00f4\2\2\u0bff\u0c01\7\u00f8\2\2"+
		"\u0c00\u0bfa\3\2\2\2\u0c00\u0c01\3\2\2\2\u0c01\u017b\3\2\2\2\u0c02\u0c03"+
		"\7\64\2\2\u0c03\u0c06\7H\2\2\u0c04\u0c05\7`\2\2\u0c05\u0c07\7l\2\2\u0c06"+
		"\u0c04\3\2\2\2\u0c06\u0c07\3\2\2\2\u0c07\u0c08\3\2\2\2\u0c08\u0c0d\5\u00b2"+
		"Z\2\u0c09\u0c0a\7$\2\2\u0c0a\u0c0c\5\u00b2Z\2\u0c0b\u0c09\3\2\2\2\u0c0c"+
		"\u0c0f\3\2\2\2\u0c0d\u0c0b\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e\u0c11\3\2"+
		"\2\2\u0c0f\u0c0d\3\2\2\2\u0c10\u0c12\t/\2\2\u0c11\u0c10\3\2\2\2\u0c11"+
		"\u0c12\3\2\2\2\u0c12\u017d\3\2\2\2\u0c13\u0c15\7\62\2\2\u0c14\u0c16\7"+
		"\u01de\2\2\u0c15\u0c14\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c17\3\2\2\2"+
		"\u0c17\u0c18\7\u00be\2\2\u0c18\u0c19\5\u009aN\2\u0c19\u0c1a\79\2\2\u0c1a"+
		"\u0c1b\7\u01bf\2\2\u0c1b\u0c1f\7\u02c0\2\2\u0c1c\u0c1d\7\u01c0\2\2\u0c1d"+
		"\u0c1e\7\27\2\2\u0c1e\u0c20\5\u01fc\u00ff\2\u0c1f\u0c1c\3\2\2\2\u0c1f"+
		"\u0c20\3\2\2\2\u0c20\u0c24\3\2\2\2\u0c21\u0c22\7\u011b\2\2\u0c22\u0c23"+
		"\7\27\2\2\u0c23\u0c25\7\u02c6\2\2\u0c24\u0c21\3\2\2\2\u0c24\u0c25\3\2"+
		"\2\2\u0c25\u0c2b\3\2\2\2\u0c26\u0c28\7\u011d\2\2\u0c27\u0c29\7\27\2\2"+
		"\u0c28\u0c27\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a\u0c2c"+
		"\7\u02c0\2\2\u0c2b\u0c26\3\2\2\2\u0c2b\u0c2c\3\2\2\2\u0c2c\u017f\3\2\2"+
		"\2\u0c2d\u0c2f\7\62\2\2\u0c2e\u0c30\7\u01de\2\2\u0c2f\u0c2e\3\2\2\2\u0c2f"+
		"\u0c30\3\2\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0c32\7\u00be\2\2\u0c32\u0c33"+
		"\5\u009aN\2\u0c33\u0c34\79\2\2\u0c34\u0c35\7\u01bf\2\2\u0c35\u0c36\7\u02c0"+
		"\2\2\u0c36\u0c37\7\u00b7\2\2\u0c37\u0c38\7\u01c7\2\2\u0c38\u0c39\7s\2"+
		"\2\u0c39\u0c3f\5\u009aN\2\u0c3a\u0c3c\7\u01c1\2\2\u0c3b\u0c3d\7\27\2\2"+
		"\u0c3c\u0c3b\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e\u0c40"+
		"\5\u01fc\u00ff\2\u0c3f\u0c3a\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0c46\3"+
		"\2\2\2\u0c41\u0c43\7\u01c2\2\2\u0c42\u0c44\7\27\2\2\u0c43\u0c42\3\2\2"+
		"\2\u0c43\u0c44\3\2\2\2\u0c44\u0c45\3\2\2\2\u0c45\u0c47\5\u01fc\u00ff\2"+
		"\u0c46\u0c41\3\2\2\2\u0c46\u0c47\3\2\2\2\u0c47\u0c4d\3\2\2\2\u0c48\u0c4a"+
		"\7\u01c3\2\2\u0c49\u0c4b\7\27\2\2\u0c4a\u0c49\3\2\2\2\u0c4a\u0c4b\3\2"+
		"\2\2\u0c4b\u0c4c\3\2\2\2\u0c4c\u0c4e\5\u01fc\u00ff\2\u0c4d\u0c48\3\2\2"+
		"\2\u0c4d\u0c4e\3\2\2\2\u0c4e\u0c54\3\2\2\2\u0c4f\u0c51\7\u01c4\2\2\u0c50"+
		"\u0c52\7\27\2\2\u0c51\u0c50\3\2\2\2\u0c51\u0c52\3\2\2\2\u0c52\u0c53\3"+
		"\2\2\2\u0c53\u0c55\5\u01fc\u00ff\2\u0c54\u0c4f\3\2\2\2\u0c54\u0c55\3\2"+
		"\2\2\u0c55\u0c5b\3\2\2\2\u0c56\u0c58\7\u01c5\2\2\u0c57\u0c59\7\27\2\2"+
		"\u0c58\u0c57\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5c"+
		"\5\u009aN\2\u0c5b\u0c56\3\2\2\2\u0c5b\u0c5c\3\2\2\2\u0c5c\u0c5e\3\2\2"+
		"\2\u0c5d\u0c5f\7\u01c6\2\2\u0c5e\u0c5d\3\2\2\2\u0c5e\u0c5f\3\2\2\2\u0c5f"+
		"\u0c65\3\2\2\2\u0c60\u0c62\7\u010d\2\2\u0c61\u0c63\7\27\2\2\u0c62\u0c61"+
		"\3\2\2\2\u0c62\u0c63\3\2\2\2\u0c63\u0c64\3\2\2\2\u0c64\u0c66\7\u02c0\2"+
		"\2\u0c65\u0c60\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u0c67\3\2\2\2\u0c67\u0c69"+
		"\7\u011d\2\2\u0c68\u0c6a\7\27\2\2\u0c69\u0c68\3\2\2\2\u0c69\u0c6a\3\2"+
		"\2\2\u0c6a\u0c6b\3\2\2\2\u0c6b\u0c6c\5\u009aN\2\u0c6c\u0181\3\2\2\2\u0c6d"+
		"\u0c6e\7\63\2\2\u0c6e\u0c6f\7\u00be\2\2\u0c6f\u0c70\5\u009aN\2\u0c70\u0c71"+
		"\t\60\2\2\u0c71\u0c72\7\u01bf\2\2\u0c72\u0c76\7\u02c0\2\2\u0c73\u0c74"+
		"\7\u01c2\2\2\u0c74\u0c75\7\27\2\2\u0c75\u0c77\5\u01fc\u00ff\2\u0c76\u0c73"+
		"\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0c79\3\2\2\2\u0c78\u0c7a\7\u01c6\2"+
		"\2\u0c79\u0c78\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0c7d"+
		"\7\u011d\2\2\u0c7c\u0c7e\7\27\2\2\u0c7d\u0c7c\3\2\2\2\u0c7d\u0c7e\3\2"+
		"\2\2\u0c7e\u0c7f\3\2\2\2\u0c7f\u0c80\5\u009aN\2\u0c80\u0183\3\2\2\2\u0c81"+
		"\u0c82\7\64\2\2\u0c82\u0c83\7\u00be\2\2\u0c83\u0c89\5\u009aN\2\u0c84\u0c86"+
		"\7\u011d\2\2\u0c85\u0c87\7\27\2\2\u0c86\u0c85\3\2\2\2\u0c86\u0c87\3\2"+
		"\2\2\u0c87\u0c88\3\2\2\2\u0c88\u0c8a\5\u009aN\2\u0c89\u0c84\3\2\2\2\u0c89"+
		"\u0c8a\3\2\2\2\u0c8a\u0185\3\2\2\2\u0c8b\u0c8c\7\62\2\2\u0c8c\u0c8d\7"+
		"\u01c7\2\2\u0c8d\u0c8e\7s\2\2\u0c8e\u0c8f\5\u009aN\2\u0c8f\u0c90\79\2"+
		"\2\u0c90\u0c91\7\u01c8\2\2\u0c91\u0c97\7\u02c0\2\2\u0c92\u0c94\7\u01c2"+
		"\2\2\u0c93\u0c95\7\27\2\2\u0c94\u0c93\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95"+
		"\u0c96\3\2\2\2\u0c96\u0c98\5\u01fc\u00ff\2\u0c97\u0c92\3\2\2\2\u0c97\u0c98"+
		"\3\2\2\2\u0c98\u0c9e\3\2\2\2\u0c99\u0c9b\7\u01c9\2\2\u0c9a\u0c9c\7\27"+
		"\2\2\u0c9b\u0c9a\3\2\2\2\u0c9b\u0c9c\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d"+
		"\u0c9f\5\u01fc\u00ff\2\u0c9e\u0c99\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca5"+
		"\3\2\2\2\u0ca0\u0ca2\7\u01ca\2\2\u0ca1\u0ca3\7\27\2\2\u0ca2\u0ca1\3\2"+
		"\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca4\3\2\2\2\u0ca4\u0ca6\5\u01fc\u00ff"+
		"\2\u0ca5\u0ca0\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u0cac\3\2\2\2\u0ca7\u0ca9"+
		"\7\u01c5\2\2\u0ca8\u0caa\7\27\2\2\u0ca9\u0ca8\3\2\2\2\u0ca9\u0caa\3\2"+
		"\2\2\u0caa\u0cab\3\2\2\2\u0cab\u0cad\5\u009aN\2\u0cac\u0ca7\3\2\2\2\u0cac"+
		"\u0cad\3\2\2\2\u0cad\u0caf\3\2\2\2\u0cae\u0cb0\7\u01c6\2\2\u0caf\u0cae"+
		"\3\2\2\2\u0caf\u0cb0\3\2\2\2\u0cb0\u0cb6\3\2\2\2\u0cb1\u0cb3\7\u010d\2"+
		"\2\u0cb2\u0cb4\7\27\2\2\u0cb3\u0cb2\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4"+
		"\u0cb5\3\2\2\2\u0cb5\u0cb7\7\u02c0\2\2\u0cb6\u0cb1\3\2\2\2\u0cb6\u0cb7"+
		"\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8\u0cba\7\u011d\2\2\u0cb9\u0cbb\7\27"+
		"\2\2\u0cba\u0cb9\3\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc"+
		"\u0cbd\5\u009aN\2\u0cbd\u0187\3\2\2\2\u0cbe\u0cbf\7\63\2\2\u0cbf\u0cc0"+
		"\7\u01c7\2\2\u0cc0\u0cc1\7s\2\2\u0cc1\u0cc2\5\u009aN\2\u0cc2\u0cc3\79"+
		"\2\2\u0cc3\u0cc4\7\u01c8\2\2\u0cc4\u0cca\7\u02c0\2\2\u0cc5\u0cc7\7\u01c2"+
		"\2\2\u0cc6\u0cc8\7\27\2\2\u0cc7\u0cc6\3\2\2\2\u0cc7\u0cc8\3\2\2\2\u0cc8"+
		"\u0cc9\3\2\2\2\u0cc9\u0ccb\5\u01fc\u00ff\2\u0cca\u0cc5\3\2\2\2\u0cca\u0ccb"+
		"\3\2\2\2\u0ccb\u0ccd\3\2\2\2\u0ccc\u0cce\7\u01c6\2\2\u0ccd\u0ccc\3\2\2"+
		"\2\u0ccd\u0cce\3\2\2\2\u0cce\u0ccf\3\2\2\2\u0ccf\u0cd1\7\u011d\2\2\u0cd0"+
		"\u0cd2\7\27\2\2\u0cd1\u0cd0\3\2\2\2\u0cd1\u0cd2\3\2\2\2\u0cd2\u0cd3\3"+
		"\2\2\2\u0cd3\u0cd4\5\u009aN\2\u0cd4\u0189\3\2\2\2\u0cd5\u0cd6\7\64\2\2"+
		"\u0cd6\u0cd7\7\u01c7\2\2\u0cd7\u0cd8\7s\2\2\u0cd8\u0cd9\5\u009aN\2\u0cd9"+
		"\u0cda\7\u011d\2\2\u0cda\u0cdb\7\27\2\2\u0cdb\u0cdc\5\u009aN\2\u0cdc\u018b"+
		"\3\2\2\2\u0cdd\u0cdf\7\62\2\2\u0cde\u0ce0\5\u01ee\u00f8\2\u0cdf\u0cde"+
		"\3\2\2\2\u0cdf\u0ce0\3\2\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u0ce2\7F\2\2\u0ce2"+
		"\u0ce3\5\u00d4k\2\u0ce3\u0ce4\5\u00d6l\2\u0ce4\u0ce5\5\u00dco\2\u0ce5"+
		"\u0ce6\7_\2\2\u0ce6\u0ce7\5\u00a2R\2\u0ce7\u0ce8\7c\2\2\u0ce8\u0ce9\7"+
		"\u01e5\2\2\u0ce9\u0ceb\7\u00d7\2\2\u0cea\u0cec\5\u00dep\2\u0ceb\u0cea"+
		"\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0ced\3\2\2\2\u0ced\u0cee\5\u01f4\u00fb"+
		"\2\u0cee\u018d\3\2\2\2\u0cef\u0cf0\7\u00e3\2\2\u0cf0\u018f\3\2\2\2\u0cf1"+
		"\u0cf2\7`\2\2\u0cf2\u0cf3\7h\2\2\u0cf3\u0cf5\7l\2\2\u0cf4\u0cf1\3\2\2"+
		"\2\u0cf4\u0cf5\3\2\2\2\u0cf5\u0191\3\2\2\2\u0cf6\u0cf7\7\36\2\2\u0cf7"+
		"\u0cfc\5\u0194\u00cb\2\u0cf8\u0cf9\7$\2\2\u0cf9\u0cfb\5\u0194\u00cb\2"+
		"\u0cfa\u0cf8\3\2\2\2\u0cfb\u0cfe\3\2\2\2\u0cfc\u0cfa\3\2\2\2\u0cfc\u0cfd"+
		"\3\2\2\2\u0cfd\u0cff\3\2\2\2\u0cfe\u0cfc\3\2\2\2\u0cff\u0d00\7\37\2\2"+
		"\u0d00\u0193\3\2\2\2\u0d01\u0d06\5\u0196\u00cc\2\u0d02\u0d06\5\u01a4\u00d3"+
		"\2\u0d03\u0d06\5\u01ae\u00d8\2\u0d04\u0d06\5\u019e\u00d0\2\u0d05\u0d01"+
		"\3\2\2\2\u0d05\u0d02\3\2\2\2\u0d05\u0d03\3\2\2\2\u0d05\u0d04\3\2\2\2\u0d06"+
		"\u0195\3\2\2\2\u0d07\u0d08\5\u00a4S\2\u0d08\u0d15\5\u0138\u009d\2\u0d09"+
		"\u0d0b\5\u0198\u00cd\2\u0d0a\u0d09\3\2\2\2\u0d0b\u0d0e\3\2\2\2\u0d0c\u0d0a"+
		"\3\2\2\2\u0d0c\u0d0d\3\2\2\2\u0d0d\u0d16\3\2\2\2\u0d0e\u0d0c\3\2\2\2\u0d0f"+
		"\u0d11\5\u019a\u00ce\2\u0d10\u0d0f\3\2\2\2\u0d11\u0d14\3\2\2\2\u0d12\u0d10"+
		"\3\2\2\2\u0d12\u0d13\3\2\2\2\u0d13\u0d16\3\2\2\2\u0d14\u0d12\3\2\2\2\u0d15"+
		"\u0d0c\3\2\2\2\u0d15\u0d12\3\2\2\2\u0d16\u0197\3\2\2\2\u0d17\u0d23\5\u019c"+
		"\u00cf\2\u0d18\u0d23\7\u018f\2\2\u0d19\u0d1c\7\u0097\2\2\u0d1a\u0d1d\5"+
		"\u0086D\2\u0d1b\u0d1d\5\u00e0q\2\u0d1c\u0d1a\3\2\2\2\u0d1c\u0d1b\3\2\2"+
		"\2\u0d1d\u0d23\3\2\2\2\u0d1e\u0d1f\7\u017a\2\2\u0d1f\u0d23\t\61\2\2\u0d20"+
		"\u0d21\7\u00df\2\2\u0d21\u0d23\t\62\2\2\u0d22\u0d17\3\2\2\2\u0d22\u0d18"+
		"\3\2\2\2\u0d22\u0d19\3\2\2\2\u0d22\u0d1e\3\2\2\2\u0d22\u0d20\3\2\2\2\u0d23"+
		"\u0199\3\2\2\2\u0d24\u0d2d\5\u019c\u00cf\2\u0d25\u0d26\7\u00dc\2\2\u0d26"+
		"\u0d28\7\u00f2\2\2\u0d27\u0d25\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d29"+
		"\3\2\2\2\u0d29\u0d2a\7^\2\2\u0d2a\u0d2d\5\u00e0q\2\u0d2b\u0d2d\t\63\2"+
		"\2\u0d2c\u0d24\3\2\2\2\u0d2c\u0d27\3\2\2\2\u0d2c\u0d2b\3\2\2\2\u0d2d\u019b"+
		"\3\2\2\2\u0d2e\u0d3d\5\u01b2\u00da\2\u0d2f\u0d31\7@\2\2\u0d30\u0d32\7"+
		"B\2\2\u0d31\u0d30\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0d3d\3\2\2\2\u0d33"+
		"\u0d35\7h\2\2\u0d34\u0d33\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35\u0d36\3\2"+
		"\2\2\u0d36\u0d3d\7i\2\2\u0d37\u0d3d\5\u0142\u00a2\2\u0d38\u0d3d\5\u019e"+
		"\u00d0\2\u0d39\u0d3d\5\u01a0\u00d1\2\u0d3a\u0d3b\7\u010d\2\2\u0d3b\u0d3d"+
		"\7\u02c0\2\2\u0d3c\u0d2e\3\2\2\2\u0d3c\u0d2f\3\2\2\2\u0d3c\u0d34\3\2\2"+
		"\2\u0d3c\u0d37\3\2\2\2\u0d3c\u0d38\3\2\2\2\u0d3c\u0d39\3\2\2\2\u0d3c\u0d3a"+
		"\3\2\2\2\u0d3d\u019d\3\2\2\2\u0d3e\u0d40\7>\2\2\u0d3f\u0d41\5\u0144\u00a3"+
		"\2\u0d40\u0d3f\3\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d43\3\2\2\2\u0d42\u0d3e"+
		"\3\2\2\2\u0d42\u0d43\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d45\7\u00f4\2"+
		"\2\u0d45\u0d4a\5\u00e0q\2\u0d46\u0d48\7h\2\2\u0d47\u0d46\3\2\2\2\u0d47"+
		"\u0d48\3\2\2\2\u0d48\u0d49\3\2\2\2\u0d49\u0d4b\7\u015e\2\2\u0d4a\u0d47"+
		"\3\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b\u019f\3\2\2\2\u0d4c\u0d4d\7\u00fd\2"+
		"\2\u0d4d\u0d4e\5\u00a2R\2\u0d4e\u0d55\5\u01a8\u00d5\2\u0d4f\u0d50\7\u0134"+
		"\2\2\u0d50\u0d56\7V\2\2\u0d51\u0d52\7\u0134\2\2\u0d52\u0d56\7\u013d\2"+
		"\2\u0d53\u0d54\7\u0134\2\2\u0d54\u0d56\7\u0157\2\2\u0d55\u0d4f\3\2\2\2"+
		"\u0d55\u0d51\3\2\2\2\u0d55\u0d53\3\2\2\2\u0d55\u0d56\3\2\2\2\u0d56\u0d5c"+
		"\3\2\2\2\u0d57\u0d58\7_\2\2\u0d58\u0d59\t\64\2\2\u0d59\u0d5b\5\u01a2\u00d2"+
		"\2\u0d5a\u0d57\3\2\2\2\u0d5b\u0d5e\3\2\2\2\u0d5c\u0d5a\3\2\2\2\u0d5c\u0d5d"+
		"\3\2\2\2\u0d5d\u01a1\3\2\2\2\u0d5e\u0d5c\3\2\2\2\u0d5f\u0d68\7\u0150\2"+
		"\2\u0d60\u0d68\7\u00f3\2\2\u0d61\u0d62\7:\2\2\u0d62\u0d68\7i\2\2\u0d63"+
		"\u0d64\7\u00f7\2\2\u0d64\u0d68\7\u00fe\2\2\u0d65\u0d66\7:\2\2\u0d66\u0d68"+
		"\7\u0097\2\2\u0d67\u0d5f\3\2\2\2\u0d67\u0d60\3\2\2\2\u0d67\u0d61\3\2\2"+
		"\2\u0d67\u0d63\3\2\2\2\u0d67\u0d65\3\2\2\2\u0d68\u01a3\3\2\2\2\u0d69\u0d6b"+
		"\t\65\2\2\u0d6a\u0d69\3\2\2\2\u0d6a\u0d6b\3\2\2\2\u0d6b\u0d6d\3\2\2\2"+
		"\u0d6c\u0d6e\t\17\2\2\u0d6d\u0d6c\3\2\2\2\u0d6d\u0d6e\3\2\2\2\u0d6e\u0d70"+
		"\3\2\2\2\u0d6f\u0d71\5\u00a6T\2\u0d70\u0d6f\3\2\2\2\u0d70\u0d71\3\2\2"+
		"\2\u0d71\u0d73\3\2\2\2\u0d72\u0d74\5\u01a6\u00d4\2\u0d73\u0d72\3\2\2\2"+
		"\u0d73\u0d74\3\2\2\2\u0d74\u0d75\3\2\2\2\u0d75\u0d79\5\u01a8\u00d5\2\u0d76"+
		"\u0d78\5\u01ac\u00d7\2\u0d77\u0d76\3\2\2\2\u0d78\u0d7b\3\2\2\2\u0d79\u0d77"+
		"\3\2\2\2\u0d79\u0d7a\3\2\2\2\u0d7a\u01a5\3\2\2\2\u0d7b\u0d79\3\2\2\2\u0d7c"+
		"\u0d7d\7\\\2\2\u0d7d\u0d7e\t\66\2\2\u0d7e\u01a7\3\2\2\2\u0d7f\u0d80\7"+
		"\36\2\2\u0d80\u0d85\5\u01aa\u00d6\2\u0d81\u0d82\7$\2\2\u0d82\u0d84\5\u01aa"+
		"\u00d6\2\u0d83\u0d81\3\2\2\2\u0d84\u0d87\3\2\2\2\u0d85\u0d83\3\2\2\2\u0d85"+
		"\u0d86\3\2\2\2\u0d86\u0d88\3\2\2\2\u0d87\u0d85\3\2\2\2\u0d88\u0d89\7\37"+
		"\2\2\u0d89\u01a9\3\2\2\2\u0d8a\u0d8e\5\u00a4S\2\u0d8b\u0d8c\7\36\2\2\u0d8c"+
		"\u0d8d\7\u02c1\2\2\u0d8d\u0d8f\7\37\2\2\u0d8e\u0d8b\3\2\2\2\u0d8e\u0d8f"+
		"\3\2\2\2\u0d8f\u0d92\3\2\2\2\u0d90\u0d92\5\u00e0q\2\u0d91\u0d8a\3\2\2"+
		"\2\u0d91\u0d90\3\2\2\2\u0d92\u0d94\3\2\2\2\u0d93\u0d95\t%\2\2\u0d94\u0d93"+
		"\3\2\2\2\u0d94\u0d95\3\2\2\2\u0d95\u01ab\3\2\2\2\u0d96\u0d98\7\u017f\2"+
		"\2\u0d97\u0d99\7\27\2\2\u0d98\u0d97\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99"+
		"\u0d9a\3\2\2\2\u0d9a\u0da3\7\u02c1\2\2\u0d9b\u0da3\5\u01a6\u00d4\2\u0d9c"+
		"\u0d9d\7K\2\2\u0d9d\u0d9e\7\u013c\2\2\u0d9e\u0da3\5\u009aN\2\u0d9f\u0da0"+
		"\7\u010d\2\2\u0da0\u0da3\7\u02c0\2\2\u0da1\u0da3\t\67\2\2\u0da2\u0d96"+
		"\3\2\2\2\u0da2\u0d9b\3\2\2\2\u0da2\u0d9c\3\2\2\2\u0da2\u0d9f\3\2\2\2\u0da2"+
		"\u0da1\3\2\2\2\u0da3\u01ad\3\2\2\2\u0da4\u0da6\7>\2\2\u0da5\u0da7\5\u0144"+
		"\u00a3\2\u0da6\u0da5\3\2\2\2\u0da6\u0da7\3\2\2\2\u0da7\u0da9\3\2\2\2\u0da8"+
		"\u0da4\3\2\2\2\u0da8\u0da9\3\2\2\2\u0da9\u0dad\3\2\2\2\u0daa\u0dae\5\u01b0"+
		"\u00d9\2\u0dab\u0dae\5\u01b4\u00db\2\u0dac\u0dae\5\u01b6\u00dc\2\u0dad"+
		"\u0daa\3\2\2\2\u0dad\u0dab\3\2\2\2\u0dad\u0dac\3\2\2\2\u0dae\u01af\3\2"+
		"\2\2\u0daf\u0db1\5\u01b2\u00da\2\u0db0\u0db2\5\u01a6\u00d4\2\u0db1\u0db0"+
		"\3\2\2\2\u0db1\u0db2\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db7\5\u00ba^"+
		"\2\u0db4\u0db6\5\u01ac\u00d7\2\u0db5\u0db4\3\2\2\2\u0db6\u0db9\3\2\2\2"+
		"\u0db7\u0db5\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8\u01b1\3\2\2\2\u0db9\u0db7"+
		"\3\2\2\2\u0dba\u0dbc\7?\2\2\u0dbb\u0dba\3\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc"+
		"\u0dbd\3\2\2\2\u0dbd\u0dbe\7B\2\2\u0dbe\u01b3\3\2\2\2\u0dbf\u0dc1\7@\2"+
		"\2\u0dc0\u0dc2\t\17\2\2\u0dc1\u0dc0\3\2\2\2\u0dc1\u0dc2\3\2\2\2\u0dc2"+
		"\u0dc4\3\2\2\2\u0dc3\u0dc5\5\u00a6T\2\u0dc4\u0dc3\3\2\2\2\u0dc4\u0dc5"+
		"\3\2\2\2\u0dc5\u0dc7\3\2\2\2\u0dc6\u0dc8\5\u01a6\u00d4\2\u0dc7\u0dc6\3"+
		"\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8\u0dc9\3\2\2\2\u0dc9\u0dcd\5\u01a8\u00d5"+
		"\2\u0dca\u0dcc\5\u01ac\u00d7\2\u0dcb\u0dca\3\2\2\2\u0dcc\u0dcf\3\2\2\2"+
		"\u0dcd\u0dcb\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce\u01b5\3\2\2\2\u0dcf\u0dcd"+
		"\3\2\2\2\u0dd0\u0dd1\7A\2\2\u0dd1\u0dd3\7B\2\2\u0dd2\u0dd4\5\u00a6T\2"+
		"\u0dd3\u0dd2\3\2\2\2\u0dd3\u0dd4\3\2\2\2\u0dd4\u0dd5\3\2\2\2\u0dd5\u0dd6"+
		"\5\u00ba^\2\u0dd6\u0dd7\5\u01a0\u00d1\2\u0dd7\u01b7\3\2\2\2\u0dd8\u0dda"+
		"\7\36\2\2\u0dd9\u0dd8\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda\u0ddb\3\2\2\2"+
		"\u0ddb\u0ddc\7q\2\2\u0ddc\u0dde\5\u00a2R\2\u0ddd\u0ddf\7\37\2\2\u0dde"+
		"\u0ddd\3\2\2\2\u0dde\u0ddf\3\2\2\2\u0ddf\u01b9\3\2\2\2\u0de0\u0de2\t8"+
		"\2\2\u0de1\u0de0\3\2\2\2\u0de1\u0de2\3\2\2\2\u0de2\u01bb\3\2\2\2\u0de3"+
		"\u0de8\5\u01be\u00e0\2\u0de4\u0de5\7$\2\2\u0de5\u0de7\5\u01be\u00e0\2"+
		"\u0de6\u0de4\3\2\2\2\u0de7\u0dea\3\2\2\2\u0de8\u0de6\3\2\2\2\u0de8\u0de9"+
		"\3\2\2\2\u0de9\u01bd\3\2\2\2\u0dea\u0de8\3\2\2\2\u0deb\u0e8d\5\u01c0\u00e1"+
		"\2\u0dec\u0e8d\5\u01c4\u00e3\2\u0ded\u0e8d\5\u01c8\u00e5\2\u0dee\u0e8d"+
		"\5\u01ca\u00e6\2\u0def\u0df0\79\2\2\u0df0\u0e8d\5\u019e\u00d0\2\u0df1"+
		"\u0df2\7\64\2\2\u0df2\u0df3\7\u00f4\2\2\u0df3\u0e8d\5\u0144\u00a3\2\u0df4"+
		"\u0df5\7\63\2\2\u0df5\u0df6\7\u00f4\2\2\u0df6\u0df8\5\u0144\u00a3\2\u0df7"+
		"\u0df9\7h\2\2\u0df8\u0df7\3\2\2\2\u0df8\u0df9\3\2\2\2\u0df9\u0dfa\3\2"+
		"\2\2\u0dfa\u0dfb\7\u015e\2\2\u0dfb\u0e8d\3\2\2\2\u0dfc\u0dfe\7\u00ff\2"+
		"\2\u0dfd\u0dff\7\27\2\2\u0dfe\u0dfd\3\2\2\2\u0dfe\u0dff\3\2\2\2\u0dff"+
		"\u0e00\3\2\2\2\u0e00\u0e8d\t9\2\2\u0e01\u0e03\7\63\2\2\u0e02\u0e04\7<"+
		"\2\2\u0e03\u0e02\3\2\2\2\u0e03\u0e04\3\2\2\2\u0e04\u0e05\3\2\2\2\u0e05"+
		"\u0e0b\5\u00a4S\2\u0e06\u0e07\7:\2\2\u0e07\u0e08\7\u0097\2\2\u0e08\u0e0c"+
		"\5\u0086D\2\u0e09\u0e0a\7\64\2\2\u0e0a\u0e0c\7\u0097\2\2\u0e0b\u0e06\3"+
		"\2\2\2\u0e0b\u0e09\3\2\2\2\u0e0c\u0e8d\3\2\2\2\u0e0d\u0e0e\7\63\2\2\u0e0e"+
		"\u0e0f\7=\2\2\u0e0f\u0e10\5\u00a6T\2\u0e10\u0e11\t\67\2\2\u0e11\u0e8d"+
		"\3\2\2\2\u0e12\u0e8d\5\u01cc\u00e7\2\u0e13\u0e8d\5\u01ce\u00e8\2\u0e14"+
		"\u0e16\7\u0097\2\2\u0e15\u0e14\3\2\2\2\u0e15\u0e16\3\2\2\2\u0e16\u0e17"+
		"\3\2\2\2\u0e17\u0e19\5\u0140\u00a1\2\u0e18\u0e1a\5\u0142\u00a2\2\u0e19"+
		"\u0e18\3\2\2\2\u0e19\u0e1a\3\2\2\2\u0e1a\u0e8d\3\2\2\2\u0e1b\u0e1c\7\u0113"+
		"\2\2\u0e1c\u0e1d\7d\2\2\u0e1d\u0e1f\5\u0140\u00a1\2\u0e1e\u0e20\5\u0142"+
		"\u00a2\2\u0e1f\u0e1e\3\2\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u0e8d\3\2\2\2\u0e21"+
		"\u0e22\t:\2\2\u0e22\u0e8d\7\u012f\2\2\u0e23\u0e24\t;\2\2\u0e24\u0e8d\7"+
		"\u00be\2\2\u0e25\u0e8d\5\u01d0\u00e9\2\u0e26\u0e8d\5\u01d2\u00ea\2\u0e27"+
		"\u0e8d\5\u01d4\u00eb\2\u0e28\u0e29\7\64\2\2\u0e29\u0e2a\7A\2\2\u0e2a\u0e2b"+
		"\7B\2\2\u0e2b\u0e8d\5\u0144\u00a3\2\u0e2c\u0e8d\7\u0127\2\2\u0e2d\u0e2f"+
		"\7\u0133\2\2\u0e2e\u0e30\7\27\2\2\u0e2f\u0e2e\3\2\2\2\u0e2f\u0e30\3\2"+
		"\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e8d\t*\2\2\u0e32\u0e33\7r\2\2\u0e33\u0e34"+
		"\7t\2\2\u0e34\u0e8d\5\u00ba^\2\u0e35\u0e8d\5\u01d6\u00ec\2\u0e36\u0e8d"+
		"\5\u01d8\u00ed\2\u0e37\u0e8d\5\u01da\u00ee\2\u0e38\u0e39\t<\2\2\u0e39"+
		"\u0e8d\7\u00ec\2\2\u0e3a\u0e3b\79\2\2\u0e3b\u0e3c\7\u00dd\2\2\u0e3c\u0e3d"+
		"\7\36\2\2\u0e3d\u0e3e\5\u01de\u00f0\2\u0e3e\u0e3f\7\37\2\2\u0e3f\u0e8d"+
		"\3\2\2\2\u0e40\u0e41\7\64\2\2\u0e41\u0e42\7\u00dd\2\2\u0e42\u0e8d\5\u0146"+
		"\u00a4\2\u0e43\u0e44\7\u0118\2\2\u0e44\u0e47\7\u00dd\2\2\u0e45\u0e48\5"+
		"\u0146\u00a4\2\u0e46\u0e48\7o\2\2\u0e47\u0e45\3\2\2\2\u0e47\u0e46\3\2"+
		"\2\2\u0e48\u0e49\3\2\2\2\u0e49\u0e8d\7\u00be\2\2\u0e4a\u0e4b\7\u012d\2"+
		"\2\u0e4b\u0e4e\7\u00dd\2\2\u0e4c\u0e4f\5\u0146\u00a4\2\u0e4d\u0e4f\7o"+
		"\2\2\u0e4e\u0e4c\3\2\2\2\u0e4e\u0e4d\3\2\2\2\u0e4f\u0e50\3\2\2\2\u0e50"+
		"\u0e8d\7\u00be\2\2\u0e51\u0e52\7\65\2\2\u0e52\u0e55\7\u00dd\2\2\u0e53"+
		"\u0e56\5\u0146\u00a4\2\u0e54\u0e56\7o\2\2\u0e55\u0e53\3\2\2\2\u0e55\u0e54"+
		"\3\2\2\2\u0e56\u0e8d\3\2\2\2\u0e57\u0e58\7\u010b\2\2\u0e58\u0e59\7\u00dd"+
		"\2\2\u0e59\u0e8d\7\u02c1\2\2\u0e5a\u0e5b\7\u014c\2\2\u0e5b\u0e5c\7\u00dd"+
		"\2\2\u0e5c\u0e5d\5\u0146\u00a4\2\u0e5d\u0e5e\7I\2\2\u0e5e\u0e5f\5\u01dc"+
		"\u00ef\2\u0e5f\u0e8d\3\2\2\2\u0e60\u0e61\7\u0120\2\2\u0e61\u0e62\7\u00dd"+
		"\2\2\u0e62\u0e63\5\u0144\u00a3\2\u0e63\u0e64\7K\2\2\u0e64\u0e65\7;\2\2"+
		"\u0e65\u0e68\5\u00a2R\2\u0e66\u0e67\t<\2\2\u0e67\u0e69\7\u00ec\2\2\u0e68"+
		"\u0e66\3\2\2\2\u0e68\u0e69\3\2\2\2\u0e69\u0e8d\3\2\2\2\u0e6a\u0e6b\7\u0100"+
		"\2\2\u0e6b\u0e6e\7\u00dd\2\2\u0e6c\u0e6f\5\u0146\u00a4\2\u0e6d\u0e6f\7"+
		"o\2\2\u0e6e\u0e6c\3\2\2\2\u0e6e\u0e6d\3\2\2\2\u0e6f\u0e8d\3\2\2\2\u0e70"+
		"\u0e71\7\u00f4\2\2\u0e71\u0e74\7\u00dd\2\2\u0e72\u0e75\5\u0146\u00a4\2"+
		"\u0e73\u0e75\7o\2\2\u0e74\u0e72\3\2\2\2\u0e74\u0e73\3\2\2\2\u0e75\u0e8d"+
		"\3\2\2\2\u0e76\u0e77\7\u013a\2\2\u0e77\u0e7a\7\u00dd\2\2\u0e78\u0e7b\5"+
		"\u0146\u00a4\2\u0e79\u0e7b\7o\2\2\u0e7a\u0e78\3\2\2\2\u0e7a\u0e79\3\2"+
		"\2\2\u0e7b\u0e8d\3\2\2\2\u0e7c\u0e7d\7\u0145\2\2\u0e7d\u0e80\7\u00dd\2"+
		"\2\u0e7e\u0e81\5\u0146\u00a4\2\u0e7f\u0e81\7o\2\2\u0e80\u0e7e\3\2\2\2"+
		"\u0e80\u0e7f\3\2\2\2\u0e81\u0e8d\3\2\2\2\u0e82\u0e83\7\u014d\2\2\u0e83"+
		"\u0e86\7\u00dd\2\2\u0e84\u0e87\5\u0146\u00a4\2\u0e85\u0e87\7o\2\2\u0e86"+
		"\u0e84\3\2\2\2\u0e86\u0e85\3\2\2\2\u0e87\u0e8d\3\2\2\2\u0e88\u0e89\7\u014a"+
		"\2\2\u0e89\u0e8d\7\u013e\2\2\u0e8a\u0e8b\7\u00ea\2\2\u0e8b\u0e8d\7\u013e"+
		"\2\2\u0e8c\u0deb\3\2\2\2\u0e8c\u0dec\3\2\2\2\u0e8c\u0ded\3\2\2\2\u0e8c"+
		"\u0dee\3\2\2\2\u0e8c\u0def\3\2\2\2\u0e8c\u0df1\3\2\2\2\u0e8c\u0df4\3\2"+
		"\2\2\u0e8c\u0dfc\3\2\2\2\u0e8c\u0e01\3\2\2\2\u0e8c\u0e0d\3\2\2\2\u0e8c"+
		"\u0e12\3\2\2\2\u0e8c\u0e13\3\2\2\2\u0e8c\u0e15\3\2\2\2\u0e8c\u0e1b\3\2"+
		"\2\2\u0e8c\u0e21\3\2\2\2\u0e8c\u0e23\3\2\2\2\u0e8c\u0e25\3\2\2\2\u0e8c"+
		"\u0e26\3\2\2\2\u0e8c\u0e27\3\2\2\2\u0e8c\u0e28\3\2\2\2\u0e8c\u0e2c\3\2"+
		"\2\2\u0e8c\u0e2d\3\2\2\2\u0e8c\u0e32\3\2\2\2\u0e8c\u0e35\3\2\2\2\u0e8c"+
		"\u0e36\3\2\2\2\u0e8c\u0e37\3\2\2\2\u0e8c\u0e38\3\2\2\2\u0e8c\u0e3a\3\2"+
		"\2\2\u0e8c\u0e40\3\2\2\2\u0e8c\u0e43\3\2\2\2\u0e8c\u0e4a\3\2\2\2\u0e8c"+
		"\u0e51\3\2\2\2\u0e8c\u0e57\3\2\2\2\u0e8c\u0e5a\3\2\2\2\u0e8c\u0e60\3\2"+
		"\2\2\u0e8c\u0e6a\3\2\2\2\u0e8c\u0e70\3\2\2\2\u0e8c\u0e76\3\2\2\2\u0e8c"+
		"\u0e7c\3\2\2\2\u0e8c\u0e82\3\2\2\2\u0e8c\u0e88\3\2\2\2\u0e8c\u0e8a\3\2"+
		"\2\2\u0e8d\u01bf\3\2\2\2\u0e8e\u0e95\5\u01c2\u00e2\2\u0e8f\u0e91\7$\2"+
		"\2\u0e90\u0e8f\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91\u0e92\3\2\2\2\u0e92\u0e94"+
		"\5\u01c2\u00e2\2\u0e93\u0e90\3\2\2\2\u0e94\u0e97\3\2\2\2\u0e95\u0e93\3"+
		"\2\2\2\u0e95\u0e96\3\2\2\2\u0e96\u01c1\3\2\2\2\u0e97\u0e95\3\2\2\2\u0e98"+
		"\u0e9a\7\u018f\2\2\u0e99\u0e9b\7\27\2\2\u0e9a\u0e99\3\2\2\2\u0e9a\u0e9b"+
		"\3\2\2\2\u0e9b\u0e9c\3\2\2\2\u0e9c\u0f1a\7\u02c1\2\2\u0e9d\u0e9f\7\u0190"+
		"\2\2\u0e9e\u0ea0\7\27\2\2\u0e9f\u0e9e\3\2\2\2\u0e9f\u0ea0\3\2\2\2\u0ea0"+
		"\u0ea1\3\2\2\2\u0ea1\u0f1a\7\u02c1\2\2\u0ea2\u0ea4\7\u0097\2\2\u0ea3\u0ea2"+
		"\3\2\2\2\u0ea3\u0ea4\3\2\2\2\u0ea4\u0ea7\3\2\2\2\u0ea5\u0ea8\5\u0140\u00a1"+
		"\2\u0ea6\u0ea8\5\u0142\u00a2\2\u0ea7\u0ea5\3\2\2\2\u0ea7\u0ea6\3\2\2\2"+
		"\u0ea8\u0f1a\3\2\2\2\u0ea9\u0eab\7\u0108\2\2\u0eaa\u0eac\7\27\2\2\u0eab"+
		"\u0eaa\3\2\2\2\u0eab\u0eac\3\2\2\2\u0eac\u0ead\3\2\2\2\u0ead\u0f1a\7\u02c1"+
		"\2\2\u0eae\u0eb0\7\u010d\2\2\u0eaf\u0eb1\7\27\2\2\u0eb0\u0eaf\3\2\2\2"+
		"\u0eb0\u0eb1\3\2\2\2\u0eb1\u0eb2\3\2\2\2\u0eb2\u0f1a\7\u02c0\2\2\u0eb3"+
		"\u0eb5\7\u0110\2\2\u0eb4\u0eb6\7\27\2\2\u0eb5\u0eb4\3\2\2\2\u0eb5\u0eb6"+
		"\3\2\2\2\u0eb6\u0eb7\3\2\2\2\u0eb7\u0f1a\7\u02c0\2\2\u0eb8\u0eba\7\u0111"+
		"\2\2\u0eb9\u0ebb\7\27\2\2\u0eba\u0eb9\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb"+
		"\u0ebc\3\2\2\2\u0ebc\u0f1a\7\u02c0\2\2\u0ebd\u0ebe\t=\2\2\u0ebe\u0ec0"+
		"\7\u0117\2\2\u0ebf\u0ec1\7\27\2\2\u0ec0\u0ebf\3\2\2\2\u0ec0\u0ec1\3\2"+
		"\2\2\u0ec1\u0ec2\3\2\2\2\u0ec2\u0f1a\7\u02c0\2\2\u0ec3\u0ec5\7\u0192\2"+
		"\2\u0ec4\u0ec6\7\27\2\2\u0ec5\u0ec4\3\2\2\2\u0ec5\u0ec6\3\2\2\2\u0ec6"+
		"\u0ec7\3\2\2\2\u0ec7\u0f1a\7\u02c1\2\2\u0ec8\u0eca\7\u011b\2\2\u0ec9\u0ecb"+
		"\7\27\2\2\u0eca\u0ec9\3\2\2\2\u0eca\u0ecb\3\2\2\2\u0ecb\u0ecc\3\2\2\2"+
		"\u0ecc\u0f1a\7\u02c0\2\2\u0ecd\u0ecf\7\u011d\2\2\u0ece\u0ed0\7\27\2\2"+
		"\u0ecf\u0ece\3\2\2\2\u0ecf\u0ed0\3\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0f1a"+
		"\5\u0144\u00a3\2\u0ed2\u0ed4\7\u017e\2\2\u0ed3\u0ed5\7\27\2\2\u0ed4\u0ed3"+
		"\3\2\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0ed6\3\2\2\2\u0ed6\u0f1a\t>\2\2\u0ed7"+
		"\u0ed9\7\u017f\2\2\u0ed8\u0eda\7\27\2\2\u0ed9\u0ed8\3\2\2\2\u0ed9\u0eda"+
		"\3\2\2\2\u0eda\u0edb\3\2\2\2\u0edb\u0f1a\7\u02c1\2\2\u0edc\u0ede\7\u0166"+
		"\2\2\u0edd\u0edf\7\27\2\2\u0ede\u0edd\3\2\2\2\u0ede\u0edf\3\2\2\2\u0edf"+
		"\u0ee0\3\2\2\2\u0ee0\u0f1a\7\u02c1\2\2\u0ee1\u0ee3\7\u0167\2\2\u0ee2\u0ee4"+
		"\7\27\2\2\u0ee3\u0ee2\3\2\2\2\u0ee3\u0ee4\3\2\2\2\u0ee4\u0ee5\3\2\2\2"+
		"\u0ee5\u0f1a\7\u02c1\2\2\u0ee6\u0ee8\7\u0180\2\2\u0ee7\u0ee9\7\27\2\2"+
		"\u0ee8\u0ee7\3\2\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0f1a"+
		"\t?\2\2\u0eeb\u0eed\7\u00f9\2\2\u0eec\u0eee\7\27\2\2\u0eed\u0eec\3\2\2"+
		"\2\u0eed\u0eee\3\2\2\2\u0eee\u0eef\3\2\2\2\u0eef\u0f1a\7\u02c0\2\2\u0ef0"+
		"\u0ef2\7\u0174\2\2\u0ef1\u0ef3\7\27\2\2\u0ef2\u0ef1\3\2\2\2\u0ef2\u0ef3"+
		"\3\2\2\2\u0ef3\u0ef4\3\2\2\2\u0ef4\u0f1a\t@\2\2\u0ef5\u0ef7\7\u0170\2"+
		"\2\u0ef6\u0ef8\7\27\2\2\u0ef7\u0ef6\3\2\2\2\u0ef7\u0ef8\3\2\2\2\u0ef8"+
		"\u0ef9\3\2\2\2\u0ef9\u0f1a\t?\2\2\u0efa\u0efc\7\u0171\2\2\u0efb\u0efd"+
		"\7\27\2\2\u0efc\u0efb\3\2\2\2\u0efc\u0efd\3\2\2\2\u0efd\u0efe\3\2\2\2"+
		"\u0efe\u0f1a\t?\2\2\u0eff\u0f01\7\u0172\2\2\u0f00\u0f02\7\27\2\2\u0f01"+
		"\u0f00\3\2\2\2\u0f01\u0f02\3\2\2\2\u0f02\u0f03\3\2\2\2\u0f03\u0f1a\7\u02c1"+
		"\2\2\u0f04\u0f05\7\u00be\2\2\u0f05\u0f08\5\u0144\u00a3\2\u0f06\u0f07\7"+
		"\u00df\2\2\u0f07\u0f09\t\62\2\2\u0f08\u0f06\3\2\2\2\u0f08\u0f09\3\2\2"+
		"\2\u0f09\u0f1a\3\2\2\2\u0f0a\u0f0c\7L\2\2\u0f0b\u0f0d\7\27\2\2\u0f0c\u0f0b"+
		"\3\2\2\2\u0f0c\u0f0d\3\2\2\2\u0f0d\u0f0e\3\2\2\2\u0f0e\u0f0f\7\36\2\2"+
		"\u0f0f\u0f14\5\u00a2R\2\u0f10\u0f11\7$\2\2\u0f11\u0f13\5\u00a2R\2\u0f12"+
		"\u0f10\3\2\2\2\u0f13\u0f16\3\2\2\2\u0f14\u0f12\3\2\2\2\u0f14\u0f15\3\2"+
		"\2\2\u0f15\u0f17\3\2\2\2\u0f16\u0f14\3\2\2\2\u0f17\u0f18\7\37\2\2\u0f18"+
		"\u0f1a\3\2\2\2\u0f19\u0e98\3\2\2\2\u0f19\u0e9d\3\2\2\2\u0f19\u0ea3\3\2"+
		"\2\2\u0f19\u0ea9\3\2\2\2\u0f19\u0eae\3\2\2\2\u0f19\u0eb3\3\2\2\2\u0f19"+
		"\u0eb8\3\2\2\2\u0f19\u0ebd\3\2\2\2\u0f19\u0ec3\3\2\2\2\u0f19\u0ec8\3\2"+
		"\2\2\u0f19\u0ecd\3\2\2\2\u0f19\u0ed2\3\2\2\2\u0f19\u0ed7\3\2\2\2\u0f19"+
		"\u0edc\3\2\2\2\u0f19\u0ee1\3\2\2\2\u0f19\u0ee6\3\2\2\2\u0f19\u0eeb\3\2"+
		"\2\2\u0f19\u0ef0\3\2\2\2\u0f19\u0ef5\3\2\2\2\u0f19\u0efa\3\2\2\2\u0f19"+
		"\u0eff\3\2\2\2\u0f19\u0f04\3\2\2\2\u0f19\u0f0a\3\2\2\2\u0f1a\u01c3\3\2"+
		"\2\2\u0f1b\u0f1d\79\2\2\u0f1c\u0f1e\7<\2\2\u0f1d\u0f1c\3\2\2\2\u0f1d\u0f1e"+
		"\3\2\2\2\u0f1e\u0f2e\3\2\2\2\u0f1f\u0f21\5\u0196\u00cc\2\u0f20\u0f22\5"+
		"\u01c6\u00e4\2\u0f21\u0f20\3\2\2\2\u0f21\u0f22\3\2\2\2\u0f22\u0f2f\3\2"+
		"\2\2\u0f23\u0f24\7\36\2\2\u0f24\u0f29\5\u0196\u00cc\2\u0f25\u0f26\7$\2"+
		"\2\u0f26\u0f28\5\u0196\u00cc\2\u0f27\u0f25\3\2\2\2\u0f28\u0f2b\3\2\2\2"+
		"\u0f29\u0f27\3\2\2\2\u0f29\u0f2a\3\2\2\2\u0f2a\u0f2c\3\2\2\2\u0f2b\u0f29"+
		"\3\2\2\2\u0f2c\u0f2d\7\37\2\2\u0f2d\u0f2f\3\2\2\2\u0f2e\u0f1f\3\2\2\2"+
		"\u0f2e\u0f23\3\2\2\2\u0f2f\u01c5\3\2\2\2\u0f30\u0f34\7\u00c8\2\2\u0f31"+
		"\u0f32\7\u00ca\2\2\u0f32\u0f34\5\u00a4S\2\u0f33\u0f30\3\2\2\2\u0f33\u0f31"+
		"\3\2\2\2\u0f34\u01c7\3\2\2\2\u0f35\u0f36\79\2\2\u0f36\u0f37\5\u01a4\u00d3"+
		"\2\u0f37\u01c9\3\2\2\2\u0f38\u0f39\79\2\2\u0f39\u0f3a\5\u01ae\u00d8\2"+
		"\u0f3a\u01cb\3\2\2\2\u0f3b\u0f3d\7\u0106\2\2\u0f3c\u0f3e\7<\2\2\u0f3d"+
		"\u0f3c\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f\u0f40\5\u00a4"+
		"S\2\u0f40\u0f42\5\u0196\u00cc\2\u0f41\u0f43\5\u01c6\u00e4\2\u0f42\u0f41"+
		"\3\2\2\2\u0f42\u0f43\3\2\2\2\u0f43\u01cd\3\2\2\2\u0f44\u0f46\7\u00c4\2"+
		"\2\u0f45\u0f47\7<\2\2\u0f46\u0f45\3\2\2\2\u0f46\u0f47\3\2\2\2\u0f47\u0f48"+
		"\3\2\2\2\u0f48\u0f4a\5\u0196\u00cc\2\u0f49\u0f4b\5\u01c6\u00e4\2\u0f4a"+
		"\u0f49\3\2\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b\u01cf\3\2\2\2\u0f4c\u0f4e\7\64"+
		"\2\2\u0f4d\u0f4f\7<\2\2\u0f4e\u0f4d\3\2\2\2\u0f4e\u0f4f\3\2\2\2\u0f4f"+
		"\u0f50\3\2\2\2\u0f50\u0f51\5\u00a4S\2\u0f51\u01d1\3\2\2\2\u0f52\u0f53"+
		"\7\64\2\2\u0f53\u0f54\t\17\2\2\u0f54\u0f55\5\u00a6T\2\u0f55\u01d3\3\2"+
		"\2\2\u0f56\u0f57\7\64\2\2\u0f57\u0f58\5\u01b2\u00da\2\u0f58\u01d5\3\2"+
		"\2\2\u0f59\u0f5a\7\u014b\2\2\u0f5a\u0f5b\7<\2\2\u0f5b\u0f5c\5\u00a4S\2"+
		"\u0f5c\u0f5d\7d\2\2\u0f5d\u0f5e\5\u00a4S\2\u0f5e\u01d7\3\2\2\2\u0f5f\u0f60"+
		"\7\u014b\2\2\u0f60\u0f61\t\17\2\2\u0f61\u0f62\5\u00a6T\2\u0f62\u0f63\7"+
		"d\2\2\u0f63\u0f64\5\u00a6T\2\u0f64\u01d9\3\2\2\2\u0f65\u0f67\7\u014b\2"+
		"\2\u0f66\u0f68\tA\2\2\u0f67\u0f66\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68\u0f69"+
		"\3\2\2\2\u0f69\u0f6a\5\u009aN\2\u0f6a\u01db\3\2\2\2\u0f6b\u0f6c\7\36\2"+
		"\2\u0f6c\u0f71\5\u01de\u00f0\2\u0f6d\u0f6e\7$\2\2\u0f6e\u0f70\5\u01de"+
		"\u00f0\2\u0f6f\u0f6d\3\2\2\2\u0f70\u0f73\3\2\2\2\u0f71\u0f6f\3\2\2\2\u0f71"+
		"\u0f72\3\2\2\2\u0f72\u0f74\3\2\2\2\u0f73\u0f71\3\2\2\2\u0f74\u0f75\7\37"+
		"\2\2\u0f75\u01dd\3\2\2\2\u0f76\u0f77\7\u00dd\2\2\u0f77\u0f83\5\u009aN"+
		"\2\u0f78\u0f81\7J\2\2\u0f79\u0f7a\7\u0131\2\2\u0f7a\u0f7b\7\u00e4\2\2"+
		"\u0f7b\u0f82\5\u01e0\u00f1\2\u0f7c\u0f7d\7n\2\2\u0f7d\u0f7e\7\36\2\2\u0f7e"+
		"\u0f7f\5\u01e2\u00f2\2\u0f7f\u0f80\7\37\2\2\u0f80\u0f82\3\2\2\2\u0f81"+
		"\u0f79\3\2\2\2\u0f81\u0f7c\3\2\2\2\u0f82\u0f84\3\2\2\2\u0f83\u0f78\3\2"+
		"\2\2\u0f83\u0f84\3\2\2\2\u0f84\u0f88\3\2\2\2\u0f85\u0f87\5\u01e4\u00f3"+
		"\2\u0f86\u0f85\3\2\2\2\u0f87\u0f8a\3\2\2\2\u0f88\u0f86\3\2\2\2\u0f88\u0f89"+
		"\3\2\2\2\u0f89\u0f96\3\2\2\2\u0f8a\u0f88\3\2\2\2\u0f8b\u0f8c\7\36\2\2"+
		"\u0f8c\u0f91\5\u01e6\u00f4\2\u0f8d\u0f8e\7$\2\2\u0f8e\u0f90\5\u01e6\u00f4"+
		"\2\u0f8f\u0f8d\3\2\2\2\u0f90\u0f93\3\2\2\2\u0f91\u0f8f\3\2\2\2\u0f91\u0f92"+
		"\3\2\2\2\u0f92\u0f94\3\2\2\2\u0f93\u0f91\3\2\2\2\u0f94\u0f95\7\37\2\2"+
		"\u0f95\u0f97\3\2\2\2\u0f96\u0f8b\3\2\2\2\u0f96\u0f97\3\2\2\2\u0f97\u01df"+
		"\3\2\2\2\u0f98\u0f9b\7\36\2\2\u0f99\u0f9c\5\u00e0q\2\u0f9a\u0f9c\5\u01e2"+
		"\u00f2\2\u0f9b\u0f99\3\2\2\2\u0f9b\u0f9a\3\2\2\2\u0f9c\u0f9d\3\2\2\2\u0f9d"+
		"\u0f9e\7\37\2\2\u0f9e\u0fa1\3\2\2\2\u0f9f\u0fa1\7\u0102\2\2\u0fa0\u0f98"+
		"\3\2\2\2\u0fa0\u0f9f\3\2\2\2\u0fa1\u01e1\3\2\2\2\u0fa2\u0fa7\5\u0086D"+
		"\2\u0fa3\u0fa4\7$\2\2\u0fa4\u0fa6\5\u0086D\2\u0fa5\u0fa3\3\2\2\2\u0fa6"+
		"\u0fa9\3\2\2\2\u0fa7\u0fa5\3\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8\u01e3\3\2"+
		"\2\2\u0fa9\u0fa7\3\2\2\2\u0faa\u0fac\7\u00df\2\2\u0fab\u0faa\3\2\2\2\u0fab"+
		"\u0fac\3\2\2\2\u0fac\u0fad\3\2\2\2\u0fad\u0faf\7\u011d\2\2\u0fae\u0fb0"+
		"\7\27\2\2\u0faf\u0fae\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fb1\3\2\2\2"+
		"\u0fb1\u0fd3\5\u009aN\2\u0fb2\u0fb4\7\u010d\2\2\u0fb3\u0fb5\7\27\2\2\u0fb4"+
		"\u0fb3\3\2\2\2\u0fb4\u0fb5\3\2\2\2\u0fb5\u0fb6\3\2\2\2\u0fb6\u0fd3\7\u02c0"+
		"\2\2\u0fb7\u0fb8\7\u0115\2\2\u0fb8\u0fba\7\u0117\2\2\u0fb9\u0fbb\7\27"+
		"\2\2\u0fba\u0fb9\3\2\2\2\u0fba\u0fbb\3\2\2\2\u0fbb\u0fbc\3\2\2\2\u0fbc"+
		"\u0fd3\7\u02c0\2\2\u0fbd\u0fbe\7=\2\2\u0fbe\u0fc0\7\u0117\2\2\u0fbf\u0fc1"+
		"\7\27\2\2\u0fc0\u0fbf\3\2\2\2\u0fc0\u0fc1\3\2\2\2\u0fc1\u0fc2\3\2\2\2"+
		"\u0fc2\u0fd3\7\u02c0\2\2\u0fc3\u0fc5\7\u0166\2\2\u0fc4\u0fc6\7\27\2\2"+
		"\u0fc5\u0fc4\3\2\2\2\u0fc5\u0fc6\3\2\2\2\u0fc6\u0fc7\3\2\2\2\u0fc7\u0fd3"+
		"\7\u02c1\2\2\u0fc8\u0fca\7\u0167\2\2\u0fc9\u0fcb\7\27\2\2\u0fca\u0fc9"+
		"\3\2\2\2\u0fca\u0fcb\3\2\2\2\u0fcb\u0fcc\3\2\2\2\u0fcc\u0fd3\7\u02c1\2"+
		"\2\u0fcd\u0fcf\7\u00be\2\2\u0fce\u0fd0\7\27\2\2\u0fcf\u0fce\3\2\2\2\u0fcf"+
		"\u0fd0\3\2\2\2\u0fd0\u0fd1\3\2\2\2\u0fd1\u0fd3\5\u009aN\2\u0fd2\u0fab"+
		"\3\2\2\2\u0fd2\u0fb2\3\2\2\2\u0fd2\u0fb7\3\2\2\2\u0fd2\u0fbd\3\2\2\2\u0fd2"+
		"\u0fc3\3\2\2\2\u0fd2\u0fc8\3\2\2\2\u0fd2\u0fcd\3\2\2\2\u0fd3\u01e5\3\2"+
		"\2\2\u0fd4\u0fd5\7\u00de\2\2\u0fd5\u0fd9\5\u009aN\2\u0fd6\u0fd8\5\u01e4"+
		"\u00f3\2\u0fd7\u0fd6\3\2\2\2\u0fd8\u0fdb\3\2\2\2\u0fd9\u0fd7\3\2\2\2\u0fd9"+
		"\u0fda\3\2\2\2\u0fda\u01e7\3\2\2\2\u0fdb\u0fd9\3\2\2\2\u0fdc\u0fde\7\u00e3"+
		"\2\2\u0fdd\u0fdc\3\2\2\2\u0fdd\u0fde\3\2\2\2\u0fde\u01e9\3\2\2\2\u0fdf"+
		"\u0fe0\7`\2\2\u0fe0\u0fe2\7l\2\2\u0fe1\u0fdf\3\2\2\2\u0fe1\u0fe2\3\2\2"+
		"\2\u0fe2\u01eb\3\2\2\2\u0fe3\u0fe4\tB\2\2\u0fe4\u01ed\3\2\2\2\u0fe5\u0fe6"+
		"\7\u009f\2\2\u0fe6\u0fed\7\27\2\2\u0fe7\u0fee\5\u00a8U\2\u0fe8\u0feb\7"+
		"\u00a0\2\2\u0fe9\u0fea\7\36\2\2\u0fea\u0fec\7\37\2\2\u0feb\u0fe9\3\2\2"+
		"\2\u0feb\u0fec\3\2\2\2\u0fec\u0fee\3\2\2\2\u0fed\u0fe7\3\2\2\2\u0fed\u0fe8"+
		"\3\2\2\2\u0fee\u01ef\3\2\2\2\u0fef\u0ff0\7)\2\2\u0ff0\u0ff5\5\u01f2\u00fa"+
		"\2\u0ff1\u0ff2\7\16\2\2\u0ff2\u0ff4\5\u0130\u0099\2\u0ff3\u0ff1\3\2\2"+
		"\2\u0ff4\u0ff7\3\2\2\2\u0ff5\u0ff3\3\2\2\2\u0ff5\u0ff6\3\2\2\2\u0ff6\u1011"+
		"\3\2\2\2\u0ff7\u0ff5\3\2\2\2\u0ff8\u0ff9\7\u01a9\2\2\u0ff9\u1003\5\u0130"+
		"\u0099\2\u0ffa\u0ffb\7\u01aa\2\2\u0ffb\u1000\5\u01f2\u00fa\2\u0ffc\u0ffd"+
		"\7\16\2\2\u0ffd\u0fff\5\u0130\u0099\2\u0ffe\u0ffc\3\2\2\2\u0fff\u1002"+
		"\3\2\2\2\u1000\u0ffe\3\2\2\2\u1000\u1001\3\2\2\2\u1001\u1004\3\2\2\2\u1002"+
		"\u1000\3\2\2\2\u1003\u0ffa\3\2\2\2\u1003\u1004\3\2\2\2\u1004\u100e\3\2"+
		"\2\2\u1005\u1006\7\u01ab\2\2\u1006\u100b\5\u01f2\u00fa\2\u1007\u1008\7"+
		"\16\2\2\u1008\u100a\5\u0130\u0099\2\u1009\u1007\3\2\2\2\u100a\u100d\3"+
		"\2\2\2\u100b\u1009\3\2\2\2\u100b\u100c\3\2\2\2\u100c\u100f\3\2\2\2\u100d"+
		"\u100b\3\2\2\2\u100e\u1005\3\2\2\2\u100e\u100f\3\2\2\2\u100f\u1011\3\2"+
		"\2\2\u1010\u0fef\3\2\2\2\u1010\u0ff8\3\2\2\2\u1011\u01f1\3\2\2\2\u1012"+
		"\u1017\7\u0196\2\2\u1013\u1017\5\u0088E\2\u1014\u1017\5\u008aF\2\u1015"+
		"\u1017\5\u00e0q\2\u1016\u1012\3\2\2\2\u1016\u1013\3\2\2\2\u1016\u1014"+
		"\3\2\2\2\u1016\u1015\3\2\2\2\u1017\u01f3\3\2\2\2\u1018\u1019\7\u02c7\2"+
		"\2\u1019\u01f5\3\2\2\2\u101a\u101b\7\u01ac\2\2\u101b\u1029\7\u02c0\2\2"+
		"\u101c\u101d\7\u00bb\2\2\u101d\u1029\7\u02c0\2\2\u101e\u101f\7\u00d3\2"+
		"\2\u101f\u1029\7\u02c0\2\2\u1020\u1021\7\u00f9\2\2\u1021\u1029\7\u02c0"+
		"\2\2\u1022\u1023\7\u01ad\2\2\u1023\u1029\7\u02c0\2\2\u1024\u1025\7\u01b2"+
		"\2\2\u1025\u1029\7\u02c0\2\2\u1026\u1027\7\u01ae\2\2\u1027\u1029\5\u008a"+
		"F\2\u1028\u101a\3\2\2\2\u1028\u101c\3\2\2\2\u1028\u101e\3\2\2\2\u1028"+
		"\u1020\3\2\2\2\u1028\u1022\3\2\2\2\u1028\u1024\3\2\2\2\u1028\u1026\3\2"+
		"\2\2\u1029\u01f7\3\2\2\2\u102a\u102b\7\u010d\2\2\u102b\u1042\7\u02c0\2"+
		"\2\u102c\u102d\7\u0160\2\2\u102d\u1042\7\u00a1\2\2\u102e\u1030\7h\2\2"+
		"\u102f\u102e\3\2\2\2\u102f\u1030\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u1042"+
		"\7\u01b3\2\2\u1032\u1033\7\u01b5\2\2\u1033\u103d\7\u00a1\2\2\u1034\u1035"+
		"\7\u00f7\2\2\u1035\u103d\7\u00a1\2\2\u1036\u1037\7\u01b6\2\2\u1037\u1038"+
		"\7\u00a1\2\2\u1038\u103d\7\u0115\2\2\u1039\u103a\7\u01b7\2\2\u103a\u103b"+
		"\7\u00a1\2\2\u103b\u103d\7\u0115\2\2\u103c\u1032\3\2\2\2\u103c\u1034\3"+
		"\2\2\2\u103c\u1036\3\2\2\2\u103c\u1039\3\2\2\2\u103d\u1042\3\2\2\2\u103e"+
		"\u103f\7\u00a1\2\2\u103f\u1040\7\u01b8\2\2\u1040\u1042\t-\2\2\u1041\u102a"+
		"\3\2\2\2\u1041\u102c\3\2\2\2\u1041\u102f\3\2\2\2\u1041\u103c\3\2\2\2\u1041"+
		"\u103e\3\2\2\2\u1042\u01f9\3\2\2\2\u1043\u1044\tC\2\2\u1044\u1045\5\u009a"+
		"N\2\u1045\u1046\5\u0138\u009d\2\u1046\u01fb\3\2\2\2\u1047\u104a\7\u02c8"+
		"\2\2\u1048\u104a\5\u008aF\2\u1049\u1047\3\2\2\2\u1049\u1048\3\2\2\2\u104a"+
		"\u01fd\3\2\2\2\u104b\u104d\7:\2\2\u104c\u104e\5\u0202\u0102\2\u104d\u104c"+
		"\3\2\2\2\u104d\u104e\3\2\2\2\u104e\u104f\3\2\2\2\u104f\u1050\7\u00d6\2"+
		"\2\u1050\u01ff\3\2\2\2\u1051\u1053\7:\2\2\u1052\u1054\5\u0202\u0102\2"+
		"\u1053\u1052\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1055\3\2\2\2\u1055\u1056"+
		"\7\u0101\2\2\u1056\u1057\7\27\2\2\u1057\u1058\5\u0204\u0103\2\u1058\u0201"+
		"\3\2\2\2\u1059\u105f\t\25\2\2\u105a\u105b\7)\2\2\u105b\u105c\7)\2\2\u105c"+
		"\u105d\t\25\2\2\u105d\u105f\7\23\2\2\u105e\u1059\3\2\2\2\u105e\u105a\3"+
		"\2\2\2\u105f\u0203\3\2\2\2\u1060\u1061\tD\2\2\u1061\u0205\3\2\2\2\u1062"+
		"\u1066\7z\2\2\u1063\u1064\7\u00d5\2\2\u1064\u1066\7\u00d6\2\2\u1065\u1062"+
		"\3\2\2\2\u1065\u1063\3\2\2\2\u1066\u0207\3\2\2\2\u1067\u1068\7{\2\2\u1068"+
		"\u0209\3\2\2\2\u1069\u106a\7|\2\2\u106a\u020b\3\2\2\2\u106b\u106c\7}\2"+
		"\2\u106c\u020d\3\2\2\2\u106d\u1071\7\67\2\2\u106e\u1072\5\u0212\u010a"+
		"\2\u106f\u1072\5\u0214\u010b\2\u1070\u1072\5\u0216\u010c\2\u1071\u106e"+
		"\3\2\2\2\u1071\u106f\3\2\2\2\u1071\u1070\3\2\2\2\u1072\u020f\3\2\2\2\u1073"+
		"\u1078\78\2\2\u1074\u1079\5\u0212\u010a\2\u1075\u1079\5\u0214\u010b\2"+
		"\u1076\u1079\5\u0218\u010d\2\u1077\u1079\5\u0216\u010c\2\u1078\u1074\3"+
		"\2\2\2\u1078\u1075\3\2\2\2\u1078\u1076\3\2\2\2\u1078\u1077\3\2\2\2\u1079"+
		"\u0211\3\2\2\2\u107a\u107b\7\u0142\2\2\u107b\u107c\7_\2\2\u107c\u107d"+
		"\5\u00d8m\2\u107d\u107e\7d\2\2\u107e\u1080\5\u023a\u011e\2\u107f\u1081"+
		"\5\u0238\u011d\2\u1080\u107f\3\2\2\2\u1080\u1081\3\2\2\2\u1081\u0213\3"+
		"\2\2\2\u1082\u1083\5\u021a\u010e\2\u1083\u1084\7_\2\2\u1084\u1085\5\u021e"+
		"\u0110\2\u1085\u1086\tE\2\2\u1086\u1088\5\u023a\u011e\2\u1087\u1089\5"+
		"\u0238\u011d\2\u1088\u1087\3\2\2\2\u1088\u1089\3\2\2\2\u1089\u108b\3\2"+
		"\2\2\u108a\u108c\5\u023e\u0120\2\u108b\u108a\3\2\2\2\u108b\u108c\3\2\2"+
		"\2\u108c\u0215\3\2\2\2\u108d\u108e\5\u023c\u011f\2\u108e\u108f\tE\2\2"+
		"\u108f\u1091\5\u023a\u011e\2\u1090\u1092\5\u0238\u011d\2\u1091\u1090\3"+
		"\2\2\2\u1091\u1092\3\2\2\2\u1092\u0217\3\2\2\2\u1093\u1095\7o\2\2\u1094"+
		"\u1096\7\u00fa\2\2\u1095\u1094\3\2\2\2\u1095\u1096\3\2\2\2\u1096\u1097"+
		"\3\2\2\2\u1097\u1098\7$\2\2\u1098\u1099\7\67\2\2\u1099\u109a\7\u00f8\2"+
		"\2\u109a\u109b\7S\2\2\u109b\u109c\5\u023a\u011e\2\u109c\u0219\3\2\2\2"+
		"\u109d\u109f\5\u021c\u010f\2\u109e\u10a0\5\u00ba^\2\u109f\u109e\3\2\2"+
		"\2\u109f\u10a0\3\2\2\2\u10a0\u10a8\3\2\2\2\u10a1\u10a2\7$\2\2\u10a2\u10a4"+
		"\5\u021c\u010f\2\u10a3\u10a5\5\u00ba^\2\u10a4\u10a3\3\2\2\2\u10a4\u10a5"+
		"\3\2\2\2\u10a5\u10a7\3\2\2\2\u10a6\u10a1\3\2\2\2\u10a7\u10aa\3\2\2\2\u10a8"+
		"\u10a6\3\2\2\2\u10a8\u10a9\3\2\2\2\u10a9\u021b\3\2\2\2\u10aa\u10a8\3\2"+
		"\2\2\u10ab\u10ad\7o\2\2\u10ac\u10ae\7\u00fa\2\2\u10ad\u10ac\3\2\2\2\u10ad"+
		"\u10ae\3\2\2\2\u10ae\u10e9\3\2\2\2\u10af\u10b1\7\63\2\2\u10b0\u10b2\7"+
		"\u0152\2\2\u10b1\u10b0\3\2\2\2\u10b1\u10b2\3\2\2\2\u10b2\u10e9\3\2\2\2"+
		"\u10b3\u10e9\7\62\2\2\u10b4\u10b5\7\62\2\2\u10b5\u10e9\7\u0152\2\2\u10b6"+
		"\u10b7\7\62\2\2\u10b7\u10e9\7\u00be\2\2\u10b8\u10b9\7\62\2\2\u10b9\u10ba"+
		"\7\u00e3\2\2\u10ba\u10e9\7\u00bd\2\2\u10bb\u10bc\7\62\2\2\u10bc\u10e9"+
		"\7\u00d3\2\2\u10bd\u10be\7\62\2\2\u10be\u10e9\7H\2\2\u10bf\u10e9\7\61"+
		"\2\2\u10c0\u10e9\7\64\2\2\u10c1\u10e9\7\u011e\2\2\u10c2\u10e9\7\u0122"+
		"\2\2\u10c3\u10e9\7\u0124\2\2\u10c4\u10c5\7\67\2\2\u10c5\u10e9\7\u00f8"+
		"\2\2\u10c6\u10e9\7=\2\2\u10c7\u10e9\7/\2\2\u10c8\u10c9\7\u0133\2\2\u10c9"+
		"\u10e9\7\u00bd\2\2\u10ca\u10e9\7\u0141\2\2\u10cb\u10e9\7\u0142\2\2\u10cc"+
		"\u10e9\7\u00fd\2\2\u10cd\u10e9\7\u0149\2\2\u10ce\u10cf\7\u014e\2\2\u10cf"+
		"\u10e9\7\u010a\2\2\u10d0\u10d1\7\u014e\2\2\u10d1\u10e9\7\u0158\2\2\u10d2"+
		"\u10e9\7.\2\2\u10d3\u10d4\7\u00b9\2\2\u10d4\u10e9\7\u00ba\2\2\u10d5\u10d6"+
		"\7\u00b9\2\2\u10d6\u10e9\7H\2\2\u10d7\u10e9\7\u0156\2\2\u10d8\u10e9\7"+
		"\u00e1\2\2\u10d9\u10e9\7F\2\2\u10da\u10e9\7\60\2\2\u10db\u10e9\7\u00eb"+
		"\2\2\u10dc\u10e9\7\u018e\2\2\u10dd\u10e9\7\u0191\2\2\u10de\u10e9\7\u017b"+
		"\2\2\u10df\u10e9\7\u0193\2\2\u10e0\u10e9\7\u017c\2\2\u10e1\u10e9\7\u017d"+
		"\2\2\u10e2\u10e9\7\u0177\2\2\u10e3\u10e9\7\u0176\2\2\u10e4\u10e9\7\u0173"+
		"\2\2\u10e5\u10e9\7\u0175\2\2\u10e6\u10e9\7\u0194\2\2\u10e7\u10e9\7\u0195"+
		"\2\2\u10e8\u10ab\3\2\2\2\u10e8\u10af\3\2\2\2\u10e8\u10b3\3\2\2\2\u10e8"+
		"\u10b4\3\2\2\2\u10e8\u10b6\3\2\2\2\u10e8\u10b8\3\2\2\2\u10e8\u10bb\3\2"+
		"\2\2\u10e8\u10bd\3\2\2\2\u10e8\u10bf\3\2\2\2\u10e8\u10c0\3\2\2\2\u10e8"+
		"\u10c1\3\2\2\2\u10e8\u10c2\3\2\2\2\u10e8\u10c3\3\2\2\2\u10e8\u10c4\3\2"+
		"\2\2\u10e8\u10c6\3\2\2\2\u10e8\u10c7\3\2\2\2\u10e8\u10c8\3\2\2\2\u10e8"+
		"\u10ca\3\2\2\2\u10e8\u10cb\3\2\2\2\u10e8\u10cc\3\2\2\2\u10e8\u10cd\3\2"+
		"\2\2\u10e8\u10ce\3\2\2\2\u10e8\u10d0\3\2\2\2\u10e8\u10d2\3\2\2\2\u10e8"+
		"\u10d3\3\2\2\2\u10e8\u10d5\3\2\2\2\u10e8\u10d7\3\2\2\2\u10e8\u10d8\3\2"+
		"\2\2\u10e8\u10d9\3\2\2\2\u10e8\u10da\3\2\2\2\u10e8\u10db\3\2\2\2\u10e8"+
		"\u10dc\3\2\2\2\u10e8\u10dd\3\2\2\2\u10e8\u10de\3\2\2\2\u10e8\u10df\3\2"+
		"\2\2\u10e8\u10e0\3\2\2\2\u10e8\u10e1\3\2\2\2\u10e8\u10e2\3\2\2\2\u10e8"+
		"\u10e3\3\2\2\2\u10e8\u10e4\3\2\2\2\u10e8\u10e5\3\2\2\2\u10e8\u10e6\3\2"+
		"\2\2\u10e8\u10e7\3\2\2\2\u10e9\u021d\3\2\2\2\u10ea\u10ec\5\u0220\u0111"+
		"\2\u10eb\u10ea\3\2\2\2\u10eb\u10ec\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed\u10ee"+
		"\5\u0222\u0112\2\u10ee\u021f\3\2\2\2\u10ef\u10f0\tF\2\2\u10f0\u0221\3"+
		"\2\2\2\u10f1\u10f9\7\20\2\2\u10f2\u10f3\7\20\2\2\u10f3\u10f9\7\24\2\2"+
		"\u10f4\u10f5\5\u009aN\2\u10f5\u10f6\7\24\2\2\u10f6\u10f9\3\2\2\2\u10f7"+
		"\u10f9\5\u00a2R\2\u10f8\u10f1\3\2\2\2\u10f8\u10f2\3\2\2\2\u10f8\u10f4"+
		"\3\2\2\2\u10f8\u10f7\3\2\2\2\u10f9\u0223\3\2\2\2\u10fa\u10fb\7\62\2\2"+
		"\u10fb\u10ff\7\u00d3\2\2\u10fc\u10fd\7`\2\2\u10fd\u10fe\7h\2\2\u10fe\u1100"+
		"\7l\2\2\u10ff\u10fc\3\2\2\2\u10ff\u1100\3\2\2\2\u1100\u1101\3\2\2\2\u1101"+
		"\u1103\5\u00a8U\2\u1102\u1104\5\u0240\u0121\2\u1103\u1102\3\2\2\2\u1103"+
		"\u1104\3\2\2\2\u1104\u110c\3\2\2\2\u1105\u1106\7$\2\2\u1106\u1108\5\u00a8"+
		"U\2\u1107\u1109\5\u0240\u0121\2\u1108\u1107\3\2\2\2\u1108\u1109\3\2\2"+
		"\2\u1109\u110b\3\2\2\2\u110a\u1105\3\2\2\2\u110b\u110e\3\2\2\2\u110c\u110a"+
		"\3\2\2\2\u110c\u110d\3\2\2\2\u110d\u110f\3\2\2\2\u110e\u110c\3\2\2\2\u110f"+
		"\u1110\7\u0097\2\2\u1110\u1111\7\u00d4\2\2\u1111\u1116\5\u00d0i\2\u1112"+
		"\u1113\7$\2\2\u1113\u1115\5\u00d0i\2\u1114\u1112\3\2\2\2\u1115\u1118\3"+
		"\2\2\2\u1116\u1114\3\2\2\2\u1116\u1117\3\2\2\2\u1117\u1127\3\2\2\2\u1118"+
		"\u1116\3\2\2\2\u1119\u1125\7\u014f\2\2\u111a\u1126\7\u0136\2\2\u111b\u1122"+
		"\5\u024c\u0127\2\u111c\u111e\7e\2\2\u111d\u111c\3\2\2\2\u111d\u111e\3"+
		"\2\2\2\u111e\u111f\3\2\2\2\u111f\u1121\5\u024c\u0127\2\u1120\u111d\3\2"+
		"\2\2\u1121\u1124\3\2\2\2\u1122\u1120\3\2\2\2\u1122\u1123\3\2\2\2\u1123"+
		"\u1126\3\2\2\2\u1124\u1122\3\2\2\2\u1125\u111a\3\2\2\2\u1125\u111b\3\2"+
		"\2\2\u1126\u1128\3\2\2\2\u1127\u1119\3\2\2\2\u1127\u1128\3\2\2\2\u1128"+
		"\u1131\3\2\2\2\u1129\u112a\7K\2\2\u112a\u112e\5\u024a\u0126\2\u112b\u112d"+
		"\5\u024a\u0126\2\u112c\u112b\3\2\2\2\u112d\u1130\3\2\2\2\u112e\u112c\3"+
		"\2\2\2\u112e\u112f\3\2\2\2\u112f\u1132\3\2\2\2\u1130\u112e\3\2\2\2\u1131"+
		"\u1129\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u1137\3\2\2\2\u1133\u1136\5\u0248"+
		"\u0125\2\u1134\u1136\5\u0246\u0124\2\u1135\u1133\3\2\2\2\u1135\u1134\3"+
		"\2\2\2\u1136\u1139\3\2\2\2\u1137\u1135\3\2\2\2\u1137\u1138\3\2\2\2\u1138"+
		"\u0225\3\2\2\2\u1139\u1137\3\2\2\2\u113a\u113b\7\63\2\2\u113b\u113e\7"+
		"\u00d3\2\2\u113c\u113d\7`\2\2\u113d\u113f\7l\2\2\u113e\u113c\3\2\2\2\u113e"+
		"\u113f\3\2\2\2\u113f\u1140\3\2\2\2\u1140\u1142\5\u00a8U\2\u1141\u1143"+
		"\5\u0240\u0121\2\u1142\u1141\3\2\2\2\u1142\u1143\3\2\2\2\u1143\u114b\3"+
		"\2\2\2\u1144\u1145\7$\2\2\u1145\u1147\5\u00a8U\2\u1146\u1148\5\u0240\u0121"+
		"\2\u1147\u1146\3\2\2\2\u1147\u1148\3\2\2\2\u1148\u114a\3\2\2\2\u1149\u1144"+
		"\3\2\2\2\u114a\u114d\3\2\2\2\u114b\u1149\3\2\2\2\u114b\u114c\3\2\2\2\u114c"+
		"\u115c\3\2\2\2\u114d\u114b\3\2\2\2\u114e\u115a\7\u014f\2\2\u114f\u115b"+
		"\7\u0136\2\2\u1150\u1157\5\u024c\u0127\2\u1151\u1153\7e\2\2\u1152\u1151"+
		"\3\2\2\2\u1152\u1153\3\2\2\2\u1153\u1154\3\2\2\2\u1154\u1156\5\u024c\u0127"+
		"\2\u1155\u1152\3\2\2\2\u1156\u1159\3\2\2\2\u1157\u1155\3\2\2\2\u1157\u1158"+
		"\3\2\2\2\u1158\u115b\3\2\2\2\u1159\u1157\3\2\2\2\u115a\u114f\3\2\2\2\u115a"+
		"\u1150\3\2\2\2\u115b\u115d\3\2\2\2\u115c\u114e\3\2\2\2\u115c\u115d\3\2"+
		"\2\2\u115d\u1166\3\2\2\2\u115e\u115f\7K\2\2\u115f\u1163\5\u024a\u0126"+
		"\2\u1160\u1162\5\u024a\u0126\2\u1161\u1160\3\2\2\2\u1162\u1165\3\2\2\2"+
		"\u1163\u1161\3\2\2\2\u1163\u1164\3\2\2\2\u1164\u1167\3\2\2\2\u1165\u1163"+
		"\3\2\2\2\u1166\u115e\3\2\2\2\u1166\u1167\3\2\2\2\u1167\u116c\3\2\2\2\u1168"+
		"\u116b\5\u0248\u0125\2\u1169\u116b\5\u0246\u0124\2\u116a\u1168\3\2\2\2"+
		"\u116a\u1169\3\2\2\2\u116b\u116e\3\2\2\2\u116c\u116a\3\2\2\2\u116c\u116d"+
		"\3\2\2\2\u116d\u118f\3\2\2\2\u116e\u116c\3\2\2\2\u116f\u1170\7\63\2\2"+
		"\u1170\u1173\7\u00d3\2\2\u1171\u1172\7`\2\2\u1172\u1174\7l\2\2\u1173\u1171"+
		"\3\2\2\2\u1173\u1174\3\2\2\2\u1174\u1175\3\2\2\2\u1175\u1176\7\u00d3\2"+
		"\2\u1176\u1177";
	private static final String _serializedATNSegment2 =
		"\7\36\2\2\u1177\u1178\7\37\2\2\u1178\u118f\5\u024e\u0128\2\u1179\u117a"+
		"\7\63\2\2\u117a\u117d\7\u00d3\2\2\u117b\u117c\7`\2\2\u117c\u117e\7l\2"+
		"\2\u117d\u117b\3\2\2\2\u117d\u117e\3\2\2\2\u117e\u117f\3\2\2\2\u117f\u1180"+
		"\5\u00a8U\2\u1180\u1181\7\u0097\2\2\u1181\u118c\7\u00d4\2\2\u1182\u118d"+
		"\7\u0136\2\2\u1183\u118d\7o\2\2\u1184\u1189\5\u00d0i\2\u1185\u1186\7$"+
		"\2\2\u1186\u1188\5\u00d0i\2\u1187\u1185\3\2\2\2\u1188\u118b\3\2\2\2\u1189"+
		"\u1187\3\2\2\2\u1189\u118a\3\2\2\2\u118a\u118d\3\2\2\2\u118b\u1189\3\2"+
		"\2\2\u118c\u1182\3\2\2\2\u118c\u1183\3\2\2\2\u118c\u1184\3\2\2\2\u118d"+
		"\u118f\3\2\2\2\u118e\u113a\3\2\2\2\u118e\u116f\3\2\2\2\u118e\u1179\3\2"+
		"\2\2\u118f\u0227\3\2\2\2\u1190\u1191\7\64\2\2\u1191\u1194\7\u00d3\2\2"+
		"\u1192\u1193\7`\2\2\u1193\u1195\7l\2\2\u1194\u1192\3\2\2\2\u1194\u1195"+
		"\3\2\2\2\u1195\u1196\3\2\2\2\u1196\u119b\5\u00a8U\2\u1197\u1198\7$\2\2"+
		"\u1198\u119a\5\u00a8U\2\u1199\u1197\3\2\2\2\u119a\u119d\3\2\2\2\u119b"+
		"\u1199\3\2\2\2\u119b\u119c\3\2\2\2\u119c\u0229\3\2\2\2\u119d\u119b\3\2"+
		"\2\2\u119e\u119f\7\62\2\2\u119f\u11a3\7\u00d4\2\2\u11a0\u11a1\7`\2\2\u11a1"+
		"\u11a2\7h\2\2\u11a2\u11a4\7l\2\2\u11a3\u11a0\3\2\2\2\u11a3\u11a4\3\2\2"+
		"\2\u11a4\u11a5\3\2\2\2\u11a5\u11aa\5\u00d0i\2\u11a6\u11a7\7$\2\2\u11a7"+
		"\u11a9\5\u00d0i\2\u11a8\u11a6\3\2\2\2\u11a9\u11ac\3\2\2\2\u11aa\u11a8"+
		"\3\2\2\2\u11aa\u11ab\3\2\2\2\u11ab\u022b\3\2\2\2\u11ac\u11aa\3\2\2\2\u11ad"+
		"\u11ae\7\64\2\2\u11ae\u11b1\7\u00d4\2\2\u11af\u11b0\7`\2\2\u11b0\u11b2"+
		"\7l\2\2\u11b1\u11af\3\2\2\2\u11b1\u11b2\3\2\2\2\u11b2\u11b3\3\2\2\2\u11b3"+
		"\u11b8\5\u00d0i\2\u11b4\u11b5\7$\2\2\u11b5\u11b7\5\u00d0i\2\u11b6\u11b4"+
		"\3\2\2\2\u11b7\u11ba\3\2\2\2\u11b8\u11b6\3\2\2\2\u11b8\u11b9\3\2\2\2\u11b9"+
		"\u022d\3\2\2\2\u11ba\u11b8\3\2\2\2\u11bb\u11bc\7\u014b\2\2\u11bc\u11bd"+
		"\7\u00d3\2\2\u11bd\u11be\5\u00a8U\2\u11be\u11bf\7d\2\2\u11bf\u11c7\5\u00a8"+
		"U\2\u11c0\u11c1\7$\2\2\u11c1\u11c2\5\u00a8U\2\u11c2\u11c3\7d\2\2\u11c3"+
		"\u11c4\5\u00a8U\2\u11c4\u11c6\3\2\2\2\u11c5\u11c0\3\2\2\2\u11c6\u11c9"+
		"\3\2\2\2\u11c7\u11c5\3\2\2\2\u11c7\u11c8\3\2\2\2\u11c8\u022f\3\2\2\2\u11c9"+
		"\u11c7\3\2\2\2\u11ca\u11cb\7:\2\2\u11cb\u11cc\7\u0097\2\2\u11cc\u11d7"+
		"\7\u00d4\2\2\u11cd\u11d8\7\u0136\2\2\u11ce\u11d8\7o\2\2\u11cf\u11d4\5"+
		"\u00d0i\2\u11d0\u11d1\7$\2\2\u11d1\u11d3\5\u00d0i\2\u11d2\u11d0\3\2\2"+
		"\2\u11d3\u11d6\3\2\2\2\u11d4\u11d2\3\2\2\2\u11d4\u11d5\3\2\2\2\u11d5\u11d8"+
		"\3\2\2\2\u11d6\u11d4\3\2\2\2\u11d7\u11cd\3\2\2\2\u11d7\u11ce\3\2\2\2\u11d7"+
		"\u11cf\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11da\7d\2\2\u11da\u11df\5\u00a8"+
		"U\2\u11db\u11dc\7$\2\2\u11dc\u11de\5\u00a8U\2\u11dd\u11db\3\2\2\2\u11de"+
		"\u11e1\3\2\2\2\u11df\u11dd\3\2\2\2\u11df\u11e0\3\2\2\2\u11e0\u0231\3\2"+
		"\2\2\u11e1\u11df\3\2\2\2\u11e2\u11e3\7:\2\2\u11e3\u11f9\7\u00d4\2\2\u11e4"+
		"\u11fa\7\u0097\2\2\u11e5\u11fa\7\u0136\2\2\u11e6\u11fa\7o\2\2\u11e7\u11e8"+
		"\7o\2\2\u11e8\u11e9\7\u011f\2\2\u11e9\u11ee\5\u00d0i\2\u11ea\u11eb\7$"+
		"\2\2\u11eb\u11ed\5\u00d0i\2\u11ec\u11ea\3\2\2\2\u11ed\u11f0\3\2\2\2\u11ee"+
		"\u11ec\3\2\2\2\u11ee\u11ef\3\2\2\2\u11ef\u11fa\3\2\2\2\u11f0\u11ee\3\2"+
		"\2\2\u11f1\u11f6\5\u00d0i\2\u11f2\u11f3\7$\2\2\u11f3\u11f5\5\u00d0i\2"+
		"\u11f4\u11f2\3\2\2\2\u11f5\u11f8\3\2\2\2\u11f6\u11f4\3\2\2\2\u11f6\u11f7"+
		"\3\2\2\2\u11f7\u11fa\3\2\2\2\u11f8\u11f6\3\2\2\2\u11f9\u11e4\3\2\2\2\u11f9"+
		"\u11e5\3\2\2\2\u11f9\u11e6\3\2\2\2\u11f9\u11e7\3\2\2\2\u11f9\u11f1\3\2"+
		"\2\2\u11fa\u0233\3\2\2\2\u11fb\u11fc\7:\2\2\u11fc\u11ff\7\u00f9\2\2\u11fd"+
		"\u11fe\7c\2\2\u11fe\u1200\5\u00a8U\2\u11ff\u11fd\3\2\2\2\u11ff\u1200\3"+
		"\2\2\2\u1200\u1201\3\2\2\2\u1201\u1204\5\u0236\u011c\2\u1202\u1203\7\u00c3"+
		"\2\2\u1203\u1205\7\u02c0\2\2\u1204\u1202\3\2\2\2\u1204\u1205\3\2\2\2\u1205"+
		"\u1209\3\2\2\2\u1206\u1207\7\u0219\2\2\u1207\u1208\7\u0098\2\2\u1208\u120a"+
		"\7\u00f9\2\2\u1209\u1206\3\2\2\2\u1209\u120a\3\2\2\2\u120a\u0235\3\2\2"+
		"\2\u120b\u120c\7\27\2\2\u120c\u1210\5\u0088E\2\u120d\u120e\7d\2\2\u120e"+
		"\u1210\7\u021a\2\2\u120f\u120b\3\2\2\2\u120f\u120d\3\2\2\2\u1210\u0237"+
		"\3\2\2\2\u1211\u1212\7K\2\2\u1212\u1213\7\67\2\2\u1213\u1214\7\u00f8\2"+
		"\2\u1214\u0239\3\2\2\2\u1215\u121a\5\u00d8m\2\u1216\u1217\7$\2\2\u1217"+
		"\u1219\5\u00d8m\2\u1218\u1216\3\2\2\2\u1219\u121c\3\2\2\2\u121a\u1218"+
		"\3\2\2\2\u121a\u121b\3\2\2\2\u121b\u023b\3\2\2\2\u121c\u121a\3\2\2\2\u121d"+
		"\u1222\5\u00d0i\2\u121e\u121f\7$\2\2\u121f\u1221\5\u00d0i\2\u1220\u121e"+
		"\3\2\2\2\u1221\u1224\3\2\2\2\u1222\u1220\3\2\2\2\u1222\u1223\3\2\2\2\u1223"+
		"\u023d\3\2\2\2\u1224\u1222\3\2\2\2\u1225\u1226\7^\2\2\u1226\u1230\5\u00a8"+
		"U\2\u1227\u1228\7K\2\2\u1228\u1229\7\u00d4\2\2\u1229\u1231\7\u0097\2\2"+
		"\u122a\u1231\7\u0136\2\2\u122b\u1231\7o\2\2\u122c\u122d\7o\2\2\u122d\u122e"+
		"\7\u011f\2\2\u122e\u1231\5\u023c\u011f\2\u122f\u1231\5\u023c\u011f\2\u1230"+
		"\u1227\3\2\2\2\u1230\u122a\3\2\2\2\u1230\u122b\3\2\2\2\u1230\u122c\3\2"+
		"\2\2\u1230\u122f\3\2\2\2\u1230\u1231\3\2\2\2\u1231\u023f\3\2\2\2\u1232"+
		"\u1238\5\u0242\u0122\2\u1233\u1238\5\u0244\u0123\2\u1234\u1235\7\u0118"+
		"\2\2\u1235\u1236\7\u021b\2\2\u1236\u1238\7\u00f9\2\2\u1237\u1232\3\2\2"+
		"\2\u1237\u1233\3\2\2\2\u1237\u1234\3\2\2\2\u1238\u0241\3\2\2\2\u1239\u123a"+
		"\7\u012b\2\2\u123a\u123e\7t\2\2\u123b\u123f\7\u02c0\2\2\u123c\u123d\7"+
		"\u021a\2\2\u123d\u123f\7\u00f9\2\2\u123e\u123b\3\2\2\2\u123e\u123c\3\2"+
		"\2\2\u123f\u1242\3\2\2\2\u1240\u1241\7\u00c3\2\2\u1241\u1243\7\u02c0\2"+
		"\2\u1242\u1240\3\2\2\2\u1242\u1243\3\2\2\2\u1243\u1247\3\2\2\2\u1244\u1245"+
		"\7\u0219\2\2\u1245\u1246\7\u0098\2\2\u1246\u1248\7\u00f9\2\2\u1247\u1244"+
		"\3\2\2\2\u1247\u1248\3\2\2\2\u1248\u0243\3\2\2\2\u1249\u124a\7\u012b\2"+
		"\2\u124a\u124b\7K\2\2\u124b\u124c\5\u00c2b\2\u124c\u1250\tG\2\2\u124d"+
		"\u1251\7\u02c0\2\2\u124e\u124f\7\u021a\2\2\u124f\u1251\7\u00f9\2\2\u1250"+
		"\u124d\3\2\2\2\u1250\u124e\3\2\2\2\u1251\u1254\3\2\2\2\u1252\u1253\7\u00c3"+
		"\2\2\u1253\u1255\5\u0088E\2\u1254\u1252\3\2\2\2\u1254\u1255\3\2\2\2\u1255"+
		"\u1259\3\2\2\2\u1256\u1257\7\u0219\2\2\u1257\u1258\7\u0098\2\2\u1258\u125a"+
		"\7\u00f9\2\2\u1259\u1256\3\2\2\2\u1259\u125a\3\2\2\2\u125a\u0245\3\2\2"+
		"\2\u125b\u125c\7\u00d2\2\2\u125c\u1260\7\u0133\2\2\u125d\u125e\7\u00d2"+
		"\2\2\u125e\u1260\7\u00e7\2\2\u125f\u125b\3\2\2\2\u125f\u125d\3\2\2\2\u1260"+
		"\u0247\3\2\2\2\u1261\u1262\7\u00f9\2\2\u1262\u1268\7\u0210\2\2\u1263\u1269"+
		"\7\u0097\2\2\u1264\u1269\7\u0211\2\2\u1265\u1266\7\u0083\2\2\u1266\u1267"+
		"\7\u02c1\2\2\u1267\u1269\7\u008d\2\2\u1268\u1263\3\2\2\2\u1268\u1264\3"+
		"\2\2\2\u1268\u1265\3\2\2\2\u1268\u1269\3\2\2\2\u1269\u127a\3\2\2\2\u126a"+
		"\u126b\7\u00f9\2\2\u126b\u126c\7\u0212\2\2\u126c\u127a\t?\2\2\u126d\u126e"+
		"\7\u00f9\2\2\u126e\u126f\7\u0214\2\2\u126f\u1273\7\u0083\2\2\u1270\u1274"+
		"\7\u0097\2\2\u1271\u1272\7\u02c1\2\2\u1272\u1274\7\u008d\2\2\u1273\u1270"+
		"\3\2\2\2\u1273\u1271\3\2\2\2\u1274\u127a\3\2\2\2\u1275\u1276\7\u00f9\2"+
		"\2\u1276\u1277\7\u014f\2\2\u1277\u1278\7\u0098\2\2\u1278\u127a\tH\2\2"+
		"\u1279\u1261\3\2\2\2\u1279\u126a\3\2\2\2\u1279\u126d\3\2\2\2\u1279\u1275"+
		"\3\2\2\2\u127a\u0249\3\2\2\2\u127b\u127c\7\u0215\2\2\u127c\u1284\7\u02c1"+
		"\2\2\u127d\u127e\7\u0216\2\2\u127e\u1284\7\u02c1\2\2\u127f\u1280\7\u0217"+
		"\2\2\u1280\u1284\7\u02c1\2\2\u1281\u1282\7\u0218\2\2\u1282\u1284\7\u02c1"+
		"\2\2\u1283\u127b\3\2\2\2\u1283\u127d\3\2\2\2\u1283\u127f\3\2\2\2\u1283"+
		"\u1281\3\2\2\2\u1284\u024b\3\2\2\2\u1285\u128e\7\u01fd\2\2\u1286\u128e"+
		"\7\u021c\2\2\u1287\u1288\7\u0109\2\2\u1288\u128e\7\u02c0\2\2\u1289\u128a"+
		"\7\u021d\2\2\u128a\u128e\7\u02c0\2\2\u128b\u128c\7\u021e\2\2\u128c\u128e"+
		"\7\u02c0\2\2\u128d\u1285\3\2\2\2\u128d\u1286\3\2\2\2\u128d\u1287\3\2\2"+
		"\2\u128d\u1289\3\2\2\2\u128d\u128b\3\2\2\2\u128e\u024d\3\2\2\2\u128f\u1294"+
		"\5\u0242\u0122\2\u1290\u1291\7\u0118\2\2\u1291\u1292\7\u021b\2\2\u1292"+
		"\u1294\7\u00f9\2\2\u1293\u128f\3\2\2\2\u1293\u1290\3\2\2\2\u1294\u024f"+
		"\3\2\2\2\u1295\u1296\7\u00b7\2\2\u1296\u1297\5\u00a0Q\2\u1297\u0251\3"+
		"\2\2\2\u1298\u1299\tI\2\2\u1299\u129a\5\u00a2R\2\u129a\u0253\3\2\2\2\u129b"+
		"\u129c\7\u00b9\2\2\u129c\u129f\tJ\2\2\u129d\u12a0\5\u0266\u0134\2\u129e"+
		"\u12a0\5\u026a\u0136\2\u129f\u129d\3\2\2\2\u129f\u129e\3\2\2\2\u129f\u12a0"+
		"\3\2\2\2\u12a0\u0255\3\2\2\2\u12a1\u12a3\7\u00b9\2\2\u12a2\u12a4\7\u0163"+
		"\2\2\u12a3\u12a2\3\2\2\2\u12a3\u12a4\3\2\2\2\u12a4\u12a6\3\2\2\2\u12a5"+
		"\u12a7\7V\2\2\u12a6\u12a5\3\2\2\2\u12a6\u12a7\3\2\2\2\u12a7\u12a8\3\2"+
		"\2\2\u12a8\u12aa\7\u00bd\2\2\u12a9\u12ab\5\u0262\u0132\2\u12aa\u12a9\3"+
		"\2\2\2\u12aa\u12ab\3\2\2\2\u12ab\u12ae\3\2\2\2\u12ac\u12af\5\u0266\u0134"+
		"\2\u12ad\u12af\5\u026a\u0136\2\u12ae\u12ac\3\2\2\2\u12ae\u12ad\3\2\2\2"+
		"\u12ae\u12af\3\2\2\2\u12af\u0257\3\2\2\2\u12b0\u12b1\7\u00b9\2\2\u12b1"+
		"\u12b2\7;\2\2\u12b2\u12b4\7\u00c2\2\2\u12b3\u12b5\5\u0262\u0132\2\u12b4"+
		"\u12b3\3\2\2\2\u12b4\u12b5\3\2\2\2\u12b5\u12b8\3\2\2\2\u12b6\u12b9\5\u0266"+
		"\u0134\2\u12b7\u12b9\5\u026a\u0136\2\u12b8\u12b6\3\2\2\2\u12b8\u12b7\3"+
		"\2\2\2\u12b8\u12b9\3\2\2\2\u12b9\u0259\3\2\2\2\u12ba\u12bc\7\u00b9\2\2"+
		"\u12bb\u12bd\7\u0163\2\2\u12bc\u12bb\3\2\2\2\u12bc\u12bd\3\2\2\2\u12bd"+
		"\u12bf\3\2\2\2\u12be\u12c0\7V\2\2\u12bf\u12be\3\2\2\2\u12bf\u12c0\3\2"+
		"\2\2\u12c0\u12c1\3\2\2\2\u12c1\u12c2\t\t\2\2\u12c2\u12c4\5\u0264\u0133"+
		"\2\u12c3\u12c5\5\u0262\u0132\2\u12c4\u12c3\3\2\2\2\u12c4\u12c5\3\2\2\2"+
		"\u12c5\u12c8\3\2\2\2\u12c6\u12c9\5\u0268\u0135\2\u12c7\u12c9\5\u026a\u0136"+
		"\2\u12c8\u12c6\3\2\2\2\u12c8\u12c7\3\2\2\2\u12c8\u12c9\3\2\2\2\u12c9\u025b"+
		"\3\2\2\2\u12ca\u12cc\7\u00b9\2\2\u12cb\u12cd\7\u0163\2\2\u12cc\u12cb\3"+
		"\2\2\2\u12cc\u12cd\3\2\2\2\u12cd\u12ce\3\2\2\2\u12ce\u12cf\tK\2\2\u12cf"+
		"\u12d1\5\u0264\u0133\2\u12d0\u12d2\5\u0262\u0132\2\u12d1\u12d0\3\2\2\2"+
		"\u12d1\u12d2\3\2\2\2\u12d2\u12d4\3\2\2\2\u12d3\u12d5\5\u026a\u0136\2\u12d4"+
		"\u12d3\3\2\2\2\u12d4\u12d5\3\2\2\2\u12d5\u025d\3\2\2\2\u12d6\u12d7\7\u00b9"+
		"\2\2\u12d7\u12d8\7\62\2\2\u12d8\u12d9\7;\2\2\u12d9\u12da\5\u00a2R\2\u12da"+
		"\u025f\3\2\2\2\u12db\u12dc\7\u00b9\2\2\u12dc\u0261\3\2\2\2\u12dd\u12de"+
		"\tL\2\2\u12de\u12df\5\u00a0Q\2\u12df\u0263\3\2\2\2\u12e0\u12e1\tL\2\2"+
		"\u12e1\u12e2\5\u00a2R\2\u12e2\u0265\3\2\2\2\u12e3\u12e4\7q\2\2\u12e4\u12e5"+
		"\5\u0088E\2\u12e5\u0267\3\2\2\2\u12e6\u12e7\7q\2\2\u12e7\u12e8\5\u0088"+
		"E\2\u12e8\u0269\3\2\2\2\u12e9\u12ea\7]\2\2\u12ea\u12eb\5\u00e0q\2\u12eb"+
		"\u026b\3\2\2\2\u12ec\u12ef\5\u0266\u0134\2\u12ed\u12ef\5\u026a\u0136\2"+
		"\u12ee\u12ec\3\2\2\2\u12ee\u12ed\3\2\2\2\u12ef\u026d\3\2\2\2\u12f0\u12fd"+
		"\7o\2\2\u12f1\u12f2\7\u01ed\2\2\u12f2\u12fd\7\u01ee\2\2\u12f3\u12f4\7"+
		"\u01ef\2\2\u12f4\u12fd\7\u01f0\2\2\u12f5\u12fd\7\u01f1\2\2\u12f6\u12fd"+
		"\7\u01f2\2\2\u12f7\u12fd\7\u0135\2\2\u12f8\u12f9\7\u01f3\2\2\u12f9\u12fd"+
		"\7\u01f4\2\2\u12fa\u12fd\7\u01f5\2\2\u12fb\u12fd\7\u01f6\2\2\u12fc\u12f0"+
		"\3\2\2\2\u12fc\u12f1\3\2\2\2\u12fc\u12f3\3\2\2\2\u12fc\u12f5\3\2\2\2\u12fc"+
		"\u12f6\3\2\2\2\u12fc\u12f7\3\2\2\2\u12fc\u12f8\3\2\2\2\u12fc\u12fa\3\2"+
		"\2\2\u12fc\u12fb\3\2\2\2\u12fd\u026f\3\2\2\2\u12fe\u1300\7:\2\2\u12ff"+
		"\u1301\5\u009eP\2\u1300\u12ff\3\2\2\2\u1300\u1301\3\2\2\2\u1301\u0271"+
		"\3\2\2\2\u1302\u1303\7\u00b9\2\2\u1303\u1304\tM\2\2\u1304\u1305\7\u01e2"+
		"\2\2\u1305\u0273\3\2\2\2\u1306\u1307\7\u00b9\2\2\u1307\u1308\7\u01a5\2"+
		"\2\u1308\u130b\7\u01e3\2\2\u1309\u130a\7n\2\2\u130a\u130c\7\u009f\2\2"+
		"\u130b\u1309\3\2\2\2\u130b\u130c\3\2\2\2\u130c\u130f\3\2\2\2\u130d\u130e"+
		"\7S\2\2\u130e\u1310\7\u02c1\2\2\u130f\u130d\3\2\2\2\u130f\u1310\3\2\2"+
		"\2\u1310\u1317\3\2\2\2\u1311\u1314\7x\2\2\u1312\u1313\7\u02c1\2\2\u1313"+
		"\u1315\7$\2\2\u1314\u1312\3\2\2\2\u1314\u1315\3\2\2\2\u1315\u1316\3\2"+
		"\2\2\u1316\u1318\7\u02c1\2\2\u1317\u1311\3\2\2\2\u1317\u1318\3\2\2\2\u1318"+
		"\u0275\3\2\2\2\u1319\u131a\7\u00b9\2\2\u131a\u131b\7\u0081\2\2\u131b\u131d"+
		"\7:\2\2\u131c\u131e\5\u026c\u0137\2\u131d\u131c\3\2\2\2\u131d\u131e\3"+
		"\2\2\2\u131e\u0277\3\2\2\2\u131f\u1320\7\u00b9\2\2\u1320\u1322\7\u00a8"+
		"\2\2\u1321\u1323\5\u026c\u0137\2\u1322\u1321\3\2\2\2\u1322\u1323\3\2\2"+
		"\2\u1323\u0279\3\2\2\2\u1324\u1325\7\u00b9\2\2\u1325\u1326\7\62\2\2\u1326"+
		"\u132a\t+\2\2\u1327\u1328\7`\2\2\u1328\u1329\7h\2\2\u1329\u132b\7l\2\2"+
		"\u132a\u1327\3\2\2\2\u132a\u132b\3\2\2\2\u132b\u132c\3\2\2\2\u132c\u132d"+
		"\5\u00a0Q\2\u132d\u027b\3\2\2\2\u132e\u132f\7\u00b9\2\2\u132f\u1330\7"+
		"\62\2\2\u1330\u1331\7\u011e\2\2\u1331\u1332\5\u00aaV\2\u1332\u027d\3\2"+
		"\2\2\u1333\u1334\7\u00b9\2\2\u1334\u1335\7\62\2\2\u1335\u1336\7E\2\2\u1336"+
		"\u1337\5\u00b0Y\2\u1337\u027f\3\2\2\2\u1338\u1339\7\u00b9\2\2\u1339\u133a"+
		"\7\62\2\2\u133a\u133b\7G\2\2\u133b\u133c\5\u00b0Y\2\u133c\u0281\3\2\2"+
		"\2\u133d\u133e\7\u00b9\2\2\u133e\u133f\7\62\2\2\u133f\u1340\7F\2\2\u1340"+
		"\u1341\5\u00d4k\2\u1341\u0283\3\2\2\2\u1342\u1343\7\u00b9\2\2\u1343\u1344"+
		"\7\62\2\2\u1344\u1345\7\u00d3\2\2\u1345\u1346\5\u00a8U\2\u1346\u0285\3"+
		"\2\2\2\u1347\u1348\7\u00b9\2\2\u1348\u1349\7\62\2\2\u1349\u134a\7H\2\2"+
		"\u134a\u134b\5\u00b2Z\2\u134b\u0287\3\2\2\2\u134c\u134d\7\u00b9\2\2\u134d"+
		"\u134e\7\u011d\2\2\u134e\u134f\5\u00d2j\2\u134f\u1350\tN\2\2\u1350\u0289"+
		"\3\2\2\2\u1351\u1353\7\u00b9\2\2\u1352\u1354\7\u00df\2\2\u1353\u1352\3"+
		"\2\2\2\u1353\u1354\3\2\2\2\u1354\u1355\3\2\2\2\u1355\u1356\7\u01e7\2\2"+
		"\u1356\u028b\3\2\2\2\u1357\u1366\7\u00b9\2\2\u1358\u135f\7\u01e8\2\2\u1359"+
		"\u135c\7x\2\2\u135a\u135b\7\u02c1\2\2\u135b\u135d\7$\2\2\u135c\u135a\3"+
		"\2\2\2\u135c\u135d\3\2\2\2\u135d\u135e\3\2\2\2\u135e\u1360\7\u02c1\2\2"+
		"\u135f\u1359\3\2\2\2\u135f\u1360\3\2\2\2\u1360\u1367\3\2\2\2\u1361\u1362"+
		"\7\u0095\2\2\u1362\u1363\7\36\2\2\u1363\u1364\7\20\2\2\u1364\u1365\7\37"+
		"\2\2\u1365\u1367\7\u01e8\2\2\u1366\u1358\3\2\2\2\u1366\u1361\3\2\2\2\u1367"+
		"\u028d\3\2\2\2\u1368\u1369\7\u00b9\2\2\u1369\u136b\7\u01e3\2\2\u136a\u136c"+
		"\5\u0262\u0132\2\u136b\u136a\3\2\2\2\u136b\u136c\3\2\2\2\u136c\u136e\3"+
		"\2\2\2\u136d\u136f\5\u026c\u0137\2\u136e\u136d\3\2\2\2\u136e\u136f\3\2"+
		"\2\2\u136f\u028f\3\2\2\2\u1370\u1371\7\u00b9\2\2\u1371\u1372\7E\2\2\u1372"+
		"\u1373\7\u01e9\2\2\u1373\u1374\5\u00b0Y\2\u1374\u0291\3\2\2\2\u1375\u1376"+
		"\7\u00b9\2\2\u1376\u1377\7E\2\2\u1377\u1379\7\u00c2\2\2\u1378\u137a\5"+
		"\u026c\u0137\2\u1379\u1378\3\2\2\2\u1379\u137a\3\2\2\2\u137a\u0293\3\2"+
		"\2\2\u137b\u137c\7\u00b9\2\2\u137c\u137d\7\u01ea\2\2\u137d\u1380\7c\2"+
		"\2\u137e\u1381\5\u00a8U\2\u137f\u1381\5\u00d0i\2\u1380\u137e\3\2\2\2\u1380"+
		"\u137f\3\2\2\2\u1381\u138a\3\2\2\2\u1382\u1383\7\\\2\2\u1383\u1386\5\u00d0"+
		"i\2\u1384\u1385\7$\2\2\u1385\u1387\5\u00d0i\2\u1386\u1384\3\2\2\2\u1387"+
		"\u1388\3\2\2\2\u1388\u1386\3\2\2\2\u1388\u1389\3\2\2\2\u1389\u138b\3\2"+
		"\2\2\u138a\u1382\3\2\2\2\u138a\u138b\3\2\2\2\u138b\u0295\3\2\2\2\u138c"+
		"\u138d\7\u00b9\2\2\u138d\u138e\7\u01a4\2\2\u138e\u138f\7\u00c2\2\2\u138f"+
		"\u0297\3\2\2\2\u1390\u1391\7\u00b9\2\2\u1391\u1392\7\u00a5\2\2\u1392\u1394"+
		"\7\u00bd\2\2\u1393\u1395\5\u0262\u0132\2\u1394\u1393\3\2\2\2\u1394\u1395"+
		"\3\2\2\2\u1395\u1397\3\2\2\2\u1396\u1398\5\u026c\u0137\2\u1397\u1396\3"+
		"\2\2\2\u1397\u1398\3\2\2\2\u1398\u0299\3\2\2\2\u1399\u139a\7\u00b9\2\2"+
		"\u139a\u139b\7\u01eb\2\2\u139b\u029b\3\2\2\2\u139c\u139d\7\u00b9\2\2\u139d"+
		"\u139e\7\u00fa\2\2\u139e\u029d\3\2\2\2\u139f\u13a0\7\u00b9\2\2\u13a0\u13a1"+
		"\7G\2\2\u13a1\u13a2\7\u01e9\2\2\u13a2\u13a3\5\u00b0Y\2\u13a3\u029f\3\2"+
		"\2\2\u13a4\u13a5\7\u00b9\2\2\u13a5\u13a6\7G\2\2\u13a6\u13a7\7\u00c2\2"+
		"\2\u13a7\u13a8\5\u026c\u0137\2\u13a8\u02a1\3\2\2\2\u13a9\u13ab\7\u00b9"+
		"\2\2\u13aa\u13ac\7V\2\2\u13ab\u13aa\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac"+
		"\u13ad\3\2\2\2\u13ad\u13ae\7\u01ec\2\2\u13ae\u02a3\3\2\2\2\u13af\u13b0"+
		"\7\u00b9\2\2\u13b0\u13b9\7\u01f7\2\2\u13b1\u13b6\5\u026e\u0138\2\u13b2"+
		"\u13b3\7$\2\2\u13b3\u13b5\5\u026e\u0138\2\u13b4\u13b2\3\2\2\2\u13b5\u13b8"+
		"\3\2\2\2\u13b6\u13b4\3\2\2\2\u13b6\u13b7\3\2\2\2\u13b7\u13ba\3\2\2\2\u13b8"+
		"\u13b6\3\2\2\2\u13b9\u13b1\3\2\2\2\u13b9\u13ba\3\2\2\2\u13ba\u13be\3\2"+
		"\2\2\u13bb\u13bc\7c\2\2\u13bc\u13bd\7\u0162\2\2\u13bd\u13bf\7\u02c1\2"+
		"\2\u13be\u13bb\3\2\2\2\u13be\u13bf\3\2\2\2\u13bf\u13c4\3\2\2\2\u13c0\u13c1"+
		"\7x\2\2\u13c1\u13c2\7\u02c1\2\2\u13c2\u13c3\7y\2\2\u13c3\u13c5\7\u02c1"+
		"\2\2\u13c4\u13c0\3\2\2\2\u13c4\u13c5\3\2\2\2\u13c5\u02a5\3\2\2\2\u13c6"+
		"\u13c7\7\u00b9\2\2\u13c7\u13c8\7\u01f8\2\2\u13c8\u02a7\3\2\2\2\u13c9\u13ca"+
		"\7\u00b9\2\2\u13ca\u13cb\7\u01f9\2\2\u13cb\u13ce\7\u01e3\2\2\u13cc\u13cd"+
		"\7n\2\2\u13cd\u13cf\5\u00ceh\2\u13ce\u13cc\3\2\2\2\u13ce\u13cf\3\2\2\2"+
		"\u13cf\u13d2\3\2\2\2\u13d0\u13d1\7S\2\2\u13d1\u13d3\7\u02c1\2\2\u13d2"+
		"\u13d0\3\2\2\2\u13d2\u13d3\3\2\2\2\u13d3\u13d4\3\2\2\2\u13d4\u13d7\7x"+
		"\2\2\u13d5\u13d6\7\u02c1\2\2\u13d6\u13d8\7$\2\2\u13d7\u13d5\3\2\2\2\u13d7"+
		"\u13d8\3\2\2\2\u13d8\u13d9\3\2\2\2\u13d9\u13da\7\u02c1\2\2\u13da\u13db"+
		"\3\2\2\2\u13db\u13dc\7c\2\2\u13dc\u13dd\7\u01fa\2\2\u13dd\u13de\5\u00cc"+
		"g\2\u13de\u02a9\3\2\2\2\u13df\u13e0\7\u00b9\2\2\u13e0\u13e1\7\u0158\2"+
		"\2\u13e1\u13e2\7\u01ac\2\2\u13e2\u02ab\3\2\2\2\u13e3\u13e4\7\u00b9\2\2"+
		"\u13e4\u13e5\7\u0158\2\2\u13e5\u13e6\7\u00c2\2\2\u13e6\u13e7\7c\2\2\u13e7"+
		"\u13e8\7\u01fa\2\2\u13e8\u13e9\5\u00ccg\2\u13e9\u02ad\3\2\2\2\u13ea\u13eb"+
		"\7\u00b9\2\2\u13eb\u13ec\tO\2\2\u13ec\u13ee\7\u00c2\2\2\u13ed\u13ef\5"+
		"\u026c\u0137\2\u13ee\u13ed\3\2\2\2\u13ee\u13ef\3\2\2\2\u13ef\u02af\3\2"+
		"\2\2\u13f0\u13f1\7\u00b9\2\2\u13f1\u13f3\7F\2\2\u13f2\u13f4\5\u0262\u0132"+
		"\2\u13f3\u13f2\3\2\2\2\u13f3\u13f4\3\2\2\2\u13f4\u13f6\3\2\2\2\u13f5\u13f7"+
		"\5\u026c\u0137\2\u13f6\u13f5\3\2\2\2\u13f6\u13f7\3\2\2\2\u13f7\u02b1\3"+
		"\2\2\2\u13f8\u13fa\7\u00b9\2\2\u13f9\u13fb\tO\2\2\u13fa\u13f9\3\2\2\2"+
		"\u13fa\u13fb\3\2\2\2\u13fb\u13fc\3\2\2\2\u13fc\u13fd\7\u01fb\2\2\u13fd"+
		"\u13fe\5\u026c\u0137\2\u13fe\u02b3\3\2\2\2\u13ff\u140e\7\u00b9\2\2\u1400"+
		"\u1407\7\u01fc\2\2\u1401\u1404\7x\2\2\u1402\u1403\7\u02c1\2\2\u1403\u1405"+
		"\7$\2\2\u1404\u1402\3\2\2\2\u1404\u1405\3\2\2\2\u1405\u1406\3\2\2\2\u1406"+
		"\u1408\7\u02c1\2\2\u1407\u1401\3\2\2\2\u1407\u1408\3\2\2\2\u1408\u140f"+
		"\3\2\2\2\u1409\u140a\7\u0095\2\2\u140a\u140b\7\36\2\2\u140b\u140c\7\20"+
		"\2\2\u140c\u140d\7\37\2\2\u140d\u140f\7\u01fc\2\2\u140e\u1400\3\2\2\2"+
		"\u140e\u1409\3\2\2\2\u140f\u02b5\3\2\2\2\u1410\u1414\7:\2\2\u1411\u1412"+
		"\7\u0081\2\2\u1412\u1415\7:\2\2\u1413\u1415\7\u0107\2\2\u1414\u1411\3"+
		"\2\2\2\u1414\u1413\3\2\2\2\u1415\u1418\3\2\2\2\u1416\u1419\5\u0096L\2"+
		"\u1417\u1419\7\u0097\2\2\u1418\u1416\3\2\2\2\u1418\u1417\3\2\2\2\u1419"+
		"\u02b7\3\2\2\2\u141a\u141b\7:\2\2\u141b\u1422\7\u00a9\2\2\u141c\u141f"+
		"\5\u0096L\2\u141d\u141e\7\u010c\2\2\u141e\u1420\5\u0098M\2\u141f\u141d"+
		"\3\2\2\2\u141f\u1420\3\2\2\2\u1420\u1423\3\2\2\2\u1421\u1423\7\u0097\2"+
		"\2\u1422\u141c\3\2\2\2\u1422\u1421\3\2\2\2\u1423\u02b9\3\2\2\2\u1424\u1425"+
		"\7\u01fe\2\2\u1425\u1426\5\u02bc\u015f\2\u1426\u02bb\3\2\2\2\u1427\u1428"+
		"\7\u00a3\2\2\u1428\u1429\7\u0115\2\2\u1429\u142b\7\u0117\2\2\u142a\u142c"+
		"\7\27\2\2\u142b\u142a\3\2\2\2\u142b\u142c\3\2\2\2\u142c\u142d\3\2\2\2"+
		"\u142d\u142e\5\u00caf\2\u142e\u142f\7*\2\2\u142f\u1444\3\2\2\2\u1430\u1431"+
		"\7\u009c\2\2\u1431\u1432\7S\2\2\u1432\u1433\5\u00c8e\2\u1433\u1434\7\u012b"+
		"\2\2\u1434\u1435\7t\2\2\u1435\u143a\7\u02c0\2\2\u1436\u1437\7\u0115\2"+
		"\2\u1437\u1438\7\u0117\2\2\u1438\u1439\7\27\2\2\u1439\u143b\5\u00caf\2"+
		"\u143a\u1436\3\2\2\2\u143a\u143b\3\2\2\2\u143b\u1441\3\2\2\2\u143c\u143e"+
		"\7\u014f\2\2\u143d\u143f\7\u00f7\2\2\u143e\u143d\3\2\2\2\u143e\u143f\3"+
		"\2\2\2\u143f\u1440\3\2\2\2\u1440\u1442\7\u01fd\2\2\u1441\u143c\3\2\2\2"+
		"\u1441\u1442\3\2\2\2\u1442\u1444\3\2\2\2\u1443\u1427\3\2\2\2\u1443\u1430"+
		"\3\2\2\2\u1444\u02bd\3\2\2\2\u1445\u1446\7\62\2\2\u1446\u1447\7\u01ff"+
		"\2\2\u1447\u1448\7E\2\2\u1448\u1449\5\u00b0Y\2\u1449\u144a\7\u01b4\2\2"+
		"\u144a\u144b\tP\2\2\u144b\u144c\7\u0201\2\2\u144c\u144d\5\u00be`\2\u144d"+
		"\u02bf\3\2\2\2\u144e\u144f\7\u0202\2\2\u144f\u1450\7\u0203\2\2\u1450\u1455"+
		"\5\u00c0a\2\u1451\u1452\7$\2\2\u1452\u1454\5\u00c0a\2\u1453\u1451\3\2"+
		"\2\2\u1454\u1457\3\2\2\2\u1455\u1453\3\2\2\2\u1455\u1456\3\2\2\2\u1456"+
		"\u02c1\3\2\2\2\u1457\u1455\3\2\2\2\u1458\u1459\7\u0202\2\2\u1459\u145a"+
		"\7\u0204\2\2\u145a\u145b\5\u00c2b\2\u145b\u145c\7\u0201\2\2\u145c\u145d"+
		"\5\u00be`\2\u145d\u02c3\3\2\2\2\u145e\u145f\7\u0205\2\2\u145f\u1460\7"+
		"\u0203\2\2\u1460\u1465\5\u00c0a\2\u1461\u1462\7$\2\2\u1462\u1464\5\u00c0"+
		"a\2\u1463\u1461\3\2\2\2\u1464\u1467\3\2\2\2\u1465\u1463\3\2\2\2\u1465"+
		"\u1466\3\2\2\2\u1466\u02c5\3\2\2\2\u1467\u1465\3\2\2\2\u1468\u1469\7\u0205"+
		"\2\2\u1469\u146a\7\u0204\2\2\u146a\u146b\5\u00c2b\2\u146b\u02c7\3\2\2"+
		"\2\u146c\u146e\7\u0100\2\2\u146d\u146f\tQ\2\2\u146e\u146d\3\2\2\2\u146e"+
		"\u146f\3\2\2\2\u146f\u1470\3\2\2\2\u1470\u1481\7;\2\2\u1471\u1482\5\u00b8"+
		"]\2\u1472\u1473\5\u00a2R\2\u1473\u1474\7\60\2\2\u1474\u1475\7\u0207\2"+
		"\2\u1475\u1476\7_\2\2\u1476\u1477\5\u00ba^\2\u1477\u1478\7K\2\2\u1478"+
		"\u1479\7\u02c1\2\2\u1479\u147a\7\u0208\2\2\u147a\u1482\3\2\2\2\u147b\u147c"+
		"\5\u00a2R\2\u147c\u147d\7\64\2\2\u147d\u147e\7\u0207\2\2\u147e\u147f\7"+
		"_\2\2\u147f\u1480\5\u00ba^\2\u1480\u1482\3\2\2\2\u1481\u1471\3\2\2\2\u1481"+
		"\u1472\3\2\2\2\u1481\u147b\3\2\2\2\u1482\u02c9\3\2\2\2\u1483\u1484\7\u00f4"+
		"\2\2\u1484\u1485\7;\2\2\u1485\u1486\5\u00b8]\2\u1486\u1487\5\u02cc\u0167"+
		"\2\u1487\u02cb\3\2\2\2\u1488\u1489\7c\2\2\u1489\u1490\7\u00ea\2\2\u148a"+
		"\u1490\7\u0143\2\2\u148b\u1490\7\u0209\2\2\u148c\u1490\7\u020a\2\2\u148d"+
		"\u1490\7\u0163\2\2\u148e\u1490\7\u0106\2\2\u148f\u1488\3\2\2\2\u148f\u148a"+
		"\3\2\2\2\u148f\u148b\3\2\2\2\u148f\u148c\3\2\2\2\u148f\u148d\3\2\2\2\u148f"+
		"\u148e\3\2\2\2\u1490\u02cd\3\2\2\2\u1491\u1492\7\u0108\2\2\u1492\u1493"+
		"\7;\2\2\u1493\u1494\5\u00b8]\2\u1494\u1495\tR\2\2\u1495\u02cf\3\2\2\2"+
		"\u1496\u1498\7\u013a\2\2\u1497\u1499\tQ\2\2\u1498\u1497\3\2\2\2\u1498"+
		"\u1499\3\2\2\2\u1499\u149a\3\2\2\2\u149a\u149b\7;\2\2\u149b\u149c\5\u00b8"+
		"]\2\u149c\u02d1\3\2\2\2\u149d\u149f\7\u014d\2\2\u149e\u14a0\tQ\2\2\u149f"+
		"\u149e\3\2\2\2\u149f\u14a0\3\2\2\2\u14a0\u14a1\3\2\2\2\u14a1\u14a2\7;"+
		"\2\2\u14a2\u14a4\5\u00b8]\2\u14a3\u14a5\7\u0143\2\2\u14a4\u14a3\3\2\2"+
		"\2\u14a4\u14a5\3\2\2\2\u14a5\u14a7\3\2\2\2\u14a6\u14a8\7\u0163\2\2\u14a7"+
		"\u14a6\3\2\2\2\u14a7\u14a8\3\2\2\2\u14a8\u14aa\3\2\2\2\u14a9\u14ab\7\u020b"+
		"\2\2\u14aa\u14a9\3\2\2\2\u14aa\u14ab\3\2\2\2\u14ab\u02d3\3\2\2\2\u14ac"+
		"\u14ad\7\63\2\2\u14ad\u14ae\7\u020c\2\2\u14ae\u14af\7s\2\2\u14af\u14bc"+
		"\5\u00bc_\2\u14b0\u14b2\7\u020d\2\2\u14b1\u14b3\7\27\2\2\u14b2\u14b1\3"+
		"\2\2\2\u14b2\u14b3\3\2\2\2\u14b3\u14b4\3\2\2\2\u14b4\u14b9\5\u02d6\u016c"+
		"\2\u14b5\u14b6\7$\2\2\u14b6\u14b8\5\u02d6\u016c\2\u14b7\u14b5\3\2\2\2"+
		"\u14b8\u14bb\3\2\2\2\u14b9\u14b7\3\2\2\2\u14b9\u14ba\3\2\2\2\u14ba\u14bd"+
		"\3\2\2\2\u14bb\u14b9\3\2\2\2\u14bc\u14b0\3\2\2\2\u14bc\u14bd\3\2\2\2\u14bd"+
		"\u14c3\3\2\2\2\u14be\u14c0\7\u020e\2\2\u14bf\u14c1\7\27\2\2\u14c0\u14bf"+
		"\3\2\2\2\u14c0\u14c1\3\2\2\2\u14c1\u14c2\3\2\2\2\u14c2\u14c4\7\u02c1\2"+
		"\2\u14c3\u14be\3\2\2\2\u14c3\u14c4\3\2\2\2\u14c4\u14ca\3\2\2\2\u14c5\u14cb"+
		"\7\u0099\2\2\u14c6\u14c8\7\u009a\2\2\u14c7\u14c9\7\u0127\2\2\u14c8\u14c7"+
		"\3\2\2\2\u14c8\u14c9\3\2\2\2\u14c9\u14cb\3\2\2\2\u14ca\u14c5\3\2\2\2\u14ca"+
		"\u14c6\3\2\2\2\u14ca\u14cb\3\2\2\2\u14cb\u02d5\3\2\2\2\u14cc\u14d1\7\u02c1"+
		"\2\2\u14cd\u14ce\7\u02c1\2\2\u14ce\u14cf\7\17\2\2\u14cf\u14d1\7\u02c1"+
		"\2\2\u14d0\u14cc\3\2\2\2\u14d0\u14cd\3\2\2\2\u14d1\u02d7\3\2\2\2\u14d2"+
		"\u14d3\7\62\2\2\u14d3\u14d4\7\u020c\2\2\u14d4\u14d5\7s\2\2\u14d5\u14d6"+
		"\5\u00bc_\2\u14d6\u14d7\7\u00ad\2\2\u14d7\u14d8\7\27\2\2\u14d8\u14e5\t"+
		"S\2\2\u14d9\u14db\7\u020d\2\2\u14da\u14dc\7\27\2\2\u14db\u14da\3\2\2\2"+
		"\u14db\u14dc\3\2\2\2\u14dc\u14dd\3\2\2\2\u14dd\u14e2\5\u02d6\u016c\2\u14de"+
		"\u14df\7$\2\2\u14df\u14e1\5\u02d6\u016c\2\u14e0\u14de\3\2\2\2\u14e1\u14e4"+
		"\3\2\2\2\u14e2\u14e0\3\2\2\2\u14e2\u14e3\3\2\2\2\u14e3\u14e6\3\2\2\2\u14e4"+
		"\u14e2\3\2\2\2\u14e5\u14d9\3\2\2\2\u14e5\u14e6\3\2\2\2\u14e6\u14ec\3\2"+
		"\2\2\u14e7\u14e9\7\u020e\2\2\u14e8\u14ea\7\27\2\2\u14e9\u14e8\3\2\2\2"+
		"\u14e9\u14ea\3\2\2\2\u14ea\u14eb\3\2\2\2\u14eb\u14ed\7\u02c1\2\2\u14ec"+
		"\u14e7\3\2\2\2\u14ec\u14ed\3\2\2\2\u14ed\u14ef\3\2\2\2\u14ee\u14f0\t:"+
		"\2\2\u14ef\u14ee\3\2\2\2\u14ef\u14f0\3\2\2\2\u14f0\u02d9\3\2\2\2\u14f1"+
		"\u14f2\7\64\2\2\u14f2\u14f3\7\u020c\2\2\u14f3\u14f4\7s\2\2\u14f4\u14f6"+
		"\5\u00bc_\2\u14f5\u14f7\7\u0127\2\2\u14f6\u14f5\3\2\2\2\u14f6\u14f7\3"+
		"\2\2\2\u14f7\u02db\3\2\2\2\u14f8\u14f9\7:\2\2\u14f9\u14fa\7\u020c\2\2"+
		"\u14fa\u14fb\7s\2\2\u14fb\u1505\5\u00bc_\2\u14fc\u14fd\7c\2\2\u14fd\u1502"+
		"\7\u02c1\2\2\u14fe\u14ff\7$\2\2\u14ff\u1501\7\u02c1\2\2\u1500\u14fe\3"+
		"\2\2\2\u1501\u1504\3\2\2\2\u1502\u1500\3\2\2\2\u1502\u1503\3\2\2\2\u1503"+
		"\u1506\3\2\2\2\u1504\u1502\3\2\2\2\u1505\u14fc\3\2\2\2\u1505\u1506\3\2"+
		"\2\2\u1506\u02dd\3\2\2\2\u1507\u1508\7\u01a5\2\2\u1508\u1509\5\u0088E"+
		"\2\u1509\u02df\3\2\2\2\u150a\u150b\7\u021f\2\2\u150b\u151a\7=\2\2\u150c"+
		"\u1511\5\u02e2\u0172\2\u150d\u150e\7$\2\2\u150e\u1510\5\u02e2\u0172\2"+
		"\u150f\u150d\3\2\2\2\u1510\u1513\3\2\2\2\u1511\u150f\3\2\2\2\u1511\u1512"+
		"\3\2\2\2\u1512\u151b\3\2\2\2\u1513\u1511\3\2\2\2\u1514\u1515\5\u00a2R"+
		"\2\u1515\u1516\7\u00dd\2\2\u1516\u1517\7\36\2\2\u1517\u1518\5\u02e4\u0173"+
		"\2\u1518\u1519\7\37\2\2\u1519\u151b\3\2\2\2\u151a\u150c\3\2\2\2\u151a"+
		"\u1514\3\2\2\2\u151b\u151c\3\2\2\2\u151c\u151d\7n\2\2\u151d\u151e\7\u02bf"+
		"\2\2\u151e\u02e1\3\2\2\2\u151f\u1525\5\u00a2R\2\u1520\u1521\7\u00dd\2"+
		"\2\u1521\u1522\7\36\2\2\u1522\u1523\5\u02e4\u0173\2\u1523\u1524\7\37\2"+
		"\2\u1524\u1526\3\2\2\2\u1525\u1520\3\2\2\2\u1525\u1526\3\2\2\2\u1526\u1533"+
		"\3\2\2\2\u1527\u1528\t\17\2\2\u1528\u1529\7\36\2\2\u1529\u152e\5\u00a6"+
		"T\2\u152a\u152b\7$\2\2\u152b\u152d\5\u00a6T\2\u152c\u152a\3\2\2\2\u152d"+
		"\u1530\3\2\2\2\u152e\u152c\3\2\2\2\u152e\u152f\3\2\2\2\u152f\u1531\3\2"+
		"\2\2\u1530\u152e\3\2\2\2\u1531\u1532\7\37\2\2\u1532\u1534\3\2\2\2\u1533"+
		"\u1527\3\2\2\2\u1533\u1534\3\2\2\2\u1534\u02e3\3\2\2\2\u1535\u153a\5\u00da"+
		"n\2\u1536\u1537\7$\2\2\u1537\u1539\5\u00dan\2\u1538\u1536\3\2\2\2\u1539"+
		"\u153c\3\2\2\2\u153a\u1538\3\2\2\2\u153a\u153b\3\2\2\2\u153b\u153f\3\2"+
		"\2\2\u153c\u153a\3\2\2\2\u153d\u153f\7o\2\2\u153e\u1535\3\2\2\2\u153e"+
		"\u153d\3\2\2\2\u153f\u02e5\3\2\2\2\u1540\u1542\7\u0228\2\2\u1541\u1543"+
		"\tQ\2\2\u1542\u1541\3\2\2\2\u1542\u1543\3\2\2\2\u1543\u154d\3\2\2\2\u1544"+
		"\u1549\5\u02e8\u0175\2\u1545\u1546\7$\2\2\u1546\u1548\5\u02e8\u0175\2"+
		"\u1547\u1545\3\2\2\2\u1548\u154b\3\2\2\2\u1549\u1547\3\2\2\2\u1549\u154a"+
		"\3\2\2\2\u154a\u154e\3\2\2\2\u154b\u1549\3\2\2\2\u154c\u154e\5\u02ea\u0176"+
		"\2\u154d\u1544\3\2\2\2\u154d\u154c\3\2\2\2\u154e\u02e7\3\2\2\2\u154f\u1550"+
		"\7\u00da\2\2\u1550\u1567\7\u01e2\2\2\u1551\u1552\7\u011d\2\2\u1552\u1567"+
		"\7\u01e2\2\2\u1553\u1554\7\u01a6\2\2\u1554\u1567\7\u01e2\2\2\u1555\u1556"+
		"\7\u0220\2\2\u1556\u1567\7\u01e2\2\2\u1557\u1567\7\u0226\2\2\u1558\u1567"+
		"\7\u01e2\2\2\u1559\u1567\7\u00fa\2\2\u155a\u1567\7\u0221\2\2\u155b\u155c"+
		"\7\u0225\2\2\u155c\u1560\7\u01e2\2\2\u155d\u155e\7c\2\2\u155e\u155f\7"+
		"\u01fa\2\2\u155f\u1561\5\u00ccg\2\u1560\u155d\3\2\2\2\u1560\u1561\3\2"+
		"\2\2\u1561\u1567\3\2\2\2\u1562\u1563\7\u0222\2\2\u1563\u1567\7\u01e2\2"+
		"\2\u1564\u1567\7\u00c2\2\2\u1565\u1567\7\u0223\2\2\u1566\u154f\3\2\2\2"+
		"\u1566\u1551\3\2\2\2\u1566\u1553\3\2\2\2\u1566\u1555\3\2\2\2\u1566\u1557"+
		"\3\2\2\2\u1566\u1558\3\2\2\2\u1566\u1559\3\2\2\2\u1566\u155a\3\2\2\2\u1566"+
		"\u155b\3\2\2\2\u1566\u1562\3\2\2\2\u1566\u1564\3\2\2\2\u1566\u1565\3\2"+
		"\2\2\u1567\u02e9\3\2\2\2\u1568\u1590\7\u00bd\2\2\u1569\u156a\7\u00bd\2"+
		"\2\u156a\u156f\5\u00a2R\2\u156b\u156c\7$\2\2\u156c\u156e\5\u00a2R\2\u156d"+
		"\u156b\3\2\2\2\u156e\u1571\3\2\2\2\u156f\u156d\3\2\2\2\u156f\u1570\3\2"+
		"\2\2\u1570\u1590\3\2\2\2\u1571\u156f\3\2\2\2\u1572\u1573\7\u00bd\2\2\u1573"+
		"\u1574\7K\2\2\u1574\u1575\7\u00fb\2\2\u1575\u1590\7\u0133\2\2\u1576\u1577"+
		"\7\u00bd\2\2\u1577\u157c\5\u00a2R\2\u1578\u1579\7$\2\2\u1579\u157b\5\u00a2"+
		"R\2\u157a\u1578\3\2\2\2\u157b\u157e\3\2\2\2\u157c\u157a\3\2\2\2\u157c"+
		"\u157d\3\2\2\2\u157d\u157f\3\2\2\2\u157e\u157c\3\2\2\2\u157f\u1580\7K"+
		"\2\2\u1580\u1581\7\u00fb\2\2\u1581\u1582\7\u0133\2\2\u1582\u1590\3\2\2"+
		"\2\u1583\u1584\7\u00bd\2\2\u1584\u1589\5\u00a2R\2\u1585\u1586\7$\2\2\u1586"+
		"\u1588\5\u00a2R\2\u1587\u1585\3\2\2\2\u1588\u158b\3\2\2\2\u1589\u1587"+
		"\3\2\2\2\u1589\u158a\3\2\2\2\u158a\u158c\3\2\2\2\u158b\u1589\3\2\2\2\u158c"+
		"\u158d\7c\2\2\u158d\u158e\7\u0224\2\2\u158e\u1590\3\2\2\2\u158f\u1568"+
		"\3\2\2\2\u158f\u1569\3\2\2\2\u158f\u1572\3\2\2\2\u158f\u1576\3\2\2\2\u158f"+
		"\u1583\3\2\2\2\u1590\u02eb\3\2\2\2\u1591\u1593\7\u0227\2\2\u1592\u1594"+
		"\tT\2\2\u1593\u1592\3\2\2\2\u1593\u1594\3\2\2\2\u1594\u1596\3\2\2\2\u1595"+
		"\u1597\7\u02c1\2\2\u1596\u1595\3\2\2\2\u1597\u1598\3\2\2\2\u1598\u1596"+
		"\3\2\2\2\u1598\u1599\3\2\2\2\u1599\u02ed\3\2\2\2\u159a\u159b\7\u01d4\2"+
		"\2\u159b\u159c\7=\2\2\u159c\u159d\7I\2\2\u159d\u159e\7\u021f\2\2\u159e"+
		"\u15a3\5\u02e2\u0172\2\u159f\u15a0\7$\2\2\u15a0\u15a2\5\u02e2\u0172\2"+
		"\u15a1\u159f\3\2\2\2\u15a2\u15a5\3\2\2\2\u15a3\u15a1\3\2\2\2\u15a3\u15a4"+
		"\3\2\2\2\u15a4\u02ef\3\2\2\2\u15a5\u15a3\3\2\2\2\u15a6\u15a7\7\u0229\2"+
		"\2\u15a7\u15ac\5\u02f2\u017a\2\u15a8\u15a9\7$\2\2\u15a9\u15ab\5\u02f2"+
		"\u017a\2\u15aa\u15a8\3\2\2\2\u15ab\u15ae\3\2\2\2\u15ac\u15aa\3\2\2\2\u15ac"+
		"\u15ad\3\2\2\2\u15ad\u02f1\3\2\2\2\u15ae\u15ac\3\2\2\2\u15af\u15b4\7\u01a4"+
		"\2\2\u15b0\u15b4\7\u0158\2\2\u15b1\u15b2\7\u0162\2\2\u15b2\u15b4\7\u021f"+
		"\2\2\u15b3\u15af\3\2\2\2\u15b3\u15b0\3\2\2\2\u15b3\u15b1\3\2\2\2\u15b4"+
		"\u02f3\3\2\2\2\u15b5\u15b6\7\u0229\2\2\u15b6\u15b9\7\u013f\2\2\u15b7\u15b8"+
		"\7`\2\2\u15b8\u15ba\7l\2\2\u15b9\u15b7\3\2\2\2\u15b9\u15ba\3\2\2\2\u15ba"+
		"\u15bb\3\2\2\2\u15bb\u15bc\7\u02bf\2\2\u15bc\u02f5\3\2\2\2\u15bd\u15be"+
		"\7\u022a\2\2\u15be\u02f7\3\2\2\2\u15bf\u15c0\7\u0156\2\2\u15c0\u02f9\3"+
		"\2\2\2\u15c1\u15c2\7\u0106\2\2\u15c2\u15c3\7\u01a4\2\2\u15c3\u15ca\7d"+
		"\2\2\u15c4\u15c5\5\u009aN\2\u15c5\u15c8\7\27\2\2\u15c6\u15c9\5\u009aN"+
		"\2\u15c7\u15c9\5\u0146\u00a4\2\u15c8\u15c6\3\2\2\2\u15c8\u15c7\3\2\2\2"+
		"\u15c9\u15cb\3\2\2\2\u15ca\u15c4\3\2\2\2\u15cb\u15cc\3\2\2\2\u15cc\u15ca"+
		"\3\2\2\2\u15cc\u15cd\3\2\2\2\u15cd\u15d1\3\2\2\2\u15ce\u15cf\7c\2\2\u15cf"+
		"\u15d0\7\u01fa\2\2\u15d0\u15d2\5\u009aN\2\u15d1\u15ce\3\2\2\2\u15d1\u15d2"+
		"\3\2\2\2\u15d2\u02fb\3\2\2\2\u15d3\u15d4\7\u00d5\2\2\u15d4\u15d5\7\u0158"+
		"\2\2\u15d5\u15d9\5\u0300\u0181\2\u15d6\u15d8\5\u0304\u0183\2\u15d7\u15d6"+
		"\3\2\2\2\u15d8\u15db\3\2\2\2\u15d9\u15d7\3\2\2\2\u15d9\u15da\3\2\2\2\u15da"+
		"\u15df\3\2\2\2\u15db\u15d9\3\2\2\2\u15dc\u15de\5\u0306\u0184\2\u15dd\u15dc"+
		"\3\2\2\2\u15de\u15e1\3\2\2\2\u15df\u15dd\3\2\2\2\u15df\u15e0\3\2\2\2\u15e0"+
		"\u15e5\3\2\2\2\u15e1\u15df\3\2\2\2\u15e2\u15e4\5\u0308\u0185\2\u15e3\u15e2"+
		"\3\2\2\2\u15e4\u15e7\3\2\2\2\u15e5\u15e3\3\2\2\2\u15e5\u15e6\3\2\2\2\u15e6"+
		"\u02fd\3\2\2\2\u15e7\u15e5\3\2\2\2\u15e8\u15e9\7\u02be\2\2\u15e9\u15ea"+
		"\7\u0158\2\2\u15ea\u15ee\5\u0300\u0181\2\u15eb\u15ed\5\u0308\u0185\2\u15ec"+
		"\u15eb\3\2\2\2\u15ed\u15f0\3\2\2\2\u15ee\u15ec\3\2\2\2\u15ee\u15ef\3\2"+
		"\2\2\u15ef\u02ff\3\2\2\2\u15f0\u15ee\3\2\2\2\u15f1\u15f3\5\u0302\u0182"+
		"\2\u15f2\u15f1\3\2\2\2\u15f3\u15f6\3\2\2\2\u15f4\u15f2\3\2\2\2\u15f4\u15f5"+
		"\3\2\2\2\u15f5\u0301\3\2\2\2\u15f6\u15f4\3\2\2\2\u15f7\u15f8\tU\2\2\u15f8"+
		"\u0303\3\2\2\2\u15f9\u160e\7\u02bb\2\2\u15fa\u15fb\tV\2\2\u15fb\u15fc"+
		"\7\27\2\2\u15fc\u160f\5\u009aN\2\u15fd\u15fe\7\u02b6\2\2\u15fe\u15ff\7"+
		"\27\2\2\u15ff\u1600\5\u009aN\2\u1600\u1601\7$\2\2\u1601\u1602\7\u02b7"+
		"\2\2\u1602\u1603\7\27\2\2\u1603\u1604\5\u009aN\2\u1604\u160f\3\2\2\2\u1605"+
		"\u1606\7\u02b8\2\2\u1606\u1607\7\27\2\2\u1607\u1608\5\u009aN\2\u1608\u1609"+
		"\7$\2\2\u1609\u160a\7\u02b9\2\2\u160a\u160b\7\27\2\2\u160b\u160c\5\u009a"+
		"N\2\u160c\u160f\3\2\2\2\u160d\u160f\7\u02ba\2\2\u160e\u15fa\3\2\2\2\u160e"+
		"\u15fd\3\2\2\2\u160e\u1605\3\2\2\2\u160e\u160d\3\2\2\2\u160f\u0305\3\2"+
		"\2\2\u1610\u1611\7\u00d3\2\2\u1611\u1612\7\27\2\2\u1612\u161d\5\u009a"+
		"N\2\u1613\u1614\7\u00f9\2\2\u1614\u1615\7\27\2\2\u1615\u161d\5\u009aN"+
		"\2\u1616\u1617\7\u02bc\2\2\u1617\u1618\7\27\2\2\u1618\u161d\5\u009aN\2"+
		"\u1619\u161a\7\u02bd\2\2\u161a\u161b\7\27\2\2\u161b\u161d\5\u009aN\2\u161c"+
		"\u1610\3\2\2\2\u161c\u1613\3\2\2\2\u161c\u1616\3\2\2\2\u161c\u1619\3\2"+
		"\2\2\u161d\u0307\3\2\2\2\u161e\u161f\7c\2\2\u161f\u1620\7\u01fa\2\2\u1620"+
		"\u1621\5\u009aN\2\u1621\u0309\3\2\2\2\u02c6\u0337\u033a\u033f\u0343\u0348"+
		"\u034b\u034e\u0351\u0354\u035c\u0360\u036d\u0372\u0375\u0379\u037e\u0387"+
		"\u038a\u038d\u0390\u0393\u039f\u03a8\u03af\u03b4\u03bd\u03c0\u03c3\u03c6"+
		"\u03c9\u03ce\u03d1\u03d4\u03df\u03e3\u03e8\u03ec\u03f0\u03fc\u0401\u0407"+
		"\u040d\u0413\u0416\u0422\u0426\u042a\u0432\u0436\u0442\u0447\u044a\u044f"+
		"\u045b\u0460\u0465\u046b\u046d\u0473\u0475\u047b\u0483\u0488\u048b\u0490"+
		"\u0493\u0498\u04a0\u04a8\u04ae\u04b6\u04bb\u04be\u04c2\u04c9\u04ce\u04d6"+
		"\u04db\u04e2\u04e7\u04ea\u04ed\u04f0\u04f3\u04f6\u04f9\u04fc\u04ff\u0509"+
		"\u050f\u0515\u051a\u051d\u0520\u0523\u0527\u0536\u053f\u0545\u054a\u054d"+
		"\u0550\u0553\u0557\u055b\u0561\u056a\u0574\u057f\u0581\u0589\u058f\u0593"+
		"\u0597\u059b\u05a5\u05a9\u05af\u05bb\u05c0\u05c9\u05d0\u05d4\u05d8\u05e0"+
		"\u05f3\u05f9\u0601\u0609\u0615\u061b\u061d\u0623\u0625\u0627\u062f\u063a"+
		"\u063d\u0641\u0644\u064f\u0652\u0656\u0659\u065d\u0669\u066e\u0671\u0674"+
		"\u0677\u0680\u0687\u0692\u069a\u069e\u06a2\u06a8\u06ab\u06b1\u06b4\u06bb"+
		"\u06c2\u06c6\u06c9\u06d0\u06d4\u06f3\u06fd\u070f\u0718\u071a\u0727\u0736"+
		"\u0738\u073f\u0746\u074f\u0756\u0764\u076a\u076e\u0774\u07a3\u07a5\u07b1"+
		"\u07b9\u07bf\u07ca\u07d3\u07d5\u07d7\u07dd\u07e2\u07e9\u07ed\u07f1\u07fd"+
		"\u0800\u0803\u0806\u0809\u0812\u0818\u0826\u083a\u083f\u0846\u084a\u084d"+
		"\u0851\u085c\u0877\u0887\u0892\u0896\u08a6\u08ab\u08c1\u08c4\u08ce\u08d4"+
		"\u08d8\u08db\u08e4\u08e8\u0976\u097d\u0990\u0994\u0999\u099c\u09b5\u09bb"+
		"\u09be\u09c2\u09c5\u09c8\u09cb\u09d0\u09d3\u09d5\u09d8\u0a06\u0a0c\u0a16"+
		"\u0a1e\u0a24\u0a28\u0a2d\u0a34\u0a39\u0a40\u0a46\u0a51\u0a56\u0a5a\u0a5f"+
		"\u0a62\u0a64\u0a69\u0a72\u0a78\u0a7c\u0a81\u0a84\u0a86\u0a8e\u0a94\u0a9d"+
		"\u0aa1\u0aa6\u0aa9\u0aad\u0ab1\u0ab8\u0abe\u0ad4\u0ad6\u0ada\u0ae0\u0ae9"+
		"\u0aec\u0af3\u0af7\u0afe\u0b05\u0b0a\u0b0d\u0b12\u0b19\u0b1d\u0b21\u0b27"+
		"\u0b2d\u0b35\u0b3d\u0b46\u0b51\u0b5d\u0b63\u0b69\u0b70\u0b7b\u0b82\u0b94"+
		"\u0ba3\u0bac\u0bb3\u0bb8\u0bbb\u0bc0\u0bca\u0bcf\u0bd5\u0bd9\u0bdf\u0be2"+
		"\u0be7\u0bf1\u0bf6\u0bfc\u0c00\u0c06\u0c0d\u0c11\u0c15\u0c1f\u0c24\u0c28"+
		"\u0c2b\u0c2f\u0c3c\u0c3f\u0c43\u0c46\u0c4a\u0c4d\u0c51\u0c54\u0c58\u0c5b"+
		"\u0c5e\u0c62\u0c65\u0c69\u0c76\u0c79\u0c7d\u0c86\u0c89\u0c94\u0c97\u0c9b"+
		"\u0c9e\u0ca2\u0ca5\u0ca9\u0cac\u0caf\u0cb3\u0cb6\u0cba\u0cc7\u0cca\u0ccd"+
		"\u0cd1\u0cdf\u0ceb\u0cf4\u0cfc\u0d05\u0d0c\u0d12\u0d15\u0d1c\u0d22\u0d27"+
		"\u0d2c\u0d31\u0d34\u0d3c\u0d40\u0d42\u0d47\u0d4a\u0d55\u0d5c\u0d67\u0d6a"+
		"\u0d6d\u0d70\u0d73\u0d79\u0d85\u0d8e\u0d91\u0d94\u0d98\u0da2\u0da6\u0da8"+
		"\u0dad\u0db1\u0db7\u0dbb\u0dc1\u0dc4\u0dc7\u0dcd\u0dd3\u0dd9\u0dde\u0de1"+
		"\u0de8\u0df8\u0dfe\u0e03\u0e0b\u0e15\u0e19\u0e1f\u0e2f\u0e47\u0e4e\u0e55"+
		"\u0e68\u0e6e\u0e74\u0e7a\u0e80\u0e86\u0e8c\u0e90\u0e95\u0e9a\u0e9f\u0ea3"+
		"\u0ea7\u0eab\u0eb0\u0eb5\u0eba\u0ec0\u0ec5\u0eca\u0ecf\u0ed4\u0ed9\u0ede"+
		"\u0ee3\u0ee8\u0eed\u0ef2\u0ef7\u0efc\u0f01\u0f08\u0f0c\u0f14\u0f19\u0f1d"+
		"\u0f21\u0f29\u0f2e\u0f33\u0f3d\u0f42\u0f46\u0f4a\u0f4e\u0f67\u0f71\u0f81"+
		"\u0f83\u0f88\u0f91\u0f96\u0f9b\u0fa0\u0fa7\u0fab\u0faf\u0fb4\u0fba\u0fc0"+
		"\u0fc5\u0fca\u0fcf\u0fd2\u0fd9\u0fdd\u0fe1\u0feb\u0fed\u0ff5\u1000\u1003"+
		"\u100b\u100e\u1010\u1016\u1028\u102f\u103c\u1041\u1049\u104d\u1053\u105e"+
		"\u1065\u1071\u1078\u1080\u1088\u108b\u1091\u1095\u109f\u10a4\u10a8\u10ad"+
		"\u10b1\u10e8\u10eb\u10f8\u10ff\u1103\u1108\u110c\u1116\u111d\u1122\u1125"+
		"\u1127\u112e\u1131\u1135\u1137\u113e\u1142\u1147\u114b\u1152\u1157\u115a"+
		"\u115c\u1163\u1166\u116a\u116c\u1173\u117d\u1189\u118c\u118e\u1194\u119b"+
		"\u11a3\u11aa\u11b1\u11b8\u11c7\u11d4\u11d7\u11df\u11ee\u11f6\u11f9\u11ff"+
		"\u1204\u1209\u120f\u121a\u1222\u1230\u1237\u123e\u1242\u1247\u1250\u1254"+
		"\u1259\u125f\u1268\u1273\u1279\u1283\u128d\u1293\u129f\u12a3\u12a6\u12aa"+
		"\u12ae\u12b4\u12b8\u12bc\u12bf\u12c4\u12c8\u12cc\u12d1\u12d4\u12ee\u12fc"+
		"\u1300\u130b\u130f\u1314\u1317\u131d\u1322\u132a\u1353\u135c\u135f\u1366"+
		"\u136b\u136e\u1379\u1380\u1388\u138a\u1394\u1397\u13ab\u13b6\u13b9\u13be"+
		"\u13c4\u13ce\u13d2\u13d7\u13ee\u13f3\u13f6\u13fa\u1404\u1407\u140e\u1414"+
		"\u1418\u141f\u1422\u142b\u143a\u143e\u1441\u1443\u1455\u1465\u146e\u1481"+
		"\u148f\u1498\u149f\u14a4\u14a7\u14aa\u14b2\u14b9\u14bc\u14c0\u14c3\u14c8"+
		"\u14ca\u14d0\u14db\u14e2\u14e5\u14e9\u14ec\u14ef\u14f6\u1502\u1505\u1511"+
		"\u151a\u1525\u152e\u1533\u153a\u153e\u1542\u1549\u154d\u1560\u1566\u156f"+
		"\u157c\u1589\u158f\u1593\u1598\u15a3\u15ac\u15b3\u15b9\u15c8\u15cc\u15d1"+
		"\u15d9\u15df\u15e5\u15ee\u15f4\u160e\u161c";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}